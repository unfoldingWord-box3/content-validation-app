{"version":3,"sources":["../../../src/core/field-text-check.js","../../../src/core/index.js","../../src/index.js","../../../src/core/utilities.js","../../../src/core/getApi.js","../../../src/demos/notice-processing-functions.js","../../../src/demos/RenderProcessedResults.js","../../../../src/core/books/index.js","../../../src/core/text-handling-functions.js","../../../src/core/markdown-text-check.js","../../../src/core/plain-text-check.js","../../../src/core/tn-table-row-check.js","../../../src/core/ta-reference-check.js","../../../src/core/tn-links-check.js","../../../src/core/quote-check.js","../../../src/core/tn-table-text-check.js","../../../src/core/annotation-row-check.js","../../../src/core/usfm-text-check.js","../../../src/core/yaml-text-check.js","../node_modules/jspdf/dist sync","../../../src/demos/index.js","../../../../src/demos/file-check/index.js","../../../../src/demos/file-check/FileCheck.js","../../../src/core/annotation-table-check.js","../../../src/core/file-text-check.js","../../../src/core/usfm-js-check.js","../../../src/core/BCS-usfm-grammar-check.js","../../../src/core/book-package-check.js","../../../src/core/manifest-text-check.js","../../../../src/demos/book-package-check/index.js","../../../../src/demos/book-package-check/BookPackageCheck.js","../../../../src/demos/book-packages-check/index.js","../../../../src/demos/book-packages-check/BookPackagesCheck.js","../../../../src/demos/book-packages-check/checkBookPackages.js","../../../../src/demos/repo-check/index.js","../../../../src/demos/repo-check/RepoCheck.js","fonts/SILEOTSR.ttf","core/books.ts","core/utilities.ts","ValidationNotices.js","BookPackageContentValidator.js","App.tsx","serviceWorker.ts","index.tsx","../../../../src/core/books/books.js"],"names":["checkTextField","fieldName","fieldText","allowedLinks","optionalFieldLocation","optionalCheckingOptions","console","result","noticeList","noticeObject","ourLocation","isWhitespace","addNotice6","priority","message","location","extractLength","btcError","isNaN","halfLength","Math","halfLengthPlus","characterIndex","iy","extract","checkList","punctChar","punctSet","leftChar","rightChar","leftCount","countOccurrences","rightCount","details","clTitle","clObject","clOutput","thisPropertyContents","oType","Object","oLength","olError","givenTitle","givenObject","output","givenString","int","baseURL","failedStore","driver","localforage","name","zipStore","cacheStore","Door43Api","setup","cache","store","maxAge","exclude","query","key","req","serialized","JSON","cachedUnzippedFiles","username","repository","path","branch","filePath","Path","getFile","file","clearCaches","getRepoName","languageCode","repoCode","repo_languageCode","repos","success","repos_","bookIDList","Array","bookID","whichTestament","books","origLang","repoName","fetchRepositoryZipFile","zipFetchSucceeded","fetchFileFromServer","repositoryExists","uri","cachedGet","data","getFileFromZip","getUID","user","uid","params","q","limit","repo","zipUri","fetch","response","zipArrayBuffer","optionalPrefix","zipBlob","pathList","JSZip","zip","relativePath","zipPath","sha","givenNoticeObject","optionalProcessingOptions","processNoticesCommon","remainingNoticeList","allTotals","resultObject","maximumSimilarMessages","npfMSMerror","errorPriorityLevel","npfEPLerror","counter","thisNotice","thisPriority","thisMsg","thisID","numSuppressed","severePriorityLevel","npfSPLerror","mediumPriorityLevel","nfpMPLerror","sortBy","npfSBerror","DEFAULT_IGNORE_PRIORITY_NUMBER_LIST","standardisedNoticeList","numberStore","duplicatePriorityList","thisGivenNotice","oldMsg","thisRepoName","thisFilename","thisLineNumber","thisRowID","thisFieldName","thisLocation","numIgnoredNotices","numSuppressedWarnings","processingOptions","gnoPropertyName","ignorePriorityNumberList","npfIPNLerror","cutoffPriorityLevel","npfCPLerror","BibleRegex","NotesRegex","UHBBookList","UGNTBookList","ULTBookList","USTBookList","TNBookList","USFMBookList","TSVNotesList","thisParticularSuccessMsg","regexResult","Set","thisParticularNotice","thisNewNotice","C","V","undefined","newNoticeList","a","b","thisExtra","newNotice","text","line","index","results","thisObject","excludeList","allPropertiesSet","haveOBS","haveBible","noticeEntry","noticePropertyName","noticePropertyValue","headerData","title","field","type","CName","VName","columns","options","sorting","exportButton","exportAllData","haveErrorsOrWarnings","successCount","style","color","elapsedSeconds","seconds","remainingTime","minutes","hours","RenderObject","displayObject","keyIndex","RenderMessage","detailsString","RenderBCV","RenderFileDetails","filename","lineNumber","rowID","resultStart","lineResult","resultEnd","RenderSuccessesColored","haveWarnings","e1","e2","listEntry","RenderProcessedArray","arrayType","myList","RenderGivenArray","array","getGradientcolor","priorityValue","red","RenderWarningsGradient","thiscolor","RenderErrors","RenderWarnings","RenderErrorsAndWarnings","RenderSevere","RenderMedium","RenderLow","RenderSevereMediumLow","myString","test","mainString","subString","allowOverlapping","n","pos","step","textName","markdownText","givenLocation","mdtcError","successList","thisText","ourCheckTextField","lineLocation","lines","headerLevel","lastNumLeadingSpaces","numLeadingSpaces","thisHeaderLevel","checkMarkdownLineContents","addSuccessMessage","plainText","ptcError","cptResult","lineText","checkPlainLineContents","EXPECTED_TN_HEADING_LINE","taLinkText","coqResultObject","addNotice6to9","ourCheckTNLinks","rowLocation","ourCheckTNOriginalLanguageQuote","taRepoLanguageCode","ourCheckTAReference","ourMarkdownTextChecks","drResult","givenRowLocation","ourRowLocation","tlcELerror","lowercaseBookID","numChaptersThisBook","tlcNCerror","haveGoodBookID","fields","B","supportReference","origQuote","occurrence","GLQuote","occurrenceNote","intC","Number","haveGoodChapterNumber","numVersesThisChapter","tlcNVerror","intV","indexOf","characterIndeX","ctarResult","trcUNerror","trcBRerror","trcLCerror","sectionName","trcSNerror","taRepoName","filepath","getFileCached_","getFileCached","taFileContent","defaultLanguageCode","taRegex","RegExp","resultArray","twRegex","twRepoName","tnlcError","bibleRegex","chapterInt","verseInt","ourParseInt","tnCIerror","tnVIerror","ccError","vvError","bookNumberAndName","originalLanguageRepoCode","originalLanguageRepoName","qcoError","qcunError","originalUSFM","extra","foundChapter","foundVerse","verseText","bookLine","ixW","ixEnd","bits","adjusted_field","getPassage","colqResult","gcELerror","quoteBits","gcVTerror","numQuoteBits","bitIndex","partDescription","remainingBits","noBreakSpaceText","addNoticeCV8","ttcError","tableText","lastB","lastC","lastV","rowIDList","uniqueRowList","firstResult","uniqueID","lastintC","lastintV","adrResult","annotationType","haveBibleBookID","reference","tags","quote","annotation","INTRO_LINE_START_MARKERS","CV_MARKERS","HEADING_TYPE_MARKERS","PARAGRAPH_MARKERS","NOTE_MARKERS","SPECIAL_MARKERS","MILESTONE_MARKERS","MARKERS_WITHOUT_CONTENT","concat","ALLOWED_LINE_START_MARKERS","DEPRECATED_MARKERS","MARKERS_WITH_COMPULSORY_CONTENT","COMPULSORY_MARKERS","EXPECTED_MARKERS","EXPECTED_BIBLE_BOOK_MARKERS","EXPECTED_PERIPHERAL_BOOK_MARKERS","givenText","usfmELerror","opener","closer","lCount","rCount","fileLocation","checkUSFMCharacterFields","fileText","ourBasicFileChecks","compulsoryMarker","markerSet","expectedMarker","deprecatedMarker","marker","Vstr","rest","checkUSFMLineInternals","allResults","USFMline","foundMarker","char","lastIntC","lastIntV","lastMarker","lastRest","findStartMarker","vIndex","usfmICerror","usfmIVerror","firstV","secondV","intFirstV","intSecondV","usfmV12error","restRest","parseInt","usfmIIVerror","thisLength","checkUSFMLineContents","checkUSFMFileContents","mainUSFMCheck","gotDeep","someObject","someSubobject","someSubSubobject","someSubSubSubobject","someSubSubSubSubobject","expectedVersesPerChapterList","result1","runUsfmJsCheck","usfmCIerror","CVlocation","discoveredVerseList","discoveredVerseWithTextList","verseNumberString","verseHasText","hasText","firstVString","secondVString","v","usfmVIerror","usfmPIerror","CVCheck","grammarCheckResult","runBCSGrammarCheck","warningString","relaxedGrammarCheckResult","ourRunBCSGrammarCheck","YAMLText","ytcError","cytResult","allowedLinksInLine","lineName","formData","yaml","yamlError","checkYAMLLineContents","webpackEmptyContext","e","Error","code","keys","resolve","module","exports","id","withStyles","theme","root","props","useState","setResultValue","useEffect","renderSummary","processedResults","rawCFResults","fileContent","checkFileContents","processOptions","displayType","processNoticesToErrorsWarnings","processNoticesToSevereMediumLow","processNoticesToSingleList","checkingOptions","className","rowID_list","checkTextfileContents","optionalFileLocation","bfcError","convertOptions","jsonResult","toJSON","isValidUSFM","returnedJSON","checkUSFMToJSON","addNotice6to7","strictnessString","ourUsfmParser","grammar","parserResult","ourErrorObject","parseError","contextRE","errorLine","lineNumberString","ourErrorMessage","adjustedPriority","notified","ourWarnings","adjustedString","error","warnings","checkUSFMGrammar","cugResult","checkRepo","bookOrFileCode","cfBookID","file_content","cfcResultObject","cfcNoticeEntry","addNotice10","ourCheckFileContents","checkRepoResult","startTime","checkedFileCount","checkedFilenames","checkedFilenameExtensions","getFilelistFromZip","countString","totalCheckedSize","thisFilepath","thisFilenameExtension","ourBookID","getFile_","repoFileContent","Date","ourCFLocation","filenameMain","checkFileResult","checkTQbook","cfFilename","cfResultObject","ctqResult","generalLocation","thisPath","pathParts","tqFileContent","checkBookPackageResult","newCheckingOptions","checkedRepoNames","repoCodeList","ULT","UST","repoLocation","tqResultObject","manifestText","mfcError","cmtResult","cYtResultObject","ourYAMLTextChecks","formDataKeys","addNotice9","rawCBPResults","clearCacheAndPreloadRepos","checkBookPackage","bookIDs","bookIDInvalid","rawCBPsResults","checkBookPackagesResult","cbpResultObject","rawCRResults","newTestament","list","i","length","testament","push","oldTestament","titlesToBoolean","ob","bookDataTitles","forEach","k","bookIdByTitle","bookTitleById","stringToNumber","value","num","NaN","somewhatNumericalSort","aNum","bNum","aStr","bStr","notices_to_mt","renderLink","renderWithUnicodeLink","mt","customSort","sortChapterVerse","render","rowData","link","cellStyle","fontFamily","excerpt","width","_location","replace","_link","lineNum","toLowerCase","extension","view","namePrefix","repoUC","toUpperCase","includes","getLink","charPos","sort","rows","newColumns","column","hasData","log","trimColumns","columnsButton","filtering","pageSize","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","content","href","target","rel","match","getUnicodeRegEx","lastPos","exec","substring","matchLen","unicode","util","Paper","icons","BookPackageContentValidator","language_code","Typography","toLocaleString","checkType","checkedOptions","ValidationNotices","useStyles","makeStyles","createStyles","flexGrow","display","menuButton","marginRight","spacing","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","formControl","margin","button","instructions","marginTop","marginBottom","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","contentShift","alignItemsAndJustifyContent","offset","queryProcessedOnce","App","React","state","setState","activeStep","setActiveStep","skipped","setSkipped","org","setOrg","lang","setLang","steps","isStepSkipped","has","handleNext","newSkipped","values","delete","prevActiveStep","search","window","URLSearchParams","useQuery","doInitialization","bks","get","barrayIds","split","barrayTitles","x","alert","classes","useTheme","open","setOpen","handleChange","event","checked","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","aria-label","onClick","edge","variant","Drawer","anchor","paper","direction","Divider","Stepper","map","label","stepProps","labelProps","completed","Step","StepLabel","Container","getStepContent","Button","disabled","Grid","container","item","xs","states","FormControl","required","component","FormLabel","FormGroup","t","FormControlLabel","control","Checkbox","onChange","FormHelperText","RadioGroup","val","Radio","y","joinBookIds","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","oftenMissingList","entry","extraBookList","bookId","chaptersInBook","chapters","err","chapter","verses"],"mappings":"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","file":"static/js/main.c62b1fc8.chunk.js","sourcesContent":["import { isWhitespace, countOccurrences } from './text-handling-functions'\r\n\r\n//const VALIDATOR_VERSION_STRING = '0.1.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nexport function checkTextField(fieldName, fieldText, allowedLinks, optionalFieldLocation, optionalCheckingOptions) {\r\n    // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n    // fieldName (str): Used for identification\r\n    // fieldText (str): The field being checked\r\n    // allowedLinks (bool): doesn't check links -- only checks lack of links\r\n    // optionalFieldLocation (str): Used to inform where this field is located\r\n\r\n    // We assume that checking for compulsory fields is done elsewhere\r\n\r\n    // Returns a single notice list\r\n    //  The list contains objects with the following fields:\r\n    //      priority (compulsory): the priority number 0..999 (usually 800+ are errors, lower are warnings)\r\n    //      message (compulsory): the error description string\r\n    //      characterIndeX: the 0-based index for the position in the string\r\n    //      extract: a short extract of the string containing the error (or empty-string if irrelevant)\r\n    //      location: the detailed location string\r\n    //  (Returned in this way for more intelligent processing at a higher level)\r\n    // console.log(`checkTextField(${fieldName}, ${fieldText.length.toLocaleString()} chars, ${allowedLinks}, '${optionalFieldLocation}')…`);\r\n    console.assert(fieldName !== undefined, \"checkTextField: 'fieldName' parameter should be defined\");\r\n    console.assert(typeof fieldName === 'string', `checkTextField: 'fieldName' parameter should be a number not a '${typeof fieldName}': ${fieldName}`);\r\n    console.assert(fieldText !== undefined, \"checkTextField: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof fieldText === 'string', `checkTextField: 'fieldText' parameter should be a number not a '${typeof fieldText}': ${fieldText}`);\r\n    console.assert(allowedLinks === true || allowedLinks === false, \"checkTextField: allowedLinks parameter must be either true or false\");\r\n\r\n    let result = { noticeList: [] };\r\n\r\n    function addNotice6(noticeObject) {\r\n        // console.log(`dBTC Notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"dBTCs addNotice6: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `dBTCs addNotice6: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"dBTCs addNotice6: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `dBTCs addNotice6: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(characterIndex !== undefined, \"dBTCs addNotice6: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `dBTCs addNotice6: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"dBTCs addNotice6: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `dBTCs addNotice6: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"dBTCs addNotice6: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `dBTCs addNotice6: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        result.noticeList.push({ ...noticeObject, fieldName });\r\n    }\r\n\r\n\r\n    // Main code for checkTextField()\r\n    if (!fieldText) // Nothing to check\r\n        return result;\r\n\r\n    // Create our more detailed location string by prepending the fieldName\r\n    let ourLocation = optionalFieldLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n\r\n    if (isWhitespace(fieldText)) {\r\n        addNotice6({ priority: 638, message: \"Only found whitespace\", location: ourLocation });\r\n        return result;\r\n    }\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (btcError) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    let characterIndex = fieldText.indexOf('<<<<<<<');\r\n    if (characterIndex >= 0) {\r\n        const iy = characterIndex + halfLength; // Want extract to focus more on what follows\r\n        const extract = (iy > halfLength ? '…' : '') + fieldText.substring(iy - halfLength, iy + halfLengthPlus).replace(/ /g, '␣') + (iy + halfLengthPlus < fieldText.length ? '…' : '')\r\n        addNotice6({ priority: 993, message: \"Unresolved GIT conflict\", characterIndex, extract, location: ourLocation });\r\n    } else {\r\n        characterIndex = fieldText.indexOf('=======');\r\n        if (characterIndex >= 0) {\r\n            const iy = characterIndex + halfLength; // Want extract to focus more on what follows\r\n            const extract = (iy > halfLength ? '…' : '') + fieldText.substring(iy - halfLength, iy + halfLengthPlus).replace(/ /g, '␣') + (iy + halfLengthPlus < fieldText.length ? '…' : '')\r\n            addNotice6({ priority: 992, message: \"Unresolved GIT conflict\", characterIndex, extract, location: ourLocation });\r\n        } else {\r\n            characterIndex = fieldText.indexOf('>>>>>>>>');\r\n            if (characterIndex >= 0) {\r\n                const iy = characterIndex + halfLength; // Want extract to focus more on what follows\r\n                const extract = (iy > halfLength ? '…' : '') + fieldText.substring(iy - halfLength, iy + halfLengthPlus).replace(/ /g, '␣') + (iy + halfLengthPlus < fieldText.length ? '…' : '')\r\n                addNotice6({ priority: 991, message: \"Unresolved GIT conflict\", characterIndex, extract, location: ourLocation });\r\n            }\r\n        }\r\n    }\r\n\r\n    if (fieldText[0] === ' ') {\r\n        const extract = fieldText.substring(0, extractLength).replace(/ /g, '␣') + (fieldText.length > extractLength ? '…' : '');\r\n        addNotice6({ priority: 106, message: `Unexpected leading space${fieldText[1] === ' ' ? \"s\" : \"\"}`, characterIndex: 0, extract, location: ourLocation });\r\n    }\r\n    if (fieldText.substring(0, 4) === '<br>' || fieldText.substring(0, 5) === '<br/>' || fieldText.substring(0, 6) === '<br />') {\r\n        const extract = fieldText.substring(0, extractLength) + (fieldText.length > extractLength ? '…' : '');\r\n        addNotice6({ priority: 107, message: \"Unexpected leading break\", characterIndex: 0, extract, location: ourLocation });\r\n    }\r\n    if (fieldText[fieldText.length - 1] === ' ') {\r\n        const extract = (fieldText.length > extractLength ? '…' : '') + fieldText.substring(fieldText.length - 10).replace(/ /g, '␣');\r\n        addNotice6({ priority: 105, message: \"Unexpected trailing space(s)\", characterIndex: fieldText.length - 1, extract, location: ourLocation });\r\n    }\r\n    if (fieldText.substring(fieldText.length - 4) === '<br>' || fieldText.substring(fieldText.length - 5) === '<br/>' || fieldText.substring(fieldText.length - 6) === '<br />') {\r\n        const extract = (fieldText.length > extractLength ? '…' : '') + fieldText.substring(fieldText.length - 10);\r\n        addNotice6({ priority: 104, message: \"Unexpected trailing break\", characterIndex: fieldText.length - 1, extract, location: ourLocation });\r\n    }\r\n    if ((characterIndex = fieldText.indexOf('  ')) >= 0) {\r\n        const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus).replace(/ /g, '␣') + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n        addNotice6({ priority: 194, message: \"Unexpected double spaces\", characterIndex, extract, location: ourLocation });\r\n    }\r\n    if ((characterIndex = fieldText.indexOf('\\n')) >= 0) {\r\n        const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n        addNotice6({ priority: 583, message: \"Unexpected newLine character\", characterIndex, extract, location: ourLocation });\r\n    }\r\n    if ((characterIndex = fieldText.indexOf('\\r')) >= 0) {\r\n        const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n        addNotice6({ priority: 582, message: \"Unexpected carriageReturn character\", characterIndex, extract, location: ourLocation });\r\n    }\r\n    if ((characterIndex = fieldText.indexOf('\\xA0')) >= 0) { // non-break space\r\n        const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus).replace(/\\xA0/g, '⍽') + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n        addNotice6({ priority: 581, message: \"Unexpected non-break space character\", characterIndex, extract, location: ourLocation });\r\n    }\r\n    if ((characterIndex = fieldText.indexOf('\\u202F')) >= 0) { // narrow non-break space\r\n        const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus).replace(/\\u202F/g, '⍽') + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n        addNotice6({ priority: 580, message: \"Unexpected narrow non-break space character\", characterIndex, extract, location: ourLocation });\r\n    }\r\n    if ((characterIndex = fieldText.indexOf(' …')) >= 0) {\r\n        const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n        addNotice6({ priority: 179, message: \"Unexpected space before ellipse character\", characterIndex, extract, location: ourLocation });\r\n    }\r\n    if ((characterIndex = fieldText.indexOf('… ')) >= 0) {\r\n        const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n        addNotice6({ priority: 178, message: \"Unexpected space after ellipse character\", characterIndex, extract, location: ourLocation });\r\n    }\r\n    // Check for doubled punctuation chars (international)\r\n    // Doesn't check for doubled forward slash coz that might occur in a link, e.g., https://etc…\r\n    //  or doubled # coz that occurs in markdown\r\n    let checkList = '’\\'({}<>⟨⟩:,،、‒–—―…!‹›«»‐-?‘’“”\\'\";⁄·&*@•^†‡°¡¿※№÷×ºª%‰+−=‱¶′″‴§~_|‖¦©℗®℠™¤₳฿₵¢₡₢$₫₯֏₠€ƒ₣₲₴₭₺₾ℳ₥₦₧₱₰£៛₽₹₨₪৳₸₮₩¥';\r\n    if (!allowedLinks) checkList += '[].)' // Double square brackets can be part of markdown links, double periods can be part of a path\r\n    for (const punctChar of checkList) {\r\n        characterIndex = fieldText.indexOf(punctChar + punctChar);\r\n        if (characterIndex >= 0) {\r\n            let extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n            addNotice6({ priority: 177, message: `Unexpected doubled ${punctChar} characters`, characterIndex, extract, location: ourLocation });\r\n        }\r\n    }\r\n    // Check for punctuation chars following space\r\n    for (const punctChar of '.\\')}>⟩:,،、‒–—―…!.‹›«»‐-?’”\\'\";/⁄·*@•^†‡°¡¿※#№÷×ºª%‰‱¶′″‴§~_|‖¦©℗®℠™¤₳฿₵¢₡₢$₫₯֏₠€ƒ₣₲₴₭₺₾ℳ₥₦₧₱₰£៛₽₹₨₪৳₸₮₩¥') {\r\n        characterIndex = fieldText.indexOf(' ' + punctChar);\r\n        if (characterIndex >= 0) {\r\n            let extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n            addNotice6({ priority: 191, message: `Unexpected ${punctChar} character after space`, characterIndex, extract, location: ourLocation });\r\n        }\r\n    }\r\n    // Check for punctuation chars before space\r\n    //  Removed ' (can be normal, e.g., Jesus' cloak)\r\n    for (const punctChar of '[({<⟨،、‒–—―‹«‐‘“/⁄·@\\\\•^†‡°¡¿※№×ºª‰‱¶′″‴§~_|‖¦©℗℠™¤₳฿₵¢₡₢$₫₯֏₠€ƒ₣₲₴₭₺₾ℳ₥₦₧₱₰£៛₽₹₨₪৳₸₮₩¥') {\r\n        characterIndex = fieldText.indexOf(punctChar + ' ');\r\n        if (characterIndex >= 0) {\r\n            let extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '')\r\n            addNotice6({ priority: 192, message: `Unexpected space after ${punctChar} character`, characterIndex, extract, location: ourLocation });\r\n        }\r\n    }\r\n\r\n    // Check matched pairs in the field\r\n    for (const punctSet of [['[', ']'], ['(', ')'], ['{', '}'],\r\n    ['<', '>'], ['⟨', '⟩'], ['“', '”'],\r\n    ['‹', '›'], ['«', '»'], ['**_', '_**']]) {\r\n        // Can't check '‘’' coz they might be used as apostrophe\r\n        const leftChar = punctSet[0], rightChar = punctSet[1];\r\n        const leftCount = countOccurrences(fieldText, leftChar);\r\n        const rightCount = countOccurrences(fieldText, rightChar);\r\n        if (leftCount !== rightCount)\r\n            // NOTE: These are higher priority than similar checks in a whole file which is less specific\r\n            addNotice6({ priority: leftChar === '“' ? 163 : 563, message: `Mismatched ${leftChar}${rightChar} characters`, details: `(left=${leftCount.toLocaleString()}, right=${rightCount.toLocaleString()})`, location: ourLocation });\r\n    }\r\n\r\n    if (!allowedLinks) {\r\n        // Simple check that there aren't any\r\n        characterIndex = fieldText.indexOf('://');\r\n        if (characterIndex === -1) characterIndex = fieldText.indexOf('http');\r\n        if (characterIndex === -1) characterIndex = fieldText.indexOf('ftp');\r\n        // The following might have to be removed if text fields can contain email addresses\r\n        if (characterIndex === -1) characterIndex = fieldText.indexOf('.org');\r\n        if (characterIndex === -1) characterIndex = fieldText.indexOf('.com');\r\n        if (characterIndex === -1) characterIndex = fieldText.indexOf('.info');\r\n        if (characterIndex === -1) characterIndex = fieldText.indexOf('.bible');\r\n        if (characterIndex >= 0) {\r\n            let extract = `${characterIndex > halfLength ? '…' : ''}${fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus)}${characterIndex + halfLengthPlus < fieldText.length ? '…' : ''}`\r\n            addNotice6({ priority: 765, message: \"Unexpected link\", characterIndex, extract, location: ourLocation });\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// end of checkTextField function\r\n\r\nexport default checkTextField;\r\n","export * from './books/';\r\nexport * from './utilities';\r\nexport * from './getApi';\r\nexport * from './text-handling-functions';\r\nexport * from './field-text-check';\r\nexport * from './markdown-text-check';\r\nexport * from './plain-text-check';\r\nexport * from './tn-table-row-check';\r\nexport * from './tn-table-text-check';\r\nexport * from './annotation-row-check';\r\nexport * from './annotation-table-check';\r\nexport * from './usfm-text-check';\r\nexport * from './book-package-check';\r\n","export * from './demos';\r\nexport * from './core';\r\n","// utilities\r\n\r\n// import { isUndefined } from 'lodash';\r\n\r\n\r\nexport function consoleLogObject(clTitle, clObject) {\r\n    // Print an object's componenets to the console\r\n    // Note: the following line succeeds even if length and/or size are undefined\r\n    let clOutput = `cLO: ${clTitle} ${typeof clObject} (length=${clObject.length}) (size=${clObject.size}):\\n`;\r\n    for (const clPropertyName in clObject) {\r\n        // console.log(\"   \", clTitle, clPropertyName); // for debugging only!\r\n        let thisPropertyContents = \"\" + clObject[clPropertyName];\r\n        if (thisPropertyContents.length > 50)\r\n            thisPropertyContents = `(${thisPropertyContents.length}) ${thisPropertyContents.substring(0, 50)}…`;\r\n        let oType = typeof clObject[clPropertyName];\r\n        // From https://stackoverflow.com/questions/12996871/why-does-typeof-array-with-objects-return-object-and-not-array#12996879\r\n        if (oType === \"object\" && Object.prototype.toString.call(clObject[clPropertyName]) === \"[object Array]\")\r\n            oType = \"array\";\r\n        clOutput += `  ${clPropertyName} (type=${oType})`;\r\n        let oLength;\r\n        try { oLength = clObject[clPropertyName].length; }\r\n        catch (olError) { oLength = \"null\" }\r\n        if (oLength !== undefined) clOutput += ` (length=${oLength})`;\r\n        if (thisPropertyContents !== undefined) clOutput += `: ${thisPropertyContents}\r\n`;\r\n    }\r\n    console.log(clOutput);\r\n}\r\n// end of consoleLogObject function\r\n\r\n\r\nexport function displayPropertyNames(givenTitle, givenObject) {\r\n    let output = `dPN: ${givenTitle} ${typeof givenObject}:\r\n`;\r\n    for (const propertyName in givenObject)\r\n        output += `  ${propertyName} (type=${typeof givenObject[propertyName]})\r\n`;\r\n    console.log(output);\r\n}\r\n// end of displayPropertyNames function\r\n\r\n\r\nexport function ourParseInt(givenString) {\r\n    /*\r\n    The regular parseInt() function is too forgiving\r\n\r\n    See https://stackoverflow.com/questions/1133770/how-to-convert-a-string-to-an-integer-in-javascript\r\n\r\n    This one throws an error if the entire field doesn't give an integer.\r\n    */\r\n\r\n    /* First attempt\r\n    const int1 = parseInt(givenString, 10); // Don't let the function guess the base (if the string has a leading zero)\r\n    const int2 = givenString * 1; // This one is less forgiving it seems\r\n    if (int1!==int2) console.log(`From '${givenString}' we got ${int1} (${typeof int1}) and ${int2} (${typeof int2})`)\r\n    if (isNaN(int2) || isNaN(int1)\r\n    || int2===undefined || int1==undefined\r\n    || int2!==int1)\r\n        throw \"String is not a simple integer\";\r\n    return int1;\r\n    */\r\n\r\n    // Optimised version\r\n    const int = givenString * 1; // This one is less forgiving it seems\r\n  // eslint-disable-next-line no-throw-literal\r\n    if (isNaN(int)) throw \"String is not a simple integer\";\r\n    return int;\r\n}\r\n\r\n\r\n/*\r\n// function to convert an array to an object\r\n// with keys being 0..n\r\nexport const array_to_obj = ( ar => {\r\n  const ob = {};\r\n  Object.assign(ob,ar);\r\n  return ob;\r\n});\r\n\r\n// function to convert map to object\r\nexport const map_to_obj = ( mp => {\r\n  const ob = {};\r\n  mp.forEach((v,k) => {ob[k]=v});\r\n  return ob;\r\n});\r\n\r\n// function to convert object to a map\r\nexport const obj_to_map = ( ob => {\r\n  const mp = new Map();\r\n  Object.keys ( ob ).forEach (k => { mp.set(k, ob[k]) });\r\n  return mp;\r\n});\r\n\r\n// function to convert word frequency map\r\n// to an object suitable for MaterialTable\r\nexport const wf_to_mt = ( ob => {\r\n  const mt = {};\r\n  mt.title = \"Word Frequency\";\r\n  mt.columns = [\r\n      { title: \"Word\", field: \"word\" },\r\n      { title: \"Count\", field: \"check\" },\r\n  ];\r\n  mt.data = [];\r\n  Object.keys(ob).forEach ( w => {\r\n      mt.data.push({ word: w, check: ob[w] })\r\n  })\r\n\r\n  mt.options = { sorting: true, exportButton: true };\r\n\r\n  return mt;\r\n});\r\n\r\n// function to convert an array of words to\r\n// an object suitable for MaterialTable\r\nexport const aw_to_mt = ( ar => {\r\n  // first convert array to object\r\n  const ob = array_to_obj(ar);\r\n  const mt = {};\r\n  mt.title = \"All Words in Text Order\";\r\n  mt.columns = [\r\n      { title: \"Order\", field: \"order\" , type: \"numeric\"},\r\n      { title: \"Word\", field: \"word\" },\r\n  ];\r\n  mt.data = [];\r\n  Object.keys(ob).forEach ( n => {\r\n      mt.data.push({ order: n, word: ob[n] })\r\n  });\r\n\r\n  mt.options = { sorting: true };\r\n\r\n  return mt;\r\n});\r\n*/\r\n","import Path from 'path';\r\n// import YAML from 'js-yaml-parser';\r\nimport localforage from 'localforage';\r\nimport { setup } from 'axios-cache-adapter';\r\nimport JSZip from 'jszip';\r\nimport * as books from './books';\r\n// import { consoleLogObject } from '../core/utilities';\r\n\r\n\r\nconst baseURL = 'https://git.door43.org/';\r\nconst apiPath = 'api/v1';\r\n\r\n\r\nconst failedStore = localforage.createInstance({\r\n  driver: [localforage.INDEXEDDB],\r\n  name: 'failed-store',\r\n});\r\n\r\nconst zipStore = localforage.createInstance({\r\n  driver: [localforage.INDEXEDDB],\r\n  name: 'zip-store',\r\n});\r\n\r\nconst cacheStore = localforage.createInstance({\r\n  driver: [localforage.INDEXEDDB],\r\n  name: 'web-cache',\r\n});\r\n\r\nconst Door43Api = setup({\r\n  baseURL: baseURL,\r\n  cache: {\r\n    store: cacheStore,\r\n    maxAge: 5 * 60 * 1000, // 5-minutes\r\n    exclude: { query: false },\r\n    key: req => {\r\n      // if (req.params) debugger\r\n      let serialized = req.params instanceof URLSearchParams ?\r\n        req.params.toString() : JSON.stringify(req.params) || '';\r\n      return req.url + serialized;\r\n    },\r\n  },\r\n});\r\n\r\n\r\nlet cachedUnzippedFiles = {};\r\n\r\n/**\r\n * adds caching of uncompressed files, calls getFile() if file is not cached\r\n * @param {String} username\r\n * @param {String} repository\r\n * @param {String} path\r\n * @param {String} branch\r\n * @return {Promise<*>}\r\n */\r\n// This is the function that we call the most from the outside\r\nexport async function getFileCached({ username, repository, path, branch }) {\r\n  // console.log(`getFileCached(${username}, ${repository}, ${path}, ${branch})…`);\r\n  const filePath = Path.join(repository, path, branch);\r\n  if (cachedUnzippedFiles[filePath]) {\r\n    // console.log(`in cache - ${filePath}`);\r\n    return cachedUnzippedFiles[filePath];\r\n  }\r\n\r\n  let file = await getFile({ username, repository, path, branch });\r\n\r\n  if (file) {\r\n    cachedUnzippedFiles[filePath] = file;\r\n    // console.log(`saving to cache - ${filePath}`);\r\n  }\r\n\r\n  return file;\r\n}\r\n\r\n\r\nexport async function clearCaches() {\r\n  console.log(\"Clearing localforage.INDEXEDDB zipStore and cacheStore caches…\");\r\n  // const tasks = [zipStore, cacheStore].map(localforage.clear);\r\n  // const results = await Promise.all(tasks);\r\n  // results.forEach(x => console.log(\"Done it\", x));\r\n  await failedStore.clear();\r\n  await zipStore.clear();\r\n  await cacheStore.clear();\r\n  cachedUnzippedFiles = {};\r\n}\r\n\r\n\r\nexport function getRepoName(languageCode, repoCode) {\r\n  /**\r\n  * @description - Creates and returns a Door43 repoName string\r\n  * @param {String} languageCode - the language code, e.g., 'en'\r\n  * @param {String} repoCode - the repo code, e.g., 'TQ'\r\n  * @return {String} - the Door43 repoName string\r\n  */\r\n//    console.log(`getRepoName('${languageCode}', '${repoCode}')…`);\r\n let repo_languageCode = languageCode;\r\n  if (repoCode === 'UHB') repo_languageCode = 'hbo';\r\n  else if (repoCode === 'UGNT') repo_languageCode = 'el-x-koine';\r\n  const repoName = `${repo_languageCode}_${repoCode.toLowerCase()}`;\r\n  return repoName;\r\n}\r\n\r\n\r\n/**\r\n * clears the caches of stale data and preloads repo zips, before running book package checks\r\n *   this allows the calling app to clear cache and start loading repos in the backgound as soon as it starts up.  In this case it would not need to use await to wait for results.\r\n *   TRICKY: note that even if the user is super fast in selecting books and clicking next, it will not hurt anything.  getFile() would just be fetching files directly from repo until the zips are loaded.  After that the files would be pulled out of zipStore.\r\n * @param {string} username\r\n * @param {string} languageCode\r\n * @param {Array} bookIDList - one or more books that will be checked\r\n * @param {string} branch - optional, defaults to master\r\n * @param {Array} repos - optional, list of repos to pre-load\r\n * @return {Promise<Boolean>} resolves to true if file loads are successful\r\n */\r\n// TEMP: Removed TQ from default repos\r\nexport async function clearCacheAndPreloadRepos(username, languageCode, bookIDList, branch = 'master', repos = ['TA', 'TW']) {\r\n  console.log(`clearCacheAndPreloadRepos(${username}, ${languageCode}, ${bookIDList}, ${branch}, ${repos})…`);\r\n  clearCaches(); // clear existing cached files so we know we have the latest\r\n  let success = true;\r\n  const repos_ = [...repos];\r\n\r\n  if (bookIDList && Array.isArray(bookIDList)) {\r\n    // make sure we have the original languages needed\r\n    for (const bookID of bookIDList) {\r\n      if (bookID !== 'OBS') {\r\n        const whichTestament = books.testament(bookID); // returns 'old' or 'new'\r\n        const origLang = whichTestament === 'old' ? 'UHB' : 'UGNT';\r\n        if (!repos_.includes(origLang))\r\n          repos_.unshift(origLang);\r\n      }\r\n    }\r\n  }\r\n\r\n  // load all the repos need\r\n  for (const repoCode of repos_) {\r\n    const repoName = getRepoName(languageCode, repoCode);\r\n    console.log(`clearCacheAndPreloadRepos: preloading zip file for ${repoName}…`);\r\n    const zipFetchSucceeded = await fetchRepositoryZipFile({ username, repository: repoName, branch });\r\n    if (!zipFetchSucceeded) {\r\n      console.log(`clearCacheAndPreloadRepos: misfetched zip file for ${repoCode} repo with ${zipFetchSucceeded}`);\r\n      success = false;\r\n    }\r\n  }\r\n\r\n  return success;\r\n}\r\n\r\n\r\nasync function fetchFileFromServer({ username, repository, path, branch = 'master' }) {\r\n  // console.log(`fetchFileFromServer(${username}, ${repository}, ${path}, ${branch})…`);\r\n  const repoExists = await repositoryExists({ username, repository });\r\n  let uri;\r\n  if (repoExists) {\r\n    uri = Path.join(username, repository, 'raw/branch', branch, path);\r\n    const failMessage = await failedStore.getItem(uri);\r\n    if (failMessage) {\r\n      // console.log(`fetchFileFromServer failed previously for ${uri}: ${failMessage}`);\r\n      return null;\r\n    }\r\n    try {\r\n      // console.log(\"URI=\",uri);\r\n      const data = await cachedGet({ uri });\r\n      // console.log(\"Got data\", data);\r\n      return data;\r\n    }\r\n    catch (fffsError) {\r\n      console.log(`ERROR: fetchFileFromServer could not fetch ${path}: ${fffsError}`)\r\n      /* await */ failedStore.setItem(uri, fffsError.message);\r\n      return null;\r\n    }\r\n  } else {\r\n    console.log(`ERROR: fetchFileFromServer repo '${repository}' does not exist!`);\r\n    /* await */ failedStore.setItem(uri, `Repo '${repository}' does not exist!`);\r\n    return null;\r\n  }\r\n};\r\n\r\n\r\nasync function getFile({ username, repository, path, branch }) {\r\n  console.log(`getFile(${username}, ${repository}, ${path}, ${branch})…`);\r\n  let file;\r\n  file = await getFileFromZip({ username, repository, path, branch });\r\n  if (!file) {\r\n    file = await fetchFileFromServer({ username, repository, path, branch });\r\n  }\r\n  return file;\r\n}\r\n\r\n\r\nasync function getUID({ username }) {\r\n  // console.log(`getUID(${username})…`);\r\n  const uri = Path.join(apiPath, 'users', username);\r\n  // console.log(`getUID uri=${uri}`);\r\n  const user = await cachedGet({ uri });\r\n  // console.log(`getUID user=${user}`);\r\n  const { id: uid } = user;\r\n  // console.log(`  getUID returning: ${uid}`);\r\n  return uid;\r\n}\r\nasync function repositoryExists({ username, repository }) {\r\n  // console.log(`repositoryExists(${username}, ${repository})…`);\r\n  const uid = await getUID({ username });\r\n  // console.log(`repositoryExists uid=${uid}`);\r\n  // Default limit is 10 -- way too small\r\n  const params = { q: repository, limit: 500, uid }; // Documentation says limit is 50, but larger numbers seem to work ok\r\n  // console.log(`repositoryExists params=${JSON.stringify(params)}`);\r\n  const uri = Path.join(apiPath, 'repos', `search`);\r\n  // console.log(`repositoryExists uri=${uri}`);\r\n  const { data: repos } = await cachedGet({ uri, params });\r\n  // console.log(`repositoryExists repos (${repos.length})=${repos}`);\r\n  // for (const thisRepo of repos) console.log(`  thisRepo (${JSON.stringify(Object.keys(thisRepo))}) =${JSON.stringify(thisRepo.name)}`);\r\n  const repo = repos.filter(repo => repo.name === repository)[0];\r\n  // console.log(`repositoryExists repo=${repo}`);\r\n  // console.log(`  repositoryExists returning: ${!!repo}`);\r\n  return !!repo;\r\n};\r\n\r\n\r\nasync function cachedGet({ uri, params }) {\r\n  // console.log(`cachedGet(${uri}, ${JSON.stringify(params)})…`);\r\n  // console.log(`  get querying: ${baseURL+uri}`);\r\n  const { data } = await Door43Api.get(baseURL + uri, { params });\r\n  // console.log(`  cachedGet returning: ${JSON.stringify(data)}`);\r\n  return data;\r\n};\r\n\r\nexport async function cachedGetURL({ uri, params }) {\r\n  // console.log(`cachedGetURL(${uri}, ${params})…`);\r\n  const { data } = await Door43Api.get(uri, { params });\r\n  // console.log(`  cachedGetURL returning: ${data}`);\r\n  return data;\r\n};\r\n\r\n\r\n/*\r\nfunction fetchRepositoriesZipFiles({username, languageId, branch}) {\r\n  const repositories = resourceRepositories({languageId});\r\n  const promises = Object.values(repositories).map(repository => {\r\n    return fetchRepositoryZipFile({username, repository, branch});\r\n  });\r\n  const zipArray = await Promise.all(promises);\r\n  return zipArray;\r\n};\r\n*/\r\n\r\n\r\n// https://git.door43.org/{username}/{repository}/archive/{branch}.zip\r\nexport async function fetchRepositoryZipFile({ username, repository, branch }) {\r\n  console.log(`fetchRepositoryZipFile(${username}, ${repository}, ${branch})…`);\r\n  const repoExists = await repositoryExists({ username, repository });\r\n  if (!repoExists) {\r\n    return null;\r\n  }\r\n  const uri = zipUri({ username, repository, branch });\r\n  const response = await fetch(uri);\r\n  if (response.status === 200 || response.status === 0) {\r\n    const zipArrayBuffer = await response.arrayBuffer(); // blob storage not supported on mobile\r\n    await zipStore.setItem(uri, zipArrayBuffer);\r\n    return true;\r\n  } else {\r\n    console.log(`ERROR: fetchRepositoryZipFile got response status: ${response.status}`);\r\n    return false;\r\n  }\r\n};\r\n\r\n\r\nexport async function getFilelistFromZip({ username, repository, branch, optionalPrefix }) {\r\n  // console.log(`getFilelistFromZip(${username}, ${repository}, ${branch}, ${optionalPrefix})…`);\r\n\r\n  const uri = zipUri({ username, repository, branch });\r\n  let zipBlob = await zipStore.getItem(uri);\r\n\r\n  if (!zipBlob) { // Seems that we need to load the zip file first\r\n    const response = await fetch(uri);\r\n    if (response.status === 200 || response.status === 0) {\r\n      const zipArrayBuffer = await response.arrayBuffer(); // blob storage not supported on mobile\r\n      zipBlob = await zipStore.setItem(uri, zipArrayBuffer);\r\n    } else {\r\n      console.log(`ERROR: getFilelistFromZip got response status: ${response.status}`);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  const pathList = [];\r\n  try {\r\n    if (zipBlob) {\r\n      // console.log(`  Got zipBlob for uri=${uri}`);\r\n      const zip = await JSZip.loadAsync(zipBlob);\r\n      // console.log(`  Got zip`);\r\n      // Now we need to fetch the list of files from the repo\r\n      // zip.forEach(function (relativePath, fileObject) {\r\n      zip.forEach(function (relativePath) {\r\n        // console.log(`relPath=${relativePath}`)\r\n        // consoleLogObject('fileObject', fileObject);\r\n        if (!relativePath.endsWith('/')) // it's not a folder\r\n        {\r\n          if (relativePath.startsWith(`${repository}/`)) // remove repo name prefix\r\n            relativePath = relativePath.substring(repository.length + 1);\r\n          if (relativePath.length\r\n            && !relativePath.startsWith('.git') // skips files in these folders\r\n            && !relativePath.startsWith('.apps') // skips files in this folder\r\n            && (!optionalPrefix || relativePath.startsWith(optionalPrefix))) // it's the correct prefix\r\n            pathList.push(relativePath);\r\n        }\r\n      })\r\n    }\r\n    // else console.log(\"  getFilelistFromZip: No zipBlob\");\r\n  } catch (error) {\r\n    console.log(`ERROR: getFilelistFromZip got: ${error.message}`);\r\n  }\r\n\r\n  // console.log(`getFilelistFromZip is returning (${pathList.length}) entries: ${pathList}`);\r\n  return pathList;\r\n}\r\n\r\n\r\nasync function getFileFromZip({ username, repository, path, branch }) {\r\n  // console.log(`getFileFromZip(${username}, ${repository}, ${path}, ${branch})…`);\r\n  let file;\r\n  const uri = zipUri({ username, repository, branch });\r\n  const zipBlob = await zipStore.getItem(uri);\r\n  try {\r\n    if (zipBlob) {\r\n      // console.log(`  Got zipBlob for uri=${uri}`);\r\n      const zip = await JSZip.loadAsync(zipBlob);\r\n      const zipPath = Path.join(repository.toLowerCase(), path);\r\n      // console.log(`  zipPath=${zipPath}`);\r\n      file = await zip.file(zipPath).async('string');\r\n      // console.log(`    Got zipBlob ${file.length} bytes`);\r\n    }\r\n    // else console.log(\"  No zipBlob\");\r\n  } catch (error) {\r\n    console.log(`ERROR: getFileFromZip for ${username} ${repository} ${path} ${branch} got: ${error.message}`);\r\n    file = null;\r\n  }\r\n  return file;\r\n};\r\n\r\n\r\nexport function zipUri({ username, repository, branch = 'master' }) {\r\n  // console.log(`zipUri(${username}, ${repository}, ${branch})…`);\r\n  const zipPath = Path.join(username, repository, 'archive', `${branch}.zip`);\r\n  const zipUri = baseURL + zipPath;\r\n  return zipUri;\r\n};\r\n\r\n\r\nexport async function fetchTree({ username, repository, sha = 'master' }) {\r\n  // console.log(`fetchTree(${username}, ${repository}, ${sha})…`);\r\n  let data;\r\n  try {\r\n    const uri = Path.join('api/v1/repos', username, repository, 'git/trees', sha);\r\n    // console.log(`  uri='${uri}'`);\r\n    data = await cachedGet({ uri });\r\n    // console.log(`  data (${typeof data})`);\r\n    return data;\r\n    // const tree = JSON.parse(data); // RJH: Why was this here???\r\n    // console.log(`  tree (${typeof tree})`);\r\n    // return tree;\r\n  } catch (error) {\r\n    console.log(`ERROR: fetchTree got: ${error.message}`);\r\n    console.log(`  Data was: ${JSON.stringify(data)}`);\r\n    return null;\r\n  }\r\n};\r\n\r\n\r\n/*\r\nasync function recursiveTree({username, repository, path, sha}) {\r\n  console.log(\"recurse tree args:\",username,repository,path,sha)\r\n  let tree = {};\r\n  const pathArray = path.split();\r\n  const results = fetchTree({username, repository, sha});\r\n  const result = results.tree.filter(item => item.path === pathArray[0])[0];\r\n  if (result) {\r\n    if (result.type === 'tree') {\r\n      const childPath = pathArray.slice(1).join('/');\r\n      const children = recursiveTree({username, repository, path: childPath, sha: result.sha});\r\n      tree[result.path] = children;\r\n    } else if (result.type === 'blob') {\r\n      tree[result.path] = true;\r\n    }\r\n  }\r\n};\r\n\r\nasync function fileExists({username, repository, path, branch}) {\r\n  // get root listing\r\n  recursiveTree()\r\n  // get recursive path listing\r\n}\r\n*/\r\n","// import { displayPropertyNames, consoleLogObject } from './utilities';\r\n\r\n\r\n// const NOTICE_PROCESSOR_VERSION_STRING = '0.7.2';\r\n\r\n// All of the following can be overriden with optionalProcessingOptions\r\nconst DEFAULT_MAXIMUM_SIMILAR_MESSAGES = 3; // Zero means no suppression of similar messages\r\nconst DEFAULT_CUTOFF_PRIORITY_LEVEL = 0; // This level or lower gets excluded from the lists\r\nconst DEFAULT_IGNORE_PRIORITY_NUMBER_LIST = [];\r\n\r\n// For processNoticesToErrorsWarnings\r\nconst DEFAULT_ERROR_PRIORITY_LEVEL = 700; // This level or higher becomes an error (cf. warnings)\r\n\r\n// For processNoticesToSevereMediumLow\r\nconst DEFAULT_SEVERE_PRIORITY_LEVEL = 800; // This level or higher becomes a severe error\r\nconst DEFAULT_MEDIUM_PRIORITY_LEVEL = 600; // This level or higher becomes a medium error\r\n\r\n// For processNoticesToSingleList\r\n// (no constants required)\r\n\r\n\r\nfunction processNoticesCommon(givenNoticeObject, optionalProcessingOptions) {\r\n    /**\r\n    * @description - Preprocesses the successList and noticeList\r\n    * @param {Object} givenNoticeObject - must contain a noticeList array\r\n    * @param {Object} optionalProcessingOptions - may contain parameters\r\n    * @return {Array} - noticeList, countObject, preResultObject\r\n    */\r\n    /*\r\n        Expects to get an object with:\r\n            successList: a list of strings describing what has been checked\r\n            noticeList: a list of components to notices, being:\r\n                priority: A notice priority number in the range 1-1000.\r\n                    Each different type of warning/error has a unique number\r\n                      (but not each instance of those warnings/errors).\r\n                    By default, notice priority numbers 700 and over are\r\n                      considered `errors` and 0-699 are considered `warnings`.\r\n                message: The actual general description text of the notice\r\n                details: Extra notice information (if relevant)\r\n                The next three fields may be ommitted if irrelevant\r\n                 (since BCV is not relevant to all types of files/repos)\r\n                    bookID: book identifier 3-character UPPERCASE string\r\n                    C: Chapter number string\r\n                    V: Verse number string (can also be a bridge, e.g., '22-23')\r\n                repoName: repository name (if relevant)\r\n                filename: string (if relevant)\r\n                rowID: 4-character string (if relevant)\r\n                lineNumber: A one-based integer indicating the line number in the file\r\n                fieldName: string (if relevant)\r\n                characterIndex: A zero-based integer index which indicates the position\r\n                    of the error on the line or in the text field as appropriate.\r\n                extract: An extract of the checked text which indicates the area\r\n                      containing the problem.\r\n                    Where helpful, some character substitutions have already been made,\r\n                      for example, if the notice is about spaces,\r\n                      it is generally helpful to display spaces as a visible\r\n                      character in an attempt to best highlight the issue to the user.\r\n                 location: A string indicating the context of the notice,\r\n                        e.g., `in 'someBook.usfm'.\r\n                There is also an optional notice component (where multiple files/repos are checked)\r\n                extra: A string indicating an extra location component, e.g., repoCode or bookID\r\n                    This will probably need to be added to the message string but is left\r\n                        until now in order to allow the most display flexibility\r\n        Available options are:\r\n            cutoffPriorityLevel (integer; default is DEFAULT_CUTOFF_PRIORITY_LEVEL above)\r\n            maximumSimilarMessages (integer; default is DEFAULT_MAXIMUM_SIMILAR_MESSAGES above)\r\n            sortBy ('AsFound' or 'ByPriority', default is 'AsFound')\r\n            ignorePriorityNumberList (list of integers, default is empty list, list of notice priority numbers to be ignored)\r\n        Also, any other parameters are just passed through,\r\n            although filenameList might be abbreviated, e.g. for 100s of .md files.\r\n\r\n        Returns an array of three fields:\r\n            remainingNoticeList\r\n                A list of notice entries, each one containing exactly eight or nine fields (see above)\r\n                    i.e., notice entries originally containing five or six fields have had blank BCV fields inserted.\r\n            allTotals\r\n                A table of priority numbers with a count of notices for that priority.\r\n                    (May be used in further processing for possible removal of lots of similar messages)\r\n            resultObject\r\n                A prototype object which will be added to and then returned as the final result of the NEXT notice processing step.\r\n                Contains the following:\r\n                    successList -- a list of strings noting what has been checked\r\n                    numIgnored Notices (int)\r\n                    numSuppressedWarnings (int)\r\n                    processingOptions (a copy of the optionalProcessingOptions passed to these functions)\r\n                    Any other fields that were part of the givenNoticeObject passed to these functions. These might include:\r\n                        checkedFilenames -- list of strings\r\n                        checkedRepos -- list of strings\r\n                    depending on the type of check that was made.\r\n    */\r\n    //     console.log(`processNoticesCommon v${NOTICE_PROCESSOR_VERSION_STRING} with options=${JSON.stringify(optionalProcessingOptions)}\r\n    //   Given ${givenNoticeObject.successList.length.toLocaleString()} success string(s) plus ${givenNoticeObject.noticeList.length.toLocaleString()} notice(s)`);\r\n\r\n\r\n    const standardisedNoticeList = givenNoticeObject.noticeList;\r\n\r\n\r\n    // Run a check through the noticeList to help discover any programming errors that need fixing\r\n    // This section may be commented out of production code\r\n    if (givenNoticeObject.noticeList && givenNoticeObject.noticeList.length) {\r\n        const numberStore = {}, duplicatePriorityList = [];\r\n        for (const thisGivenNotice of standardisedNoticeList) {\r\n            const thisPriority = thisGivenNotice.priority, thisMsg = thisGivenNotice.message;\r\n            console.assert(typeof thisPriority === 'number' && thisPriority > 0 && thisPriority < 10000, `BAD PRIORITY for ${JSON.stringify(thisGivenNotice)}`);\r\n            console.assert(typeof thisMsg === 'string' && thisMsg.length > 10, `BAD MESSAGE for ${JSON.stringify(thisGivenNotice)}`);\r\n\r\n            // Check that notice priority numbers are unique (to detect programming errors)\r\n            const oldMsg = numberStore[thisPriority];\r\n            if (oldMsg && oldMsg !== thisMsg && duplicatePriorityList.indexOf(thisPriority) < 0\r\n                // Some of the messages include the troubling character in the message\r\n                //    so we expect them to differ slightly\r\n                && !thisMsg.startsWith('Mismatched ')\r\n                && !thisMsg.startsWith('Unexpected doubled ')\r\n                && !thisMsg.startsWith('Unexpected space after ')\r\n                && !thisMsg.startsWith('Unexpected content after \\\\')\r\n                && !thisMsg.startsWith('USFMGrammar: ')\r\n                && !thisMsg.endsWith(' character after space')\r\n                && !thisMsg.endsWith(' marker at start of line')\r\n            ) {\r\n                console.log(`PROGRAMMING ERROR: priority ${thisPriority} has at least two different messages: '${oldMsg}' and '${thisMsg}'`);\r\n                duplicatePriorityList.push(thisPriority); // so that we only give the error once\r\n            }\r\n\r\n            // Check fields for bad values, and also across fields for unexpected combinations\r\n            const thisRepoName = thisGivenNotice.repoName, thisFilename = thisGivenNotice.filename, thisLineNumber = thisGivenNotice.lineNumber,\r\n                thisRowID = thisGivenNotice.rowID, thisFieldName = thisGivenNotice.fieldName, thisLocation = thisGivenNotice.location\r\n            if (thisRepoName) {\r\n                console.assert(thisRepoName.indexOf(' ') < 0 && thisRepoName.indexOf('/') < 0 && thisRepoName.indexOf('\\\\') < 0, `repoName '${thisRepoName}' contains unexpected characters in ${JSON.stringify(thisGivenNotice)}`);\r\n                if (thisLocation)\r\n                    console.assert(thisLocation.indexOf(thisRepoName) < 0, `repoName is repeated in location in ${JSON.stringify(thisGivenNotice)}`);\r\n            }\r\n            if (thisFilename) {\r\n                console.assert(thisFilename.indexOf(':') < 0 && thisFilename.indexOf('\\\\') < 0, `filename '${thisFilename}' contains unexpected characters in ${JSON.stringify(thisGivenNotice)}`);\r\n                // NOTE: Some OBS messages have to include part of the part in the 'filename' (to prevent ambiguity) so we don't disallow forward slash\r\n                if (!thisRepoName || !thisRepoName.endsWith('_obs'))\r\n                    console.assert(thisFilename.indexOf('/') < 0, `filename '${thisFilename}' contains unexpected characters in ${JSON.stringify(thisGivenNotice)}`);\r\n                if (thisLocation)\r\n                    console.assert(thisLocation.indexOf(thisFilename) < 0, `filename is repeated in location in ${JSON.stringify(thisGivenNotice)}`);\r\n            }\r\n            if (thisRowID) {\r\n                console.assert(thisRowID.indexOf(' ') < 0 && thisRowID.indexOf('/') < 0 && thisRowID.indexOf('\\\\') < 0, `rowID '${thisRowID}' contains unexpected characters in ${JSON.stringify(thisGivenNotice)}`);\r\n                if (thisLocation)\r\n                    console.assert(thisLocation.indexOf(thisRowID) < 0, `rowID is repeated in location in ${JSON.stringify(thisGivenNotice)}`);\r\n            }\r\n            if (thisFieldName) {\r\n                console.assert(thisFieldName.indexOf(' ') < 0 && thisFieldName.indexOf('/') < 0 && thisFieldName.indexOf('\\\\') < 0, `fieldName '${thisFieldName}' contains unexpected characters in ${JSON.stringify(thisGivenNotice)}`);\r\n                if (thisLocation)\r\n                    console.assert(thisLocation.indexOf(thisFieldName) < 0, `fieldName is repeated in location in ${JSON.stringify(thisGivenNotice)}`);\r\n            }\r\n            if (thisLineNumber) {\r\n                console.assert(typeof thisLineNumber === 'number' && thisLineNumber > 0, `lineNumber '${thisLineNumber}' contains unexpected value in ${JSON.stringify(thisGivenNotice)}`);\r\n                // Note: lineNumber can occur in location, e.g., in 3 in '3JN' or 'Door43' so have to take extra care not to give false alarms\r\n                if (thisLocation && thisLineNumber > 4 && thisLineNumber!==43)\r\n                    // && (!thisGivenNotice.bookID || thisGivenNotice.bookID.indexOf(thisLineNumber + '') < 0)\r\n                    console.assert(thisLocation.indexOf(thisLineNumber + '') < 0 && thisLocation.indexOf(thisLineNumber.toLocaleString()) < 0, `lineNumber might be repeated in location in ${JSON.stringify(thisGivenNotice)}`);\r\n            }\r\n            numberStore[thisPriority] = thisMsg;\r\n        }\r\n    }\r\n\r\n\r\n    const resultObject = { // inititalise with our new fields\r\n        numIgnoredNotices: 0,\r\n        numSuppressedWarnings: 0,\r\n        processingOptions: optionalProcessingOptions, // Just helpfully includes what we were given (may be undefined)\r\n    };\r\n    // Copy across all the other properties that we aren't interested in\r\n    for (const gnoPropertyName in givenNoticeObject)\r\n        if (gnoPropertyName !== 'successList' && gnoPropertyName !== 'noticeList')\r\n            resultObject[gnoPropertyName] = givenNoticeObject[gnoPropertyName];\r\n\r\n    // Fetch our processing parameters\r\n    let ignorePriorityNumberList;\r\n    try {\r\n        ignorePriorityNumberList = optionalProcessingOptions.ignorePriorityNumberList;\r\n    } catch (npfIPNLerror) { }\r\n    if (ignorePriorityNumberList === undefined) {\r\n        ignorePriorityNumberList = DEFAULT_IGNORE_PRIORITY_NUMBER_LIST;\r\n        // console.log(`Using default ignorePriorityNumberList=${ignorePriorityNumberList}`);\r\n    }\r\n    else console.log(`Using supplied ignorePriorityNumberList=${ignorePriorityNumberList} cf. default=${DEFAULT_IGNORE_PRIORITY_NUMBER_LIST}`);\r\n    let sortBy;\r\n    try {\r\n        sortBy = optionalProcessingOptions.sortBy;\r\n    } catch (npfSBerror) { }\r\n    if (sortBy === undefined) {\r\n        sortBy = 'AsFound';\r\n        // console.log(`Using default sortBy='${sortBy}'`);\r\n    }\r\n    // else console.log(`Using supplied sortBy='${sortBy}' cf. default='AsFound'`);\r\n    let cutoffPriorityLevel;\r\n    try {\r\n        cutoffPriorityLevel = optionalProcessingOptions.cutoffPriorityLevel;\r\n    } catch (npfCPLerror) { }\r\n    if (cutoffPriorityLevel === undefined) {\r\n        cutoffPriorityLevel = DEFAULT_CUTOFF_PRIORITY_LEVEL;\r\n        // console.log(`Using default cutoffPriorityLevel=${cutoffPriorityLevel}`);\r\n    }\r\n    else console.log(`Using supplied cutoffPriorityLevel=${cutoffPriorityLevel} cf. default=${DEFAULT_CUTOFF_PRIORITY_LEVEL}`);\r\n    // if (cutoffPriorityLevel > errorPriorityLevel)\r\n    // resultObject.errorList.push({999, \"Cutoff level must not be higher than error level\", extract:`(${cutoffPriorityLevel} vs ${errorPriorityLevel})`, \" in processNoticesCommon options\"]);\r\n\r\n\r\n    if (givenNoticeObject.successList)\r\n        // Handle the successList\r\n        if (givenNoticeObject.successList.length < 5)\r\n            resultObject.successList = givenNoticeObject.successList;\r\n        else { // successList is fairly long -- maybe we can shorten it by combining multiple similar messages\r\n            const BibleRegex = /\\d\\d-(\\w\\w\\w).usfm/; // \"Checked JUD file: 66-JUD.usfm\"\r\n            const NotesRegex = /\\d\\d-(\\w\\w\\w).tsv/; // \"Checked EN_TN_01-GEN.TSV file: en_tn_01-GEN.tsv\"\r\n            resultObject.successList = [];\r\n            const UHBBookList = [], UGNTBookList = [], ULTBookList = [], USTBookList = [], TNBookList = [];\r\n            const USFMBookList = [], TSVNotesList = []\r\n            for (const thisParticularSuccessMsg of givenNoticeObject.successList) {\r\n                // console.log(\"thisParticularSuccessMessage\", thisParticularSuccessMessage);\r\n                let regexResult;\r\n                if (thisParticularSuccessMsg.startsWith('Checked UHB file: '))\r\n                    UHBBookList.push(thisParticularSuccessMsg.substring(18, thisParticularSuccessMsg.length))\r\n                else if (thisParticularSuccessMsg.startsWith('Checked UGNT file: '))\r\n                    UHBBookList.push(thisParticularSuccessMsg.substring(19, thisParticularSuccessMsg.length))\r\n                else if (thisParticularSuccessMsg.startsWith('Checked ULT file: '))\r\n                    ULTBookList.push(thisParticularSuccessMsg.substring(18, thisParticularSuccessMsg.length))\r\n                else if (thisParticularSuccessMsg.startsWith('Checked UST file: '))\r\n                    USTBookList.push(thisParticularSuccessMsg.substring(18, thisParticularSuccessMsg.length))\r\n                else if (thisParticularSuccessMsg.startsWith('Checked TN file: '))\r\n                    TNBookList.push(thisParticularSuccessMsg.substring(17, thisParticularSuccessMsg.length))\r\n                else if ((regexResult = BibleRegex.exec(thisParticularSuccessMsg)) !== null\r\n                    // but don't do it for Book Package checks (in different repos)\r\n                    && thisParticularSuccessMsg.startsWith(`Checked ${regexResult[1]} file`)) {\r\n                    // console.log(\"regexResult\", JSON.stringify(regexResult));\r\n                    USFMBookList.push(regexResult[1]);\r\n                }\r\n                else if ((regexResult = NotesRegex.exec(thisParticularSuccessMsg)) !== null\r\n                    // but don't do it for Book Package checks (in different repos)\r\n                    && thisParticularSuccessMsg.startsWith(`Checked ${regexResult[1]} file`)) {\r\n                    // console.log(\"regexResult\", JSON.stringify(regexResult));\r\n                    TSVNotesList.push(regexResult[1]);\r\n                }\r\n                else\r\n                    resultObject.successList.push(thisParticularSuccessMsg); // Just copy it across\r\n            }\r\n            // Put summary messages at the beginning of the list\r\n            if (TSVNotesList.length)\r\n                resultObject.successList.unshift(`Checked ${TSVNotesList.length} TSV notes files: ${TSVNotesList.join(', ')}`);\r\n            if (USFMBookList.length)\r\n                resultObject.successList.unshift(`Checked ${USFMBookList.length} USFM Bible files: ${USFMBookList.join(', ')}`);\r\n            if (TNBookList.length)\r\n                resultObject.successList.unshift(`Checked ${TNBookList.length} TN files: ${TNBookList.join(', ')}`);\r\n            if (USTBookList.length)\r\n                resultObject.successList.unshift(`Checked ${USTBookList.length} UST files: ${USTBookList.join(', ')}`);\r\n            if (ULTBookList.length)\r\n                resultObject.successList.unshift(`Checked ${ULTBookList.length} ULT files: ${ULTBookList.join(', ')}`);\r\n            if (UGNTBookList.length)\r\n                resultObject.successList.unshift(`Checked ${UGNTBookList.length} UGNT files: ${UGNTBookList.join(', ')}`);\r\n            if (UHBBookList.length)\r\n                resultObject.successList.unshift(`Checked ${UHBBookList.length} UHB files: ${UHBBookList.join(', ')}`);\r\n        }\r\n    else resultObject.successList = [];\r\n\r\n    // Handle the checkedFilenames list\r\n    //  which might have 100s or 1,000s of .md filenames\r\n    if (resultObject.checkedFilenames && resultObject.checkedFilenames.length > 10) {\r\n        // console.log(`Have ${resultObject.checkedFilenames.length} checkedFilenames`);\r\n        resultObject.checkedFilenames = [...new Set(resultObject.checkedFilenames)]; // Only keep unique ones\r\n        // console.log(`Now have ${resultObject.checkedFilenames.length} checkedFilenames`);\r\n        // console.log(JSON.stringify(resultObject.checkedFilenames));\r\n    }\r\n\r\n    // Specialised processing\r\n    // If have s5 marker warnings, add one summary error\r\n    // consoleLogObject('standardisedNoticeList', standardisedNoticeList);\r\n    for (const thisParticularNotice of standardisedNoticeList) {\r\n        // console.log(\"thisParticularNotice\", JSON.stringify(thisParticularNotice));\r\n        if (thisParticularNotice.message.indexOf('\\\\s5') >= 0) {\r\n            const thisNewNotice = {\r\n                ...thisParticularNotice, priority: 701, message: \"\\\\s5 fields should be coded as \\\\ts\\\\* milestones\", location: ` in ${givenNoticeObject.checkType}`,\r\n                // I think we need to delete these fields below as they were probably set in thisParticularNotice\r\n                C: undefined, V: undefined, characterIndex: undefined, extract: undefined\r\n            };\r\n            // if (thisParticularNotice.filename && thisParticularNotice.filename.length)\r\n            //     thisNewNotice.filename = thisParticularNotice.filename; // Sometimes we have an additional file identifier\r\n            // if (thisParticularNotice.repoName && thisParticularNotice.repoName.length)\r\n            //     thisNewNotice.repoName = thisParticularNotice.repoName; // Sometimes we have an additional file identifier\r\n            // if (thisParticularNotice.extra && thisParticularNotice.extra.length)\r\n            //     thisNewNotice.extra = thisParticularNotice.extra; // Sometimes we have an additional file identifier\r\n            standardisedNoticeList.push(thisNewNotice);\r\n            break;\r\n        }\r\n    }\r\n\r\n    // Remove any notices that they have asked us to ignore\r\n    let remainingNoticeList;\r\n    if (ignorePriorityNumberList.length) {\r\n        // console.log(\"Doing ignore of\", ignorePriorityNumberList.length,\"value(s)\");\r\n        remainingNoticeList = [];\r\n        for (const thisNotice of standardisedNoticeList)\r\n            if (ignorePriorityNumberList.indexOf(thisNotice.priority) >= 0)\r\n                resultObject.numIgnoredNotices++;\r\n            else\r\n                remainingNoticeList.push(thisNotice);\r\n    } else\r\n        remainingNoticeList = standardisedNoticeList;\r\n    if (resultObject.numIgnoredNotices)\r\n        console.log(`Ignored ${resultObject.numIgnoredNotices} notices`);\r\n\r\n    // Cut off the lowest priority notices if requested\r\n    if (cutoffPriorityLevel > 0) {\r\n        const newNoticeList = [];\r\n        for (const thisNotice of remainingNoticeList)\r\n            if (thisNotice.priority < cutoffPriorityLevel)\r\n                resultObject.numSuppressedWarnings++;\r\n            else newNoticeList.push(thisNotice);\r\n        remainingNoticeList = newNoticeList;\r\n    }\r\n    // if (cutoffPriorityLevel > errorPriorityLevel)\r\n    // resultObject.errorList.push({999, \"Cutoff level must not be higher than error level\", extract:`(${cutoffPriorityLevel} vs ${errorPriorityLevel})`, \" in processNoticesCommon options\"]);\r\n\r\n    // Sort the remainingNoticeList as required\r\n    if (sortBy === 'ByPriority')\r\n        remainingNoticeList.sort(function (a, b) { return b.priority - a.priority });\r\n    else if (sortBy !== 'AsFound')\r\n        console.log(`ERROR: Sorting '${sortBy}' is not implemented yet!!!`);\r\n\r\n    /*\r\n    // Add additional information fields to the location\r\n    const newNoticeList = [];\r\n    for (const thisNotice of remainingNoticeList) {\r\n        const newNotice = thisNotice;\r\n        if (newNotice.location) newNotice.location = newNotice.location.trim(); // Remove any leading spaces\r\n        else newNotice.location = '';\r\n        if (newNotice.repoName) newNotice.location = `in ${newNotice.filename} repoName ${newNotice.location}`\r\n        if (newNotice.filename) newNotice.location = `in file ${newNotice.filename} ${newNotice.location}`;\r\n        if (newNotice.rowID) newNotice.location = `with ID ${newNotice.rowID} ${newNotice.location}`;\r\n        if (newNotice.lineNumber) newNotice.location = `in line ${newNotice.lineNumber} ${newNotice.location}`;\r\n        if (newNotice.fieldName) newNotice.location = `in ${newNotice.fieldName} field ${newNotice.location}`;\r\n        // Default is to prepend extra to the message\r\n        //  This prevents errors/warnings from different repos or books from being combined\r\n        if (newNotice.extra) newNotice.message = `${newNotice.extra} ${newNotice.message}`;\r\n        newNoticeList.push(newNotice);\r\n    }\r\n    */\r\n\r\n    // Add in extra location info if it's there\r\n    // Default is to prepend it to the msg\r\n    //  This prevents errors/warnings from different repos or books from being combined\r\n    if (remainingNoticeList.length\r\n        && remainingNoticeList[0].extra && remainingNoticeList[0].extra.length) {\r\n        // console.log(`We need to add the extra location, e.g. '${remainingNoticeList[0][5]}': will prepend it to the messages`);\r\n        const newNoticeList = [];\r\n        for (const thisNotice of remainingNoticeList) {\r\n            const thisExtra = thisNotice.extra;\r\n            console.assert(thisExtra && thisExtra.length, `Expect thisNotice to have an \"extra\" field: ${JSON.stringify(thisNotice)}`)\r\n            const newNotice = { ...thisNotice };\r\n            // We don't need the extra field if we've already got this info\r\n            if (thisExtra !== thisNotice.repoName && thisExtra !== thisNotice.bookID)\r\n                newNotice.message = `${thisNotice.extra} ${thisNotice.message}`;\r\n            delete newNotice.extra; // since we've used it (if it existed)\r\n            newNoticeList.push(newNotice);\r\n        }\r\n        remainingNoticeList = newNoticeList;\r\n    }\r\n\r\n    // Count the number of occurrences of each message\r\n    //  ready for further processing\r\n    const allTotals = {};\r\n    for (const thisNotice of remainingNoticeList)\r\n        if (isNaN(allTotals[thisNotice.priority])) allTotals[thisNotice.priority] = 1;\r\n        else allTotals[thisNotice.priority]++;\r\n\r\n    return [remainingNoticeList, allTotals, resultObject];\r\n}\r\n// end of processNoticesCommon function\r\n\r\n\r\nexport function processNoticesToErrorsWarnings(givenNoticeObject, optionalProcessingOptions) {\r\n    /*\r\n        Available options are:\r\n            errorPriorityLevel (integer; default is DEFAULT_ERROR_PRIORITY_LEVEL above)\r\n            maximumSimilarMessages (integer; default is DEFAULT_MAXIMUM_SIMILAR_MESSAGES above)\r\n\r\n        Returns an object with:\r\n            successList: a list of strings describing what has been checked\r\n            errorList\r\n            warningList\r\n            numIgnoredNotices, numSuppressedErrors, numSuppressedWarnings\r\n            processingOptions: just helpfully passes on what we were given (may be undefined)\r\n        Also, any other parameters are just passed through,\r\n            although filenameList might be abbreviated, e.g. for 100s of .md files.\r\n    */\r\n    //     console.log(`processNoticesToErrorsWarnings v${NOTICE_PROCESSOR_VERSION_STRING} with options=${JSON.stringify(optionalProcessingOptions)}\r\n    //    Given ${givenNoticeObject.successList.length.toLocaleString()} success string(s) plus ${givenNoticeObject.noticeList.length.toLocaleString()} notice(s)`);\r\n\r\n    const [remainingNoticeList, allTotals, resultObject] = processNoticesCommon(givenNoticeObject, optionalProcessingOptions);\r\n\r\n    // Add the fields that we need here to the existing resultObject\r\n    resultObject.errorList = []; resultObject.warningList = [];\r\n    resultObject.numSuppressedErrors = 0; resultObject.numSuppressedWarnings = 0;\r\n\r\n    let maximumSimilarMessages;\r\n    try {\r\n        maximumSimilarMessages = optionalProcessingOptions.maximumSimilarMessages;\r\n    } catch (npfMSMerror) { }\r\n    if (typeof maximumSimilarMessages !== 'number' || isNaN(maximumSimilarMessages)) {\r\n        maximumSimilarMessages = DEFAULT_MAXIMUM_SIMILAR_MESSAGES;\r\n        // console.log(`Using default maximumSimilarMessages=${maximumSimilarMessages}`);\r\n    }\r\n    // else console.log(`Using supplied maximumSimilarMessages=${maximumSimilarMessages} cf. default=${DEFAULT_MAXIMUM_SIMILAR_MESSAGES}`);\r\n    let errorPriorityLevel;\r\n    try {\r\n        errorPriorityLevel = optionalProcessingOptions.errorPriorityLevel;\r\n    } catch (npfEPLerror) { }\r\n    if (errorPriorityLevel === undefined) {\r\n        errorPriorityLevel = DEFAULT_ERROR_PRIORITY_LEVEL;\r\n        // console.log(`Using default errorPriorityLevel=${errorPriorityLevel}`);\r\n    }\r\n    else console.log(`Using supplied errorPriorityLevel=${errorPriorityLevel} cf. default=${DEFAULT_ERROR_PRIORITY_LEVEL}`);\r\n\r\n    // Check for repeated notices that should be compressed\r\n    //  while simultaneously separating into error and warning lists\r\n    let counter = {};\r\n    for (const thisNotice of remainingNoticeList) {\r\n        const thisPriority = thisNotice.priority, thisMsg = thisNotice.message;\r\n        const thisID = thisPriority + thisMsg; // Could have identical worded messages but with different priorities\r\n        if (isNaN(counter[thisID])) counter[thisID] = 1;\r\n        else counter[thisID]++;\r\n        if (maximumSimilarMessages > 0 && counter[thisID] === maximumSimilarMessages + 1) {\r\n            if (thisPriority >= errorPriorityLevel) {\r\n                const numSuppressed = allTotals[thisPriority] - maximumSimilarMessages;\r\n                resultObject.errorList.push({ priority: -1, message: thisMsg, location: ` ◄ ${numSuppressed.toLocaleString()} MORE SIMILAR ERROR${numSuppressed === 1 ? '' : 'S'} SUPPRESSED` });\r\n                resultObject.numSuppressedErrors++;\r\n            } else {\r\n                const numSuppressed = allTotals[thisPriority] - maximumSimilarMessages;\r\n                resultObject.warningList.push({ priority: -1, message: thisMsg, location: ` ◄ ${numSuppressed.toLocaleString()} MORE SIMILAR WARNING${numSuppressed === 1 ? '' : 'S'} SUPPRESSED` });\r\n                resultObject.numSuppressedWarnings++;\r\n            }\r\n        } else if (maximumSimilarMessages > 0 && counter[thisID] > maximumSimilarMessages + 1) {\r\n            if (thisPriority >= errorPriorityLevel)\r\n                resultObject.numSuppressedErrors++;\r\n            else\r\n                resultObject.numSuppressedWarnings++;\r\n        } else if (thisPriority >= errorPriorityLevel)\r\n            resultObject.errorList.push(thisNotice);\r\n        else\r\n            resultObject.warningList.push(thisNotice);\r\n    }\r\n\r\n    // console.log(`processNoticesToErrorsWarnings is returning ${resultObject.successList.length} successes, ${resultObject.errorList.length} errors, and ${resultObject.warningList.length} warnings\r\n    //   numIgnoredNotices=${resultObject.numIgnoredNotices} numSuppressedErrors=${resultObject.numSuppressedErrors} numSuppressedWarnings=${resultObject.numSuppressedWarnings}`);\r\n    return resultObject;\r\n}\r\n// end of processNoticesToErrorsWarnings function\r\n\r\n\r\nexport function processNoticesToSevereMediumLow(givenNoticeObject, optionalProcessingOptions) {\r\n    /*\r\n        Available options are:\r\n            severePriorityLevel (integer; default is DEFAULT_SEVERE_PRIORITY_LEVEL above)\r\n            mediumPriorityLevel (integer; default is DEFAULT_MEDIUM_PRIORITY_LEVEL above)\r\n            maximumSimilarMessages (integer; default is DEFAULT_MAXIMUM_SIMILAR_MESSAGES above)\r\n\r\n        Returns an object with:\r\n            successList: a list of strings describing what has been checked\r\n            severeList\r\n            mediumList\r\n            lowList\r\n            numIgnoredNotices, numSevereSuppressed, numMediumSuppressed, numLowSuppressed\r\n            processingOptions: just helpfully passes on what we were given (may be undefined)\r\n        Also, any other parameters are just passed through,\r\n            although filenameList might be abbreviated, e.g. for 100s of .md files.\r\n    */\r\n    //     console.log(`processNoticesToSevereMediumLow v${NOTICE_PROCESSOR_VERSION_STRING} with options=${JSON.stringify(optionalProcessingOptions)}\r\n    //    Given ${givenNoticeObject.successList.length.toLocaleString()} success string(s) plus ${givenNoticeObject.noticeList.length.toLocaleString()} notice(s)`);\r\n\r\n    const [remainingNoticeList, allTotals, resultObject] = processNoticesCommon(givenNoticeObject, optionalProcessingOptions);\r\n\r\n    // Add the fields that we need here to the existing resultObject\r\n    resultObject.severeList = []; resultObject.mediumList = []; resultObject.lowList = [];\r\n    resultObject.numSevereSuppressed = 0; resultObject.numMediumSuppressed = 0; resultObject.numLowSuppressed = 0;\r\n\r\n    let maximumSimilarMessages;\r\n    try {\r\n        maximumSimilarMessages = optionalProcessingOptions.maximumSimilarMessages;\r\n    } catch (npfMSMerror) { }\r\n    if (typeof maximumSimilarMessages !== 'number' || isNaN(maximumSimilarMessages)) {\r\n        maximumSimilarMessages = DEFAULT_MAXIMUM_SIMILAR_MESSAGES;\r\n        // console.log(`Using default maximumSimilarMessages=${maximumSimilarMessages}`);\r\n    }\r\n    // else console.log(`Using supplied maximumSimilarMessages=${maximumSimilarMessages} cf. default=${DEFAULT_MAXIMUM_SIMILAR_MESSAGES}`);\r\n    let severePriorityLevel;\r\n    try {\r\n        severePriorityLevel = optionalProcessingOptions.severePriorityLevel;\r\n    } catch (npfSPLerror) { }\r\n    if (severePriorityLevel === undefined) {\r\n        severePriorityLevel = DEFAULT_SEVERE_PRIORITY_LEVEL;\r\n        // console.log(`Using default severePriorityLevel=${severePriorityLevel}`);\r\n    }\r\n    else console.log(`Using supplied severePriorityLevel=${severePriorityLevel} cf. default=${DEFAULT_SEVERE_PRIORITY_LEVEL}`);\r\n    let mediumPriorityLevel;\r\n    try {\r\n        mediumPriorityLevel = optionalProcessingOptions.mediumPriorityLevel;\r\n    } catch (nfpMPLerror) { }\r\n    if (mediumPriorityLevel === undefined) {\r\n        mediumPriorityLevel = DEFAULT_MEDIUM_PRIORITY_LEVEL;\r\n        // console.log(`Using default mediumPriorityLevel=${mediumPriorityLevel}`);\r\n    }\r\n    else console.log(`Using supplied mediumPriorityLevel=${mediumPriorityLevel} cf. default=${DEFAULT_MEDIUM_PRIORITY_LEVEL}`);\r\n\r\n    // Check for repeated notices that should be compressed\r\n    //  while simultaneously separating into error and warning lists\r\n    let counter = {};\r\n    for (const thisNotice of remainingNoticeList) {\r\n        const thisPriority = thisNotice.priority, thisMsg = thisNotice.message;\r\n        const thisID = thisPriority + thisMsg; // Could have identical worded messages but with different priorities\r\n        if (isNaN(counter[thisID])) counter[thisID] = 1;\r\n        else counter[thisID]++;\r\n        if (maximumSimilarMessages > 0 && counter[thisID] === maximumSimilarMessages + 1) {\r\n            if (thisPriority >= severePriorityLevel) {\r\n                const numSuppressed = allTotals[thisPriority] - maximumSimilarMessages;\r\n                resultObject.severeList.push({ priority: -1, message: thisMsg, location: ` ◄ ${numSuppressed.toLocaleString()} MORE SIMILAR ERROR${numSuppressed === 1 ? '' : 'S'} SUPPRESSED` });\r\n                resultObject.numSevereSuppressed++;\r\n            } else if (thisPriority >= mediumPriorityLevel) {\r\n                const numSuppressed = allTotals[thisPriority] - maximumSimilarMessages;\r\n                resultObject.mediumList.push({ priority: -1, message: thisMsg, location: ` ◄ ${numSuppressed.toLocaleString()} MORE SIMILAR ERROR${numSuppressed === 1 ? '' : 'S'} SUPPRESSED` });\r\n                resultObject.numMediumSuppressed++;\r\n            } else {\r\n                const numSuppressed = allTotals[thisPriority] - maximumSimilarMessages;\r\n                resultObject.lowList.push({ priority: -1, message: thisMsg, location: ` ◄ ${numSuppressed.toLocaleString()} MORE SIMILAR WARNING${numSuppressed === 1 ? '' : 'S'} SUPPRESSED` });\r\n                resultObject.numLowSuppressed++;\r\n            }\r\n        } else if (maximumSimilarMessages > 0 && counter[thisID] > maximumSimilarMessages + 1) {\r\n            if (thisPriority >= severePriorityLevel)\r\n                resultObject.numSevereSuppressed++;\r\n            else if (thisPriority >= mediumPriorityLevel)\r\n                resultObject.numMediumSuppressed++;\r\n            else\r\n                resultObject.numLowSuppressed++;\r\n        } else if (thisPriority >= severePriorityLevel)\r\n            resultObject.severeList.push(thisNotice);\r\n        else if (thisPriority >= mediumPriorityLevel)\r\n            resultObject.mediumList.push(thisNotice);\r\n        else\r\n            resultObject.lowList.push(thisNotice);\r\n    }\r\n\r\n    // console.log(`processNoticesToSevereMediumLow is returning ${resultObject.successList.length} successes, ${resultObject.severeList.length} severe, ${resultObject.mediumList.length} medium, and ${resultObject.lowList.length} low\r\n    //   numIgnoredNotices=${resultObject.numIgnoredNotices} numSevereSuppressed=${resultObject.numSevereSuppressed} numMediumSuppressed=${resultObject.numMediumSuppressed} numLowSuppressed=${resultObject.numLowSuppressed}`);\r\n    return resultObject;\r\n}\r\n// end of processNoticesToSevereMediumLow function\r\n\r\n\r\nexport function processNoticesToSingleList(givenNoticeObject, optionalProcessingOptions) {\r\n    /*\r\n        Available options are:\r\n            severePriorityLevel (integer; default is DEFAULT_SEVERE_PRIORITY_LEVEL above)\r\n            mediumPriorityLevel (integer; default is DEFAULT_MEDIUM_PRIORITY_LEVEL above)\r\n            maximumSimilarMessages (integer; default is DEFAULT_MAXIMUM_SIMILAR_MESSAGES above)\r\n\r\n        Returns an object with:\r\n            successList: a list of strings describing what has been checked\r\n            warningList\r\n            numIgnoredNotices, numSevereSuppressed, numMediumSuppressed, numLowSuppressed\r\n            processingOptions: just helpfully passes on what we were given (may be undefined)\r\n        Also, any other parameters are just passed through,\r\n            although filenameList might be abbreviated, e.g. for 100s of .md files.\r\n    */\r\n    //     console.log(`processNoticesToSingleList v${NOTICE_PROCESSOR_VERSION_STRING} with options=${JSON.stringify(optionalProcessingOptions)}\r\n    //    Given ${givenNoticeObject.successList.length.toLocaleString()} success string(s) plus ${givenNoticeObject.noticeList.length.toLocaleString()} notice(s)`);\r\n\r\n    // We default to sorting ByPriority unless something else was specified\r\n    let sortBy;\r\n    try {\r\n        sortBy = optionalProcessingOptions.sortBy;\r\n    } catch (npfSBerror) { }\r\n    if (sortBy === undefined)\r\n        optionalProcessingOptions.sortBy = 'ByPriority';\r\n\r\n    const [remainingNoticeList, allTotals, resultObject] = processNoticesCommon(givenNoticeObject, optionalProcessingOptions);\r\n\r\n    // Add the fields that we need here to the existing resultObject\r\n    resultObject.warningList = []; resultObject.numSuppressedWarnings = 0;\r\n\r\n    let maximumSimilarMessages;\r\n    try {\r\n        maximumSimilarMessages = optionalProcessingOptions.maximumSimilarMessages;\r\n    } catch (npfMSMerror) { }\r\n    if (typeof maximumSimilarMessages !== 'number' || isNaN(maximumSimilarMessages)) {\r\n        maximumSimilarMessages = DEFAULT_MAXIMUM_SIMILAR_MESSAGES;\r\n        // console.log(`Using default maximumSimilarMessages=${maximumSimilarMessages}`);\r\n    }\r\n    // else console.log(`Using supplied maximumSimilarMessages=${maximumSimilarMessages} cf. default=${DEFAULT_MAXIMUM_SIMILAR_MESSAGES}`);\r\n\r\n    // Check for repeated notices that should be compressed\r\n    //  while simultaneously creating warning list\r\n    let counter = {};\r\n    for (const thisNotice of remainingNoticeList) {\r\n        const thisPriority = thisNotice.priority, thisMsg = thisNotice.message;\r\n        const thisID = thisPriority + thisMsg; // Could have identical worded messages but with different priorities\r\n        if (isNaN(counter[thisID])) counter[thisID] = 1;\r\n        else counter[thisID]++;\r\n        if (maximumSimilarMessages > 0 && counter[thisID] === maximumSimilarMessages + 1) {\r\n            const numSuppressed = allTotals[thisPriority] - maximumSimilarMessages;\r\n            resultObject.warningList.push({ priority: thisPriority, message: thisMsg, location: ` ◄ ${numSuppressed.toLocaleString()} MORE SIMILAR WARNING${numSuppressed === 1 ? '' : 'S'} SUPPRESSED` });\r\n            resultObject.numSuppressedWarnings++;\r\n        } else if (maximumSimilarMessages > 0 && counter[thisID] > maximumSimilarMessages + 1) {\r\n            resultObject.numSuppressedWarnings++;\r\n        } else\r\n            resultObject.warningList.push(thisNotice);\r\n    }\r\n\r\n    // console.log(`processNoticesToSingleList is returning ${resultObject.successList.length} successes, ${resultObject.warningList.length} warnings\r\n    //   numIgnoredNotices=${resultObject.numIgnoredNotices} numSuppressedWarnings=${resultObject.numSuppressedWarnings}`);\r\n    return resultObject;\r\n}\r\n// end of processNoticesToSingleList function\r\n","import React from 'react';\r\n// import { forwardRef } from 'react';\r\n\r\n// NOTE: The following line is currently giving compile warnings -- a problem in a dependency it seems\r\nimport MaterialTable from 'material-table';\r\n\r\n// import { consoleLogObject, displayPropertyNames } from '../core/utilities';\r\n\r\n\r\n// Note from RJH: I commented out these fields because 1/ they seemed to cause warnings/errors,\r\n//  2/ I didn't understand what they do anyway.\r\n// so feel free to uncomment it if it makes the table work better.\r\n/*\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n  };\r\n  /* end material box imports and icons */\r\n\r\n\r\nexport function RenderLines({ text }) {\r\n    /**\r\n    * @description - Displays a given piece of text (which can include newline characters)\r\n    * @param {String} text - text to render as numbered lines\r\n    * @return {String} - rendered HTML for the numbered list of lines\r\n    */\r\n    return <ol>\r\n        {text.split('\\n').map(function (line, index) {\r\n            return <li key={index}>{line}</li>;\r\n        })}\r\n    </ol>;\r\n}\r\n\r\n\r\nconst MAX_ARRAY_ITEMS_TO_DISPLAY = 8; // Or do we want this as a parameter?\r\nexport function RenderObject({ thisObject, excludeList }) {\r\n    /**\r\n    * @description - Displays whatever is in the object\r\n    * @param {Object} thisObject - object to render\r\n    * @param {Array} excludeList - optional list of object property names to be ignored\r\n    * @return {String} - rendered HTML for list of thisObject properties\r\n    */\r\n    // console.log(\"In RenderObject\");\r\n    // consoleLogObject('RenderObject settings', settings);\r\n    return <ul>\r\n        {\r\n            Object.keys(thisObject).map((key, keyIndex) => {\r\n                if (!excludeList || excludeList.indexOf(key) < 0) {\r\n                    let displayObject = thisObject[key];\r\n                    if (Array.isArray(displayObject) && displayObject.length > MAX_ARRAY_ITEMS_TO_DISPLAY)\r\n                        displayObject = `(only first ${MAX_ARRAY_ITEMS_TO_DISPLAY} displayed here) ${JSON.stringify(displayObject.slice(0, MAX_ARRAY_ITEMS_TO_DISPLAY))}, etc…`;\r\n                    return (\r\n                        <li key={keyIndex}>&nbsp;&nbsp;&nbsp;&nbsp;\r\n                            <span><b>{key}</b>{Array.isArray(thisObject[key]) ? ` (${thisObject[key].length.toLocaleString()}) ` : ''}: {typeof displayObject === 'object' ? JSON.stringify(displayObject) : displayObject}</span>\r\n                        </li>\r\n                    )\r\n                }\r\n                return null;\r\n            }, [])}\r\n    </ul>;\r\n}\r\n\r\n\r\nexport function RenderRawResults({ results }) {\r\n    /**\r\n    * @description - Displays the raw noticeList in a table\r\n    * @param {Object} results - object containing noticeList\r\n    * @return {String} - rendered HTML for table of notices\r\n    */\r\n    // This function is flexible enough to handle notice objects:\r\n    //      including bookID,C,V or not\r\n    //      including repoName, filename, lineNumber or not\r\n    //      including extra or not\r\n\r\n    // console.log(\"In RenderRawResults\");\r\n    // consoleLogObject('RenderRawResults results', results);\r\n    // displayPropertyNames('RenderRawResults results', results);\r\n\r\n    // Create a list of other property names\r\n    // let propertyList = [], newObject = {};\r\n    // for (const propertyName in results)\r\n    //     if (propertyName !== 'noticeList') {\r\n    //         newObject[propertyName] = results[propertyName];\r\n    //         propertyList.push(<p>{propertyName} = {results[propertyName]}</p>);\r\n    //     }\r\n    // consoleLogObject('propertyList', propertyList);\r\n\r\n    if (!results.noticeList || !results.noticeList.length)\r\n        return <>\r\n            <p><b>Raw Results</b> (no notices were produced):</p>\r\n            <RenderObject thisObject={results} excludeList={['noticeList']} />\r\n        </>;\r\n    // If we get here, we have notices.\r\n    // console.log(`Got ${results.noticeList.length} notices`);\r\n\r\n    // Discover what fields we have in our notice objects (in order to set our table headers below)\r\n    const allPropertiesSet = new Set();\r\n    let haveOBS = false, haveBible = false;\r\n    // console.log( \"allPropertiesSet-A\", JSON.stringify([...allPropertiesSet]));\r\n    for (const noticeEntry of results.noticeList)\r\n        // console.log(\"noticeEntry\", JSON.stringify(noticeEntry));\r\n        // console.log(`Found (${Object.keys(noticeEntry).length}) ${Object.keys(noticeEntry)}`);\r\n        for (const [noticePropertyName, noticePropertyValue] of Object.entries(noticeEntry))\r\n            // console.log(\"  Found\", noticePropertyName, \"=\", noticeEntry[noticePropertyName]);\r\n            if (noticePropertyValue !== undefined) {\r\n                allPropertiesSet.add(noticePropertyName);\r\n                if (noticePropertyName === 'bookID' && noticePropertyValue) {\r\n                    if (noticePropertyValue === 'OBS') haveOBS = true;\r\n                    else haveBible = true;\r\n                }\r\n            }\r\n    // console.log( \"allPropertiesSet-Z\", JSON.stringify([...allPropertiesSet]));\r\n\r\n    // Adjust the headers according to the column sets that we actually have in the noticeList\r\n    let headerData = [\r\n        { title: 'Priority', field: 'priority', type: 'numeric' },\r\n        { title: 'Message', field: 'message' },\r\n    ];\r\n    if (allPropertiesSet.has('details')) headerData = headerData.concat([{ title: 'Details', field: 'details' }]);\r\n    if (allPropertiesSet.has('bookID')) headerData = headerData.concat([{ title: 'Book', field: 'bookID' }]);\r\n    if (allPropertiesSet.has('C') || allPropertiesSet.has('V')) {\r\n        let CName = '???', VName = '???';\r\n        if (haveBible && !haveOBS) { CName = 'Chapter'; VName = 'Verse'; }\r\n        else if (haveOBS && !haveBible) { CName = 'Story'; VName = 'Frame'; }\r\n        else if (haveBible && haveOBS) { CName = 'Chapter/Story'; VName = 'Verse/Frame'; }\r\n        headerData = headerData.concat([\r\n            { title: CName, field: 'C' },\r\n            { title: VName, field: 'V' }\r\n        ]);\r\n    }\r\n    if (allPropertiesSet.has('rowID')) headerData = headerData.concat([{ title: 'ID', field: 'rowID' }]);\r\n    if (allPropertiesSet.has('repoName')) headerData = headerData.concat([{ title: 'Repo', field: 'repoName' }]);\r\n    if (allPropertiesSet.has('filename')) headerData = headerData.concat([{ title: 'Filename', field: 'filename' }]);\r\n    if (allPropertiesSet.has('fieldName')) headerData = headerData.concat([{ title: 'Field', field: 'fieldName' }]);\r\n    if (allPropertiesSet.has('lineNumber')) headerData = headerData.concat([{ title: 'Line', field: 'lineNumber' }]);\r\n    if (allPropertiesSet.has('characterIndex')) headerData = headerData.concat([{ title: 'CharIndex', field: 'characterIndex' }]);\r\n    if (allPropertiesSet.has('extract')) headerData = headerData.concat([{ title: 'Extract', field: 'extract' }]);\r\n    if (allPropertiesSet.has('location')) headerData = headerData.concat([{ title: 'Location', field: 'location' }]);\r\n    if (allPropertiesSet.has('extra')) headerData = headerData.concat([{ title: 'Extra', field: 'extra' }]);\r\n    // console.log(\"headerData\", headerData.length, JSON.stringify(headerData));\r\n\r\n    // Make the actual table and return it\r\n    return <>\r\n        <b>Raw Results</b>:\r\n        <RenderObject thisObject={results} />\r\n        <MaterialTable\r\n            // icons={tableIcons}\r\n            title={`All ${results.noticeList.length.toLocaleString()} Raw Notices`}\r\n            columns={headerData}\r\n            data={results.noticeList}\r\n            options={{ sorting: true, exportButton: true, exportAllData: true }}\r\n        />\r\n    </>;\r\n}\r\n\r\n\r\nexport function RenderMessage({ color, message, details }) {\r\n    /**\r\n    * @description - Displays the message plus details if specified\r\n    * @param {String} color - color field for the message style\r\n    * @param {String} message - notice text\r\n    * @param {String} details - (optional) extra notice text\r\n    * @return {String} - rendered HTML for the given reference\r\n    */\r\n    let detailsString = '';\r\n    if (details && details.length)\r\n        detailsString = ' with ' + (details[0] === '(' ? details : `'${details}'`);\r\n    return <><b style={{ color: color }}>{message}</b>{detailsString}</>;\r\n}\r\n\r\n\r\nexport function RenderBCV({ bookID, C, V }) {\r\n    /**\r\n    * @description - Displays the bookcode and chapter/verse details if specified\r\n    * @param {String} bookID - (optional) 3-character UPPERCASE USFM bookcode or 'OBS'.\r\n    * @param {String} C - (optional) chapter info\r\n    * @param {String} V - (optional) verse info\r\n    * @return {String} - rendered HTML for the given reference\r\n    */\r\n    // These are all optional parameters - they may be undefined or blank if irrelevant\r\n    // console.log(`RenderBCV(${bookID}, ${C}, ${V})`);\r\n    if (!bookID && !C && !V) return null; // They're all undefined or blank!\r\n    // console.log(`RenderBCV2 ${bookID}, ${C}, ${V}`);\r\n    let result;\r\n    if (bookID && bookID.length) result = bookID;\r\n    if (C && C.length) result = `${result}${result.length ? ' ' : ''}${C}`;\r\n    if (V && V.length) result = `${result}${result.length ? ':' : ''}${V}`;\r\n    if (result.length)\r\n        return <> {V && V.length ? 'at' : 'in'} <b>{result}</b></>;\r\n    return null;\r\n}\r\n\r\nexport function RenderFileDetails({ repoName, filename, lineNumber, rowID, fieldName }) {\r\n    /**\r\n    * @description - Displays the repoName and filename/lineNumber details if specified\r\n    * @param {String} repoName - (optional) repo name string\r\n    * @param {String} filename - (optional) filename string\r\n    * @param {Number} lineNumber - (optional) line number integer (1-based)\r\n    * @param {String} rowID - (optional) 4-character ID field\r\n    * @param {String} fieldName - (optional) name of field\r\n    * @return {String} - rendered HTML for the given reference\r\n    */\r\n    // These are all optional parameters - they may be undefined or blank if irrelevant\r\n    // console.log(`RenderFileDetails(${repoName}, ${filename}, ${lineNumber}, ${rowID}, ${fieldName})`);\r\n    if (!repoName && !filename && !lineNumber && !rowID && !fieldName)\r\n        return null; // They're all undefined or blank!\r\n    // console.log(`RenderFileDetails2 ${repoName}, ${filename}, ${lineNumber}`);\r\n    let resultStart = '', lineResult = '', resultEnd = '';\r\n    if (repoName && repoName.length) resultStart += ` in ${repoName} repository`;\r\n    if (filename && filename.length) resultStart += ` in file ${filename}`;\r\n    if (lineNumber) {\r\n        resultStart += ' on ';\r\n        lineResult = `line ${lineNumber.toLocaleString()}`;\r\n    }\r\n    if (rowID && rowID.length) resultEnd += ` with ID ${rowID}`;\r\n    if (fieldName && fieldName.length) resultEnd += ` in ${fieldName} field`;\r\n    return <>{resultStart}<b>{lineResult}</b>{resultEnd}</>;\r\n}\r\n\r\nexport function RenderSuccessesColored({ results }) {\r\n    // Display our array of success message strings in a nicer format\r\n    //\r\n    // Expects results to contain:\r\n    //      1/ successList\r\n    // console.log(\"In RenderSuccessesColored with \", successList);\r\n    // consoleLogObject('RenderSuccessesColored results', results);\r\n\r\n    let haveWarnings;\r\n    try { haveWarnings = results.errorList.length || results.warningList.length; }\r\n    catch (e1) {\r\n        try { haveWarnings = results.severeList.length || results.mediumList.length || results.lowList.length; }\r\n        catch (e2) { haveWarnings = results.warningList.length; }\r\n    }\r\n\r\n    return <ul>\r\n        {results.successList.map(function (listEntry, index) {\r\n            return <li key={index}>\r\n                <b style={{ color: haveWarnings ? 'limegreen' : 'green' }}>{listEntry}</b>\r\n            </li>;\r\n        })}\r\n    </ul>;\r\n}\r\n\r\nexport function RenderProcessedArray({ arrayType, results }) {\r\n    // Display our array of objects in a nicer format\r\n    //  priority (integer), message (string)\r\n    //  plus optional fields:\r\n    //      bookID, C, V, repoName, filename, lineNumber\r\n    //      characterIindex (integer), extract (string), location (string)\r\n    //\r\n    // console.log(\"In RenderProcessedArray with \", arrayType);\r\n    // consoleLogObject('RenderProcessedArray results', results);\r\n\r\n    if (arrayType === 's')\r\n        return <>\r\n            <RenderSuccessesColored results={results} />\r\n        </>;\r\n    else { // not 's' (successList)\r\n        const myList = arrayType === 'e' ? results.errorList : results.warningList;\r\n        return <ul>\r\n            {myList.map(function (listEntry, index) {\r\n                return <li key={index}>\r\n                    <RenderMessage color={arrayType === 'e' ? 'red' : 'orange'} message={listEntry.message} details={listEntry.details} />\r\n                    <RenderBCV bookID={listEntry.bookID} C={listEntry.C} V={listEntry.V} />\r\n                    <RenderFileDetails repoName={listEntry.repoName} filename={listEntry.filename} lineNumber={listEntry.lineNumber} rowID={listEntry.rowID} fieldName={listEntry.fieldName} />\r\n                    {listEntry.characterIndex > 0 ? \" (at character \" + (listEntry.characterIndex + 1) + \")\" : \"\"}\r\n                    <span style={{ color: 'DimGray' }}>{listEntry.extract ? \" around '\" + listEntry.extract + \"'\" : \"\"}</span>\r\n                    {listEntry.location}\r\n                    <small style={{ color: 'Gray' }}>{listEntry.priority >= 0 ? \" (Priority \" + listEntry.priority + \")\" : \"\"}</small>\r\n                </li>;\r\n            })}\r\n        </ul>;\r\n    }\r\n}\r\n\r\n\r\nexport function RenderGivenArray({ array, color }) {\r\n    // Display our array of objects in a nicer format\r\n    //  priority (integer), message (string),\r\n    //  plus possible optional fields:\r\n    //      bookID, C, V,\r\n    //      repoName, filename, lineNumber,\r\n    //      characterIndex (integer), extract (string), location (descriptive string)\r\n    //\r\n    // console.log(\"In RenderGivenArray with \", arrayType);\r\n    // consoleLogObject('RenderGivenArray results', results);\r\n\r\n    return <ul>\r\n        {array.map(function (listEntry, index) {\r\n            return <li key={index}>\r\n                <RenderMessage color={color} message={listEntry.message} details={listEntry.details} />\r\n                <RenderBCV bookID={listEntry.bookID} C={listEntry.C} V={listEntry.V} />\r\n                <RenderFileDetails repoName={listEntry.repoName} filename={listEntry.filename} lineNumber={listEntry.lineNumber} rowID={listEntry.rowID} fieldName={listEntry.fieldName} />\r\n                {listEntry.characterIndex !== undefined && listEntry.characterIndex >= 0 ? \" (at character \" + (listEntry.characterIndex + 1) + \" of line)\" : \"\"}\r\n                <span style={{ color: 'DimGray' }}>{listEntry.extract ? \" around '\" + listEntry.extract + \"'\" : \"\"}</span>\r\n                {listEntry.location}\r\n                <small style={{ color: 'Gray' }}>{listEntry.priority >= 0 ? \" (Priority \" + listEntry.priority + \")\" : \"\"}</small>\r\n            </li>;\r\n        })}\r\n    </ul>;\r\n}\r\n\r\n\r\nexport function getGradientcolor(priorityValue) {\r\n    // priorityValue is in range 1..999\r\n    //\r\n    // Returns a color value from red (highest priority) to orange (lower)\r\n    const red = `0${Math.floor(priorityValue * 255 / 999).toString(16)}`.slice(-2);\r\n    // const green = `0${Math.floor((1000-priorityValue) * 55 / 999).toString(16)}`.slice(-2);\r\n    // console.log(`getGradientcolor(${priorityValue}) -> red='${red}' green='${green}'`)\r\n    return `#${red}0000`; // or `#${red}${green}00`\r\n}\r\n\r\n\r\nexport function RenderWarningsGradient({ results }) {\r\n    // Display our array of 8-part lists in a nicer format\r\n    //  1/ priority number, 2/ bookID, 3/ C, 4/ V, 5/ message,\r\n    //      6/ index (integer), 7/ extract (optional), 8/ location\r\n    //\r\n    // Expects results to contain:\r\n    //      1/ warningList\r\n    // console.log(\"In RenderWarningsGradient with \", results.warningList);\r\n    // consoleLogObject('RenderWarningsGradient results', results);\r\n\r\n    return <ul>\r\n        {results.warningList.map(function (listEntry, index) {\r\n            const thiscolor = getGradientcolor(listEntry.priority);\r\n            return <li key={index}>\r\n                <RenderMessage color={thiscolor} message={listEntry.message} details={listEntry.details} />\r\n                <RenderBCV bookID={listEntry.bookID} C={listEntry.C} V={listEntry.V} />\r\n                <RenderFileDetails repoName={listEntry.repoName} filename={listEntry.filename} lineNumber={listEntry.lineNumber} rowID={listEntry.rowID} fieldName={listEntry.fieldName} />\r\n                {listEntry.characterIndex !== undefined && listEntry.characterIndex >= 0 ? \" (at character \" + (listEntry.characterIndex + 1) + \" of line)\" : \"\"}\r\n                <span style={{ color: 'DimGray' }}>{listEntry.extract ? \" around '\" + listEntry.extract + \"'\" : \"\"}</span>\r\n                {listEntry.location}\r\n                <small style={{ color: 'Gray' }}>{listEntry.priority >= 0 ? \" (Priority \" + listEntry.priority + \")\" : \"\"}</small>\r\n            </li>;\r\n        })}\r\n    </ul>;\r\n}\r\n\r\n\r\nexport function RenderErrors({ results }) {\r\n    // console.log(\"In RenderErrors\");\r\n    // consoleLogObject('RenderErrors results', results);\r\n    return <>\r\n        <b style={{ color: results.errorList.length ? 'red' : 'green' }}>{results.errorList.length.toLocaleString()} error{results.errorList.length === 1 ? '' : 's'}</b>{results.errorList.length ? ':' : ''}\r\n        <small style={{ color: 'Gray' }}>{results.numSuppressedErrors ? \" (\" + results.numSuppressedErrors.toLocaleString() + \" similar one\" + (results.numSuppressedErrors === 1 ? '' : 's') + \" suppressed)\" : ''}</small>\r\n        <RenderProcessedArray results={results} arrayType='e' />\r\n    </>;\r\n}\r\nexport function RenderWarnings({ results }) {\r\n    // console.log(\"In RenderWarnings\");\r\n    // consoleLogObject('RenderWarnings results', results);\r\n    return <>\r\n        <b style={{ color: results.warningList.length ? 'orange' : 'green' }}>{results.warningList.length.toLocaleString()} warning{results.warningList.length === 1 ? '' : 's'}</b>{results.warningList.length ? ':' : ''}\r\n        <small style={{ color: 'Gray' }}>{results.numSuppressedWarnings ? \" (\" + results.numSuppressedWarnings.toLocaleString() + \" similar one\" + (results.numSuppressedWarnings === 1 ? '' : 's') + \" suppressed)\" : ''}</small>\r\n        <RenderProcessedArray results={results} arrayType='w' />\r\n    </>;\r\n}\r\nexport function RenderErrorsAndWarnings({ results }) {\r\n    // console.log(\"In RenderErrorsAndWarnings\");\r\n    // consoleLogObject('RenderErrorsAndWarnings results', results);\r\n    return <>\r\n        <RenderErrors results={results} />\r\n        <RenderWarnings results={results} />\r\n    </>;\r\n}\r\n\r\n\r\nexport function RenderSevere({ results }) {\r\n    // console.log(\"In RenderSevere\");\r\n    // consoleLogObject('RenderSevere results', results);\r\n    return <>\r\n        <b style={{ color: results.severeList.length ? 'red' : 'green' }}>{results.severeList.length.toLocaleString()} severe error{results.severeList.length === 1 ? '' : 's'}</b>{results.severeList.length ? ':' : ''}\r\n        <small style={{ color: 'Gray' }}>{results.numSevereSuppressed ? \" (\" + results.numSevereSuppressed.toLocaleString() + \" similar one\" + (results.numSevereSuppressed === 1 ? '' : 's') + \" suppressed)\" : ''}</small>\r\n        <RenderGivenArray array={results.severeList} color='red' />\r\n    </>;\r\n}\r\nexport function RenderMedium({ results }) {\r\n    // console.log(\"In RenderSevere\");\r\n    // consoleLogObject('RenderSevere results', results);\r\n    return <>\r\n        <b style={{ color: results.mediumList.length ? 'maroon' : 'green' }}>{results.mediumList.length.toLocaleString()} medium error{results.mediumList.length === 1 ? '' : 's'}</b>{results.mediumList.length ? ':' : ''}\r\n        <small style={{ color: 'Gray' }}>{results.numMediumSuppressed ? \" (\" + results.numMediumSuppressed.toLocaleString() + \" similar one\" + (results.numMediumSuppressed === 1 ? '' : 's') + \" suppressed)\" : ''}</small>\r\n        <RenderGivenArray array={results.mediumList} color='maroon' />\r\n    </>;\r\n}\r\nexport function RenderLow({ results }) {\r\n    // console.log(\"In RenderLow\");\r\n    // consoleLogObject('RenderLow results', results);\r\n    return <>\r\n        <b style={{ color: results.lowList.length ? 'orange' : 'green' }}>{results.lowList.length.toLocaleString()} other warning{results.lowList.length === 1 ? '' : 's'}</b>{results.lowList.length ? ':' : ''}\r\n        <small style={{ color: 'Gray' }}>{results.numLowSuppressed ? \" (\" + results.numLowSuppressed.toLocaleString() + \" similar one\" + (results.numLowSuppressed === 1 ? '' : 's') + \" suppressed)\" : ''}</small>\r\n        <RenderGivenArray array={results.lowList} color='orange' />\r\n    </>;\r\n}\r\nexport function RenderSevereMediumLow({ results }) {\r\n    // console.log(\"In RenderSevereMediumLow\");\r\n    // consoleLogObject('RenderSevereMediumLow results', results);\r\n    return <>\r\n        <RenderSevere results={results} />\r\n        <RenderMedium results={results} />\r\n        <RenderLow results={results} />\r\n    </>;\r\n}\r\n\r\n\r\nexport function RenderSuccessesErrorsWarnings({ results }) {\r\n    // console.log(\"In RenderSuccessesErrorsWarnings\");\r\n\r\n    // consoleLogObject('RenderSuccessesErrorsWarnings results', results);\r\n\r\n    const haveErrorsOrWarnings = results.errorList.length || results.warningList.length;\r\n\r\n    let successCount;\r\n    if (results.successList.length === 1) successCount = 'One';\r\n    else if (results.successList.length === 2) successCount = 'Two';\r\n    else if (results.successList.length === 3) successCount = 'Three';\r\n    else if (results.successList.length === 4) successCount = 'Four';\r\n    else if (results.successList.length === 5) successCount = 'Five';\r\n    else successCount = results.successList.length.toLocaleString();\r\n\r\n    return <>\r\n        <b style={{ color: haveErrorsOrWarnings ? 'limegreen' : 'green' }}>{successCount.toLocaleString()} check{results.successList.length === 1 ? '' : 's'} completed</b>{results.successList.length ? ':' : ''}\r\n        <RenderSuccessesColored results={results} />\r\n        {haveErrorsOrWarnings ? <RenderErrorsAndWarnings results={results} /> : \"\"}\r\n    </>;\r\n}\r\n\r\n\r\nexport function RenderSuccessesSevereMediumLow({ results }) {\r\n    // console.log(\"In RenderSuccessesSevereMediumLow\");\r\n\r\n    // consoleLogObject('RenderSuccessesSevereMediumLow results', results);\r\n\r\n    const haveErrorsOrWarnings = results.severeList.length || results.mediumList.length || results.lowList.length;\r\n\r\n    let successCount;\r\n    if (results.successList.length === 1) successCount = 'One';\r\n    else if (results.successList.length === 2) successCount = 'Two';\r\n    else if (results.successList.length === 3) successCount = 'Three';\r\n    else if (results.successList.length === 4) successCount = 'Four';\r\n    else if (results.successList.length === 5) successCount = 'Five';\r\n    else successCount = results.successList.length.toLocaleString();\r\n\r\n    return <>\r\n        <b style={{ color: haveErrorsOrWarnings ? 'limegreen' : 'green' }}>{successCount.toLocaleString()} check{results.successList.length === 1 ? '' : 's'} completed</b>{results.successList.length ? ':' : ''}\r\n        <RenderSuccessesColored results={results} />\r\n        {haveErrorsOrWarnings ? <RenderSevereMediumLow results={results} /> : \"\"}\r\n    </>;\r\n}\r\n\r\nexport function RenderSuccessesWarningsGradient({ results }) {\r\n    // console.log(\"In RenderSuccessesWarningsGradient\");\r\n\r\n    // consoleLogObject('RenderSuccessesWarningsGradient results', results);\r\n\r\n    let successCount;\r\n    if (results.successList.length === 1) successCount = 'One';\r\n    else if (results.successList.length === 2) successCount = 'Two';\r\n    else if (results.successList.length === 3) successCount = 'Three';\r\n    else if (results.successList.length === 4) successCount = 'Four';\r\n    else if (results.successList.length === 5) successCount = 'Five';\r\n    else successCount = results.successList.length.toLocaleString();\r\n\r\n    return <>\r\n        <b style={{ color: results.warningList.length ? 'limegreen' : 'green' }}>{successCount.toLocaleString()} check{results.successList.length === 1 ? '' : 's'} completed</b>{results.successList.length ? ':' : ''}\r\n        <RenderSuccessesColored results={results} />\r\n        <b style={{ color: results.warningList.length ? 'orange' : 'green' }}>{results.warningList.length.toLocaleString()} warning notice{results.warningList.length === 1 ? '' : 's'}</b>{results.warningList.length ? ':' : ''}\r\n        <small style={{ color: 'Gray' }}>{results.numSuppressedWarnings ? \" (\" + results.numSuppressedWarnings.toLocaleString() + \" similar one\" + (results.numSuppressedWarnings === 1 ? '' : 's') + \" suppressed)\" : ''}</small>\r\n        {results.warningList.length ? <RenderWarningsGradient results={results} /> : \"\"}\r\n    </>;\r\n}\r\n\r\n\r\nexport function RenderElapsedTime({ elapsedSeconds }) {\r\n    const seconds = Math.round(elapsedSeconds % 60);\r\n    let remainingTime = Math.floor(elapsedSeconds / 60);\r\n    const minutes = Math.round(remainingTime % 60);\r\n    remainingTime = Math.floor(remainingTime / 60);\r\n    const hours = Math.round(remainingTime % 24);\r\n    remainingTime = Math.floor(remainingTime / 24);\r\n    console.assert(remainingTime === 0, `Elapsed time also contains ${remainingTime} days`);\r\n    return <>{hours ? `${hours} hour` : ''}{hours && hours !== 1 ? 's' : ''}{hours ? ', ' : ''}{minutes ? `${minutes} minute` : ''}{minutes && minutes !== 1 ? 's' : ''}{minutes ? ', ' : ''}{seconds} second{seconds === 1 ? '' : 's'}</>;\r\n}\r\n","export * from './books';\r\n","export function isWhitespace(myString) {\r\n    if (/^\\s+$/.test(myString)) return true;\r\n    return false;\r\n}\r\n\r\n\r\nexport function countOccurrences(mainString, subString, allowOverlapping = false) {\r\n    // Adapted from https://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string\r\n\r\n    mainString += '';\r\n    subString += '';\r\n    if (subString.length <= 0) return (mainString.length + 1);\r\n\r\n    let n = 0,\r\n        pos = 0,\r\n        step = allowOverlapping ? 1 : subString.length;\r\n\r\n    while (true) {\r\n        pos = mainString.indexOf(subString, pos);\r\n        if (pos >= 0) {\r\n            ++n;\r\n            pos += step;\r\n        } else break;\r\n    }\r\n    return n;\r\n}\r\n// end of countOccurrences function\r\n","import checkTextField from './field-text-check';\r\n\r\n\r\nconst MARKDOWN_VALIDATOR_VERSION_STRING = '0.3.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nfunction checkMarkdownText(textName, markdownText, givenLocation, optionalCheckingOptions) {\r\n    /* This function is optimised for checking the entire markdown file, i.e., all lines.\r\n\r\n    Note: This function does not check that any link targets in the markdown are valid links.\r\n\r\n     Returns a result object containing a successList and a noticeList\r\n     */\r\n    // console.log(`checkMarkdownText(${textName}, ${markdownText.length}, ${givenLocation})…`);\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    // if (textName) ourLocation = ` in ${textName}${ourLocation}`;\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (mdtcError) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(\"Using default extractLength=\" + extractLength);\r\n    }\r\n    // else\r\n        // console.log(\"Using supplied extractLength=\" + extractLength, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    // const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    // const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(\"Using halfLength=\" + halfLength, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    const result = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(\"checkMarkdownText success: \" + successString);\r\n        result.successList.push(successString);\r\n    }\r\n    function addNotice6(noticeObject) {\r\n        // console.log(`checkMarkdownText addNotice6: (priority=${noticeObject.priority}) ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : \"\"}${noticeObject.extract ? \" \" + extract : \"\"}${noticeObject.location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"cMdT addNotice6: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `cMdT addNotice6: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"cMdT addNotice6: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `cMdT addNotice6: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(characterIndex !== undefined, \"cMdT addNotice6: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cMdT addNotice6: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"cMdT addNotice6: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cMdT addNotice6: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"cMdT addNotice6: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `cMdT addNotice6: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        result.noticeList.push({ ...noticeObject, filename:textName });\r\n    }\r\n    // end of addNotice6 function\r\n\r\n    function ourCheckTextField(lineNumber, fieldText, allowedLinks, optionalFieldLocation, optionalCheckingOptions) {\r\n        /**\r\n        * @description - checks the given text field and processes the returned results\r\n        * @param {String} fieldName - name of the field being checked\r\n        * @param {String} fieldText - the actual text of the field being checked\r\n        * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false\r\n        * @param {String} optionalFieldLocation - description of where the field is located\r\n        * @param {Object} optionalCheckingOptions - parameters that might affect the check\r\n        */\r\n        // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n        // console.log(`cMdT ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${optionalFieldLocation}, …)`);\r\n        console.assert(lineNumber !== undefined, \"cMdT ourCheckTextField: 'lineNumber' parameter should be defined\");\r\n        console.assert(typeof lineNumber === 'number', `cMdT ourCheckTextField: 'lineNumber' parameter should be a number not a '${typeof lineNumber}'`);\r\n        console.assert(fieldText !== undefined, \"cMdT ourCheckTextField: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `cMdT ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert(allowedLinks === true || allowedLinks === false, \"cMdT ourCheckTextField: allowedLinks parameter must be either true or false\");\r\n\r\n        const dbtcResultObject = checkTextField('', fieldText, allowedLinks, optionalFieldLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(dbtcResultObject.noticeList);\r\n        // If we need to put everything through addNotice6, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of dbtcResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `MD ourCheckTextField notice length=${Object.keys(noticeEntry).length}`);\r\n            if (!noticeEntry.message.startsWith(\"Unexpected doubled * characters\") // 577 Markdown allows this\r\n                && !noticeEntry.message.startsWith(\"Unexpected * character after space\") // 191\r\n            )\r\n                addNotice6({ ...noticeEntry, lineNumber });\r\n        }\r\n    }\r\n    // end of ourCheckTextField function\r\n\r\n\r\n    function checkMarkdownLineContents(lineNumber, lineText, lineLocation) {\r\n\r\n        // console.log(`checkMarkdownLineContents for '${lineName} ${lineText}' at${lineLocation}`);\r\n        let thisText = lineText\r\n\r\n        // Remove leading and trailing hash signs\r\n        thisText = thisText.replace(/^#+|#$/g, '')\r\n        // console.log(`After removing hashes have '${thisText}'`);\r\n\r\n        // Remove leading spaces\r\n        thisText = thisText.replace(/^ +/g, '')\r\n        // console.log(`After removing leading spaces have '${thisText}'`);\r\n\r\n        // // Remove leading asterisks\r\n        // thisText = thisText.replace(/^\\*/g,'')\r\n        // console.log(`After removing asterisks have '${thisText}'`);\r\n\r\n        // // Remove leading spaces again now\r\n        // thisText = thisText.replace(/^ +/g,'')\r\n        // console.log(`After removing more leading spaces have '${thisText}'`);\r\n\r\n        if (thisText)\r\n            ourCheckTextField(lineNumber, thisText, true, lineLocation, optionalCheckingOptions);\r\n    }\r\n    // end of checkMarkdownLine function\r\n\r\n\r\n    // Main code for checkMarkdownText function\r\n    const lines = markdownText.split('\\n');\r\n    // console.log(`  '${location}' has ${lines.length.toLocaleString()} total lines`);\r\n\r\n    let headerLevel = 0;\r\n    let lastNumLeadingSpaces = 0;\r\n    // let lastLineContents;\r\n    for (let n = 1; n <= lines.length; n++) {\r\n\r\n        const line = lines[n - 1];\r\n        let numLeadingSpaces;\r\n        if (line) {\r\n\r\n            const thisHeaderLevel = line.match(/^#*/)[0].length;\r\n            // console.log(`Got thisHeaderLevel=${thisHeaderLevel} for ${line}${atString}`);\r\n            if (thisHeaderLevel > headerLevel + 1)\r\n                addNotice6({priority:172, message:\"Header levels should only increment by one\", lineNumber:n, characterIndex:0, location:ourLocation});\r\n            if (thisHeaderLevel > 0)\r\n                headerLevel = thisHeaderLevel;\r\n\r\n            numLeadingSpaces = line.match(/^ */)[0].length;\r\n            // console.log(`Got numLeadingSpaces=${numLeadingSpaces} for ${line}${atString}`);\r\n            if (numLeadingSpaces && lastNumLeadingSpaces && numLeadingSpaces !== lastNumLeadingSpaces)\r\n                addNotice6({priority:472, message:\"Nesting seems confused\", lineNumber:n, characterIndex:0, location:ourLocation});\r\n\r\n            checkMarkdownLineContents(n, line, ourLocation);\r\n        } else {\r\n            // This is a blank line\r\n            numLeadingSpaces = 0;\r\n        }\r\n\r\n        // lastLineContents = line;\r\n        lastNumLeadingSpaces = numLeadingSpaces;\r\n    }\r\n\r\n    addSuccessMessage(`Checked all ${lines.length.toLocaleString()} line${lines.length === 1 ? '' : 's'}${ourLocation}.`);\r\n    if (result.noticeList)\r\n        addSuccessMessage(`checkMarkdownText v${MARKDOWN_VALIDATOR_VERSION_STRING} finished with ${result.noticeList.length ? result.noticeList.length.toLocaleString() : \"zero\"} notice${result.noticeList.length === 1 ? '' : 's'}`);\r\n    else\r\n        addSuccessMessage(`No errors or warnings found by checkMarkdownText v${MARKDOWN_VALIDATOR_VERSION_STRING}`)\r\n    // console.log(`  checkMarkdownText returning with ${result.successList.length.toLocaleString()} success(es), ${result.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(\"checkMarkdownText result is\", JSON.stringify(result));\r\n    return result;\r\n}\r\n// end of checkMarkdownText function\r\n\r\n\r\nexport default checkMarkdownText;\r\n","import checkTextField from './field-text-check';\r\n\r\n\r\nconst PLAIN_TEXT_VALIDATOR_VERSION_STRING = '0.1.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nfunction checkPlainText(textName, plainText, givenLocation, optionalCheckingOptions) {\r\n    /* This function is optimised for checking the entire text, i.e., all lines.\r\n\r\n     Returns a result object containing a successList and a noticeList\r\n     */\r\n    console.log(`checkPlainText(${textName}, ${plainText.length}, ${givenLocation}, ${JSON.stringify(optionalCheckingOptions)})…`);\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    if (textName) ourLocation = ` in ${textName}${ourLocation}`;\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (ptcError) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    // const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    // const halfLengthPlus = Math.floor((extractLength+1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    const cptResult = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(`checkPlainText success: ${successString}`);\r\n        cptResult.successList.push(successString);\r\n    }\r\n    function addNotice9(noticeObject) {\r\n        // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n        // console.log(`checkPlainText notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"cPT addNotice9: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `cPT addNotice9: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"cPT addNotice9: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `cPT addNotice9: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        console.assert(noticeObject.bookID !== undefined, \"cPT addNotice9: 'bookID' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cPT addNotice9: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract!==undefined, \"cPT addNotice9: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cPT addNotice9: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"cPT addNotice9: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `cPT addNotice9: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        cptResult.noticeList.push(noticeObject);\r\n    }\r\n\r\n    function ourCheckTextField(lineNumber, fieldText, allowedLinks, optionalFieldLocation, optionalCheckingOptions) {\r\n        /**\r\n        * @description - checks the given text field and processes the returned results\r\n        * @param {String} fieldName - name of the field being checked\r\n        * @param {String} fieldText - the actual text of the field being checked\r\n        * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false\r\n        * @param {String} optionalFieldLocation - description of where the field is located\r\n        * @param {Object} optionalCheckingOptions - parameters that might affect the check\r\n        */\r\n        // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n        // console.log(`cPT ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${fieldLocation}, …)`);\r\n        console.assert(lineNumber !== undefined, \"cPT ourCheckTextField: 'lineNumber' parameter should be defined\");\r\n        console.assert(typeof lineNumber === 'number', `cPT ourCheckTextField: 'fieldName' parameter should be a string not a '${typeof lineNumber}'`);\r\n        console.assert(fieldText !== undefined, \"cPT ourCheckTextField: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `cPT ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert(allowedLinks === true || allowedLinks === false, \"cPT ourCheckTextField: allowedLinks parameter must be either true or false\");\r\n\r\n        const resultObject = checkTextField('', fieldText, allowedLinks, optionalFieldLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // cptResult.noticeList = cptResult.noticeList.concat(resultObject.noticeList);\r\n        // If we need to put everything through addNotice9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of resultObject.noticeList)\r\n            addNotice9({ ...noticeEntry, lineNumber });\r\n    }\r\n    // end of ourCheckTextField function\r\n\r\n    function checkPlainLineContents(lineNumber, lineText, lineLocation) {\r\n\r\n        // console.log(`checkPlainLineContents for '${lineName}', '${lineText}' at${lineLocation}`);\r\n        let thisText = lineText.trimStart(); // So we don't get \"leading space\" and \"doubled spaces\" errors\r\n\r\n        if (thisText)\r\n            ourCheckTextField(lineNumber, thisText, false, lineLocation, optionalCheckingOptions);\r\n    }\r\n    // end of checkPlainLine function\r\n\r\n\r\n    // Main code for checkPlainText function\r\n    const lines = plainText.split('\\n');\r\n    // console.log(`  '${location}' has ${lines.length.toLocaleString()} total lines`);\r\n\r\n    // let headerLevel = 0;\r\n    // let lastNumLeadingSpaces = 0;\r\n    // let lastLineContents;\r\n    for (let n = 1; n <= lines.length; n++) {\r\n\r\n        const line = lines[n - 1];\r\n        if (line) {\r\n            checkPlainLineContents(n, line, ourLocation);\r\n        } else {\r\n            // This is a blank line\r\n        }\r\n\r\n        // lastLineContents = line;\r\n    }\r\n\r\n    addSuccessMessage(`Checked all ${lines.length.toLocaleString()} line${lines.length === 1 ? '' : 's'}${ourLocation}.`);\r\n    if (cptResult.noticeList)\r\n        addSuccessMessage(`checkPlainText v${PLAIN_TEXT_VALIDATOR_VERSION_STRING} finished with ${cptResult.noticeList.length ? cptResult.noticeList.length.toLocaleString() : \"zero\"} notice${cptResult.noticeList.length === 1 ? '' : 's'}`);\r\n    else\r\n        addSuccessMessage(`No errors or warnings found by checkPlainText v${PLAIN_TEXT_VALIDATOR_VERSION_STRING}`)\r\n    // console.log(`  checkPlainText returning with ${result.successList.length.toLocaleString()} success(es), ${result.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(\"checkPlainText result is\", JSON.stringify(result));\r\n    return cptResult;\r\n}\r\n// end of checkPlainText function\r\n\r\n\r\nexport default checkPlainText;\r\n","import * as books from './books/books';\r\nimport checkTextField from './field-text-check';\r\nimport checkMarkdownText from './markdown-text-check';\r\nimport checkTAReference from './ta-reference-check';\r\nimport checkTNLinks from './tn-links-check';\r\nimport checkOriginalLanguageQuote from './quote-check';\r\n\r\n\r\n// const TN_TABLE_ROW_VALIDATOR_VERSION_STRING = '0.4.2';\r\n\r\nconst NUM_EXPECTED_TN_TSV_FIELDS = 9; // so expects 8 tabs per line\r\nconst EXPECTED_TN_HEADING_LINE = 'Book\\tChapter\\tVerse\\tID\\tSupportReference\\tOrigQuote\\tOccurrence\\tGLQuote\\tOccurrenceNote';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nasync function checkTN_TSVDataRow(languageCode, line, bookID, C, V, givenRowLocation, optionalCheckingOptions) {\r\n    /**\r\n    * @description - Checks one TSV data row of translation notes (TN)\r\n    * @param {String} line - the TSV line to be checked\r\n    * @param {String} bookID - 3-character UPPERCASE USFM book identifier\r\n    * @param {String} C - chapter number string\r\n    * @param {String} V - verse number string\r\n    * @param {String} givenRowLocation - description of where the line is located\r\n    * @param {Object} optionalCheckingOptions - may contain extractLength parameter\r\n    * @return {Object} - containing noticeList\r\n    */\r\n    /* This function is only for checking one data row\r\n          and the function doesn't assume that it has any previous context.\r\n\r\n        It's designed to be able to quickly show errors for a single row being displayed/edited.\r\n\r\n        Returns an object containing the noticeList.\r\n    */\r\n    // console.log(`checkTN_TSVDataRow(${bookID}, ${line}, ${givenRowLocation}, ${JSON.stringify(optionalCheckingOptions)})…`);\r\n    console.assert(line !== undefined, \"checkTN_TSVDataRow: 'line' parameter should be defined\");\r\n    console.assert(typeof line === 'string', `checkTN_TSVDataRow: 'line' parameter should be a string not a '${typeof line}'`);\r\n    console.assert(bookID !== undefined, \"checkTN_TSVDataRow: 'bookID' parameter should be defined\");\r\n    console.assert(typeof bookID === 'string', `checkTN_TSVDataRow: 'bookID' parameter should be a string not a '${typeof bookID}'`);\r\n    console.assert(bookID.length === 3, `checkTN_TSVDataRow: 'bookID' parameter should be three characters long not ${bookID.length}`);\r\n    console.assert(books.isValidBookID(bookID), `checkTN_TSVDataRow: '${bookID}' is not a valid USFM book identifier`);\r\n    // console.assert(C !== undefined, \"checkTN_TSVDataRow: 'C' parameter should be defined\");\r\n    if (C) console.assert(typeof C === 'string', `checkTN_TSVDataRow: 'C' parameter should be a string not a '${typeof C}'`);\r\n    // console.assert(V !== undefined, \"checkTN_TSVDataRow: 'V' parameter should be defined\");\r\n    if (V) console.assert(typeof V === 'string', `checkTN_TSVDataRow: 'V' parameter should be a string not a '${typeof V}'`);\r\n    console.assert(givenRowLocation !== undefined, \"checkTN_TSVDataRow: 'givenRowLocation' parameter should be defined\");\r\n    console.assert(typeof givenRowLocation === 'string', `checkTN_TSVDataRow: 'givenRowLocation' parameter should be a string not a '${typeof givenRowLocation}'`);\r\n\r\n    let ourRowLocation = givenRowLocation;\r\n    if (ourRowLocation && ourRowLocation[0] !== ' ') ourRowLocation = ` ${ourRowLocation}`;\r\n\r\n    let drResult = { noticeList: [] };\r\n\r\n    function addNotice6to9(noticeObject) {\r\n        /**\r\n        * @description - adds a new notice entry, adding bookID,C,V to the given fields\r\n        * @param {Number} priority - notice priority from 1 (lowest) to 999 (highest)\r\n        * @param {String} message - the text of the notice message\r\n        * @param {String} rowID - 4-character row ID field\r\n        * @param {Number} lineNumber - one-based line number\r\n        * @param {Number} characterIndex - zero-based index of where the issue occurs in the line\r\n        * @param {String} extract - short extract from the line centred on the problem (if available)\r\n        * @param {String} location - description of where the issue is located\r\n        */\r\n        // console.log(`Annotation TSV Row Notice: (priority=${priority}) ${message}, ${characterIndex}, ${extract}, ${location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"checkTN_TSVDataRow addNotice6to9: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `checkTN_TSVDataRow addNotice6to9: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"checkTN_TSVDataRow addNotice6to9: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `checkTN_TSVDataRow addNotice6to9: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(lineNumber !== undefined, \"checkTN_TSVDataRow addNotice6to9: 'lineNumber' parameter should be defined\");\r\n        // console.assert(typeof lineNumber === 'number', `checkTN_TSVDataRow addNotice6to9: 'lineNumber' parameter should be a number not a '${typeof lineNumber}': ${lineNumber}`);\r\n        // console.assert(characterIndex !== undefined, \"checkTN_TSVDataRow addNotice6to9: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `checkTN_TSVDataRow addNotice6to9: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"checkTN_TSVDataRow addNotice6to9: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `checkTN_TSVDataRow addNotice6to9: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"checkTN_TSVDataRow addNotice6to9: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `checkTN_TSVDataRow addNotice6to9: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        // Also uses the given bookID,C,V, parameters from the main function call\r\n        drResult.noticeList.push({ ...noticeObject, bookID, C, V });\r\n    }\r\n\r\n    function ourMarkdownTextChecks(rowID, fieldName, fieldText, allowedLinks, rowLocation, optionalCheckingOptions) {\r\n        /**\r\n        * @description - checks the given markdown field and processes the returned results\r\n        * @param {String} rowID - 4-character row ID field\r\n        * @param {String} fieldName - name of the field being checked\r\n        * @param {String} fieldText - the actual text of the field being checked\r\n        * @param {} allowedLinks - true if links are allowed in the field, otherwise false\r\n        * @param {String} rowLocation - description of where the line is located\r\n        * @param {Object} optionalCheckingOptions - parameters that might affect the check\r\n        */\r\n        // Does markdown checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n\r\n        // We don't currently use the allowedLinks parameter\r\n\r\n        // console.log(`checkTN_TSVDataRow ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkTN_TSVDataRow ourMarkdownTextChecks: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkTN_TSVDataRow ourMarkdownTextChecks: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        // console.assert(fieldName !== undefined, \"checkTN_TSVDataRow ourMarkdownTextChecks: 'fieldName' parameter should be defined\");\r\n        // console.assert(typeof fieldName === 'string', `checkTN_TSVDataRow ourMarkdownTextChecks: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(fieldName === 'OccurrenceNote', \"checkTN_TSVDataRow ourMarkdownTextChecks: Only run this check on OccurrenceNotes\")\r\n        console.assert(fieldText !== undefined, \"checkTN_TSVDataRow ourMarkdownTextChecks: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `checkTN_TSVDataRow ourMarkdownTextChecks: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert(allowedLinks === true || allowedLinks === false, \"checkTN_TSVDataRow ourMarkdownTextChecks: allowedLinks parameter must be either true or false\");\r\n        console.assert(rowLocation.indexOf(fieldName) < 0, `checkTN_TSVDataRow ourMarkdownTextChecks: 'rowLocation' parameter should be not contain fieldName=${fieldName}`);\r\n\r\n        const cmtResultObject = checkMarkdownText(fieldName, fieldText, rowLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(cmtResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of cmtResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourMarkdownTextChecks notice length=${Object.keys(noticeEntry).length}`);\r\n            // NOTE: Ellipses in OccurrenceNote have the normal meaning\r\n            //          not like the specialised meaning in the snippet fields OrigQuote and GLQuote\r\n            if (noticeEntry.priority !== 178 && noticeEntry.priority !== 179 // unexpected space after ellipse, ellipse after space\r\n                && !noticeEntry.message.startsWith(\"Unexpected … character after space\") // 191\r\n            )\r\n                addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourMarkdownTextChecks function\r\n\r\n    function ourCheckTextField(rowID, fieldName, fieldText, allowedLinks, rowLocation, optionalCheckingOptions) {\r\n        /**\r\n        * @description - checks the given text field and processes the returned results\r\n        * @param {String} rowID - 4-character row ID field\r\n        * @param {String} fieldName - name of the field being checked\r\n        * @param {String} fieldText - the actual text of the field being checked\r\n        * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false\r\n        * @param {String} rowLocation - description of where the line is located\r\n        * @param {Object} optionalCheckingOptions - parameters that might affect the check\r\n        */\r\n        // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n\r\n        // console.log(`checkTN_TSVDataRow ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkTN_TSVDataRow ourCheckTextField: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkTN_TSVDataRow ourCheckTextField: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        console.assert(fieldName !== undefined, \"checkTN_TSVDataRow ourCheckTextField: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `checkTN_TSVDataRow ourCheckTextField: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(fieldText !== undefined, \"checkTN_TSVDataRow ourCheckTextField: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `checkTN_TSVDataRow ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert(allowedLinks === true || allowedLinks === false, \"checkTN_TSVDataRow ourCheckTextField: allowedLinks parameter must be either true or false\");\r\n        console.assert(rowLocation.indexOf(fieldName) < 0, `checkTN_TSVDataRow ourCheckTextField: 'rowLocation' parameter should be not contain fieldName=${fieldName}`);\r\n\r\n        const dbtcResultObject = checkTextField(fieldName, fieldText, allowedLinks, rowLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(dbtcResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of dbtcResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourCheckTextField notice length=${Object.keys(noticeEntry).length}`);\r\n            addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourCheckTextField function\r\n\r\n    async function ourCheckTAReference(rowID, fieldName, taLinkText, rowLocation, optionalCheckingOptions) {\r\n        // Checks that the TA reference can be found\r\n\r\n        // Updates the global list of notices\r\n\r\n        // console.log(`checkTN_TSVDataRow ourCheckTAReference(${fieldName}, (${taLinkText.length}) '${taLinkText}', ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkTN_TSVDataRow ourCheckTAReference: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkTN_TSVDataRow ourCheckTAReference: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        console.assert(fieldName !== undefined, \"checkTN_TSVDataRow ourCheckTAReference: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `checkTN_TSVDataRow ourCheckTAReference: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(taLinkText !== undefined, \"checkTN_TSVDataRow ourCheckTAReference: 'taLinkText' parameter should be defined\");\r\n        console.assert(typeof taLinkText === 'string', `checkTN_TSVDataRow ourCheckTAReference: 'taLinkText' parameter should be a string not a '${typeof taLinkText}'`);\r\n        console.assert(rowLocation.indexOf(fieldName) < 0, `checkTN_TSVDataRow ourCheckTAReference: 'rowLocation' parameter should be not contain fieldName=${fieldName}`);\r\n\r\n        const coqResultObject = await checkTAReference(fieldName, taLinkText, rowLocation, { ...optionalCheckingOptions, taRepoLanguageCode: languageCode });\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(coqResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of coqResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourCheckTAReference notice length=${Object.keys(noticeEntry).length}`);\r\n            addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourCheckTAReference function\r\n\r\n    async function ourCheckTNOriginalLanguageQuote(rowID, fieldName, fieldText, rowLocation, optionalCheckingOptions) {\r\n        // Checks that the Hebrew/Greek quote can be found in the original texts\r\n\r\n        // Uses the bookID,C,V values from the main function call\r\n\r\n        // Updates the global list of notices\r\n\r\n        // console.log(`checkTN_TSVDataRow ourCheckTNOriginalLanguageQuote(${fieldName}, (${fieldText.length}) '${fieldText}', ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkTN_TSVDataRow ourMarkdownTextChecks: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkTN_TSVDataRow ourMarkdownTextChecks: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        console.assert(fieldName !== undefined, \"checkTN_TSVDataRow ourMarkdownTextChecks: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `checkTN_TSVDataRow ourMarkdownTextChecks: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(fieldText !== undefined, \"checkTN_TSVDataRow ourCheckTNOriginalLanguageQuote: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `checkTN_TSVDataRow ourCheckTNOriginalLanguageQuote: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert(rowLocation.indexOf(fieldName) < 0, `checkTN_TSVDataRow ourCheckTNOriginalLanguageQuote: 'rowLocation' parameter should be not contain fieldName=${fieldName}`);\r\n\r\n        const coqResultObject = await checkOriginalLanguageQuote(fieldName, fieldText, bookID, C, V, rowLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(coqResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of coqResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourCheckTNOriginalLanguageQuote notice length=${Object.keys(noticeEntry).length}`);\r\n            addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourCheckTNOriginalLanguageQuote function\r\n\r\n    async function ourCheckTNLinks(rowID, fieldName, taLinkText, rowLocation, optionalCheckingOptions) {\r\n        // Checks that the TA reference can be found\r\n\r\n        // Updates the global list of notices\r\n\r\n        // console.log(`checkTN_TSVDataRow ourCheckTNLinks(${fieldName}, (${taLinkText.length}) '${taLinkText}', ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkTN_TSVDataRow ourCheckTNLinks: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkTN_TSVDataRow ourCheckTNLinks: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        console.assert(fieldName !== undefined, \"checkTN_TSVDataRow ourCheckTNLinks: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `checkTN_TSVDataRow ourCheckTNLinks: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(taLinkText !== undefined, \"checkTN_TSVDataRow ourCheckTNLinks: 'taLinkText' parameter should be defined\");\r\n        console.assert(typeof taLinkText === 'string', `checkTN_TSVDataRow ourCheckTNLinks: 'taLinkText' parameter should be a string not a '${typeof taLinkText}'`);\r\n\r\n        const coqResultObject = await checkTNLinks(bookID, fieldName, taLinkText, rowLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(coqResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of coqResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourCheckTNLinks notice length=${Object.keys(noticeEntry).length}`);\r\n            addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourCheckTNLinks function\r\n\r\n\r\n    // Main code for checkTN_TSVDataRow function\r\n    if (line === EXPECTED_TN_HEADING_LINE) // Assume it must be ok\r\n        return drResult; // We can't detect if it's in the wrong place\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (tlcELerror) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    // const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    // const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    const lowercaseBookID = bookID.toLowerCase();\r\n    let numChaptersThisBook;\r\n    try {\r\n        numChaptersThisBook = books.chaptersInBook(lowercaseBookID).length;\r\n    } catch (tlcNCerror) {\r\n        addNotice6to9({ priority: 979, message: \"Invalid book identifier passed to checkTN_TSVDataRow\", location: ` '${bookID}' in first parameter: ${tlcNCerror}` });\r\n    }\r\n    const haveGoodBookID = numChaptersThisBook !== undefined;\r\n\r\n    let fields = line.split('\\t');\r\n    if (fields.length === NUM_EXPECTED_TN_TSV_FIELDS) {\r\n        const [B, C, V, rowID, supportReference, origQuote, occurrence, GLQuote, occurrenceNote] = fields;\r\n        // let withString = ` with '${rowID}'${inString}`;\r\n        // let CV_withString = ` ${C}:${V}${withString}`;\r\n        // let atString = ` at ${B} ${C}:${V} (${rowID})${inString}`;\r\n\r\n        // Check the fields one-by-one\r\n        if (B.length) {\r\n            if (B !== bookID)\r\n                addNotice6to9({ priority: 978, message: `Wrong '${B}' book identifier`, rowID, location: ` (expected '${bookID}')${ourRowLocation}` });\r\n        }\r\n        else\r\n            addNotice6to9({ priority: 977, message: \"Missing book identifier\", characterIndex: 0, rowID, location: ourRowLocation });\r\n\r\n        let numVersesThisChapter, haveGoodChapterNumber;\r\n        if (C.length) {\r\n            if (C === 'front') { }\r\n            else if (/^\\d+$/.test(C)) {\r\n                let intC = Number(C);\r\n                if (intC === 0) {\r\n                    addNotice6to9({ priority: 824, message: `Invalid zero chapter number`, extract: C, rowID, location: ourRowLocation });\r\n                    haveGoodChapterNumber = false;\r\n                }\r\n                // TODO: Does this next section need rewriting (see verse check below)???\r\n                else if (intC > numChaptersThisBook) {\r\n                    addNotice6to9({ priority: 823, message: `Invalid large chapter number`, extract: C, rowID, location: ourRowLocation });\r\n                    haveGoodChapterNumber = false;\r\n                }\r\n                try {\r\n                    numVersesThisChapter = books.versesInChapter(lowercaseBookID, intC);\r\n                    haveGoodChapterNumber = true;\r\n                } catch (tlcNVerror) {\r\n                    if (!haveGoodBookID)\r\n                        // addNotice6to9({priority:500, \"Invalid chapter number\", rowLocation);\r\n                        // else\r\n                        addNotice6to9({ priority: 822, message: \"Unable to check chapter number\", rowID, location: ` '${C}'${ourRowLocation}` });\r\n                    haveGoodChapterNumber = false;\r\n                }\r\n            }\r\n            else\r\n                addNotice6to9({ priority: 821, message: \"Bad chapter number\", rowID, location: ` '${C}' with${ourRowLocation}` });\r\n        }\r\n        else\r\n            addNotice6to9({ priority: 820, message: \"Missing chapter number\", rowID, location: ` ?:${V}${ourRowLocation}` });\r\n\r\n        if (V.length) {\r\n            if (V === 'intro') { }\r\n            else if (/^\\d+$/.test(V)) {\r\n                let intV = Number(V);\r\n                if (intV === 0)\r\n                    addNotice6to9({ priority: 814, message: `Invalid zero '${V}' verse number`, rowID, location: ourRowLocation });\r\n                else {\r\n                    if (haveGoodChapterNumber) {\r\n                        if (intV > numVersesThisChapter)\r\n                            addNotice6to9({ priority: 813, message: `Invalid large '${V}' verse number`, rowID, location: ` for chapter ${C}${ourRowLocation}` });\r\n                    } else\r\n                        addNotice6to9({ priority: 812, message: \"Unable to check verse number\", rowID, location: ` '${V}'${ourRowLocation}` });\r\n                }\r\n            }\r\n            else\r\n                addNotice6to9({ priority: 811, message: \"Bad verse number\", rowID, location: ` '${V}'${ourRowLocation}` });\r\n        }\r\n        else\r\n            addNotice6to9({ priority: 810, message: \"Missing verse number\", rowID, location: ` after ${C}:?${ourRowLocation}` });\r\n\r\n        if (!rowID.length)\r\n            addNotice6to9({ priority: 779, message: \"Missing ID field\", location: ourRowLocation });\r\n        else {\r\n            if (rowID.length !== 4)\r\n                addNotice6to9({ priority: 778, message: \"ID should be exactly 4 characters\", rowID, location: ` (not ${rowID.length})${ourRowLocation}` });\r\n            else if ('abcdefghijklmnopqrstuvwxyz0123456789'.indexOf(rowID[0]) < 0)\r\n                addNotice6to9({ priority: 176, message: \"ID should start with a lowercase letter or digit\", characterIndex: 0, rowID, location: ` (not '${rowID[0]}')${ourRowLocation}` });\r\n            else if ('abcdefghijklmnopqrstuvwxyz0123456789'.indexOf(rowID[3]) < 0)\r\n                addNotice6to9({ priority: 175, message: \"ID should end with a lowercase letter or digit\", characterIndeX: 3, rowID, location: ` (not '${rowID[3]}')${ourRowLocation}` });\r\n            else if ('abcdefghijklmnopqrstuvwxyz0123456789'.indexOf(rowID[1]) < 0)\r\n                addNotice6to9({ priority: 174, message: \"ID characters should only be lowercase letters, digits, or hypen\", characterIndex: 1, rowID, location: ` (not '${rowID[1]}')${ourRowLocation}` });\r\n            else if ('abcdefghijklmnopqrstuvwxyz0123456789'.indexOf(rowID[2]) < 0)\r\n                addNotice6to9({ priority: 173, message: \"ID characters should only be lowercase letters, digits, or hypen\", characterIndex: 2, rowID, location: ` (not '${rowID[2]}')${ourRowLocation}` });\r\n        }\r\n\r\n        if (supportReference.length) { // need to check TN against TA\r\n            ourCheckTextField(rowID, 'SupportReference', supportReference, true, ourRowLocation, optionalCheckingOptions);\r\n            await ourCheckTAReference(rowID, 'SupportReference', supportReference, ourRowLocation, optionalCheckingOptions);\r\n        }\r\n        // // TODO: Check if this is really required????\r\n        // else if (/^\\d+$/.test(C) && /^\\d+$/.test(V)) // C:V are both digits\r\n        //     addNotice6to9({ priority: 877, message: \"Missing SupportReference field\", fieldName: 'SupportReference', rowID, location: ourRowLocation });\r\n\r\n        if (origQuote.length) { // need to check UTN against UHB and UGNT\r\n            ourCheckTextField(rowID, 'OrigQuote', origQuote, false, ourRowLocation, optionalCheckingOptions);\r\n            await ourCheckTNOriginalLanguageQuote(rowID, 'OrigQuote', origQuote, ourRowLocation, optionalCheckingOptions);\r\n        }\r\n        else // TODO: Find more details about when these fields are really compulsory (and when they're not, e.g., for 'intro') ???\r\n            if (V !== 'intro' && occurrence !== '0')\r\n                addNotice6to9({ priority: 919, message: \"Missing OrigQuote field\", rowID, location: ourRowLocation });\r\n\r\n        if (occurrence.length) { // This should usually be a digit\r\n            if (occurrence === '0') { // zero means that it doesn't occur\r\n                if (origQuote.length)\r\n                    addNotice6to9({ priority: 550, message: \"Invalid zero occurrence field when we have an original quote\", rowID, location: ourRowLocation });\r\n                // if (V !== 'intro')\r\n                //     addNotice6to9({priority:500, message:\"Invalid zero occurrence field\", rowID, location:rowLocation);\r\n            }\r\n            else if (occurrence === '-1') // TODO check the special conditions when this can occur???\r\n                ;\r\n            else if ('12345'.indexOf(occurrence) < 0) // it's not one of these integers\r\n                addNotice6to9({ priority: 792, message: `Invalid '${occurrence}' occurrence field`, rowID, location: ourRowLocation });\r\n        }\r\n\r\n        if (GLQuote.length) { // TODO: need to check UTN against ULT\r\n            if (V !== 'intro')\r\n                ourCheckTextField(rowID, 'GLQuote', GLQuote, false, ourRowLocation, optionalCheckingOptions);\r\n        }\r\n        // else // TODO: Find out if these fields are really compulsory (and when they're not, e.g., for 'intro') ???\r\n        //     if (V !== 'intro')\r\n        //         addNotice6to9({ priority: 275, message: \"Missing GLQuote field\", rowID, location: ourRowLocation });\r\n\r\n        if (occurrenceNote.length) {\r\n            ourMarkdownTextChecks(rowID, 'OccurrenceNote', occurrenceNote, true, ourRowLocation, optionalCheckingOptions);\r\n            await ourCheckTNLinks(rowID, 'OccurrenceNote', occurrenceNote, ourRowLocation, optionalCheckingOptions);\r\n        }\r\n        else // TODO: Find out if these fields are really compulsory (and when they're not, e.g., for 'intro') ???\r\n            addNotice6to9({ priority: 274, message: \"Missing OccurrenceNote field\", rowID, location: ourRowLocation });\r\n\r\n    } else\r\n        addNotice6to9({ priority: 861, message: `Found wrong number of TSV fields (expected ${NUM_EXPECTED_TN_TSV_FIELDS})`, extract: `Found ${fields.length} field${fields.length === 1 ? '' : 's'}`, location: ourRowLocation });\r\n\r\n    // console.log(`  checkTN_TSVDataRow returning with ${drResult.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(\"checkTN_TSVDataRow result is\", JSON.stringify(drResult));\r\n    return drResult; // object with noticeList only\r\n}\r\n// end of checkTN_TSVDataRow function\r\n\r\nexport default checkTN_TSVDataRow;\r\n","import { getFileCached } from '../core/getApi';\r\n// import { consoleLogObject } from '../core/utilities';\r\n\r\n\r\n// const TA_REFERENCE_VALIDATOR_VERSION_STRING = '0.2.2';\r\n\r\n// const DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nasync function checkTAReference(fieldName, fieldText, givenLocation, optionalCheckingOptions) {\r\n    // This is for the case of the full SupportReference field being the article link\r\n    //  which is assumed to be in the translate part of the TA manual.\r\n\r\n    // We fetch the TA link from Door43 to test that it's really there\r\n    //  -- you can control this with:\r\n    //      optionalCheckingOptions.taRepoUsername\r\n    //      optionalCheckingOptions.taRepoBranch (or tag)\r\n    //      optionalCheckingOptions.taRepoLanguageCode\r\n    //      optionalCheckingOptions.taRepoSectionName\r\n\r\n    // console.log(`checkTAReference v${TA_REFERENCE_VALIDATOR_VERSION_STRING} (${fieldName}, (${fieldText.length}) '${fieldText}', ${givenLocation}, …)`);\r\n    console.assert(fieldName !== undefined, \"checkTAReference: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof fieldName === 'string', `checkTAReference: 'fieldText' parameter should be a string not a '${typeof fieldName}'`);\r\n    console.assert(fieldText !== undefined, \"checkTAReference: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof fieldText === 'string', `checkTAReference: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n    console.assert(givenLocation !== undefined, \"checkTAReference: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof givenLocation === 'string', `checkTAReference: 'fieldText' parameter should be a string not a '${typeof givenLocation}'`);\r\n    console.assert(fieldName === 'SupportReference', `Unexpected checkTAReference fieldName='${fieldName}'`); // so far\r\n    console.assert(givenLocation.indexOf(fieldName) < 0, `checkTAReference: 'givenLocation' parameter should be not contain fieldName=${fieldName}`);\r\n\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    // if (fieldName) ourLocation = ` in ${fieldName}${ourLocation}`;\r\n\r\n    const ctarResult = { noticeList: [] };\r\n\r\n    function addNotice6(noticeObject) {\r\n        // console.log(`checkTAReference Notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"cTAref addNotice6: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `cTAref addNotice6: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"cTAref addNotice6: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `cTAref addNotice6: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(characterIndex !== undefined, \"cTAref addNotice6: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cTAref addNotice6: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"cTAref addNotice6: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cTAref addNotice6: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"cTAref addNotice6: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `cTAref addNotice6: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        ctarResult.noticeList.push(noticeObject);\r\n    }\r\n\r\n\r\n    // Main code for checkTAReference\r\n    /*\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (trcELerror) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n        // console.log(`Using supplied extractLength=${extractLength}`, \"cf. default=\"+DEFAULT_EXTRACT_LENGTH);\r\n    const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, \"halfLengthPlus=\"+halfLengthPlus);\r\n    */\r\n\r\n    let username;\r\n    try {\r\n        username = optionalCheckingOptions.taRepoUsername;\r\n    } catch (trcUNerror) { }\r\n    if (!username) username = 'unfoldingWord'; // or Door43-Catalog ???\r\n    let branch;\r\n    try {\r\n        branch = optionalCheckingOptions.taRepoBranch;\r\n    } catch (trcBRerror) { }\r\n    if (!branch) branch = 'master';\r\n    let languageCode;\r\n    try {\r\n        languageCode = optionalCheckingOptions.taRepoLanguageCode;\r\n    } catch (trcLCerror) { }\r\n    if (!languageCode) languageCode = 'en';\r\n    let sectionName;\r\n    try {\r\n        sectionName = optionalCheckingOptions.taRepoSectionName;\r\n    } catch (trcSNerror) { }\r\n    if (!sectionName) sectionName = 'translate';\r\n    const taRepoName = `${languageCode}_ta`;\r\n    const filepath = `${sectionName}/${fieldText}/01.md`; // Other files are title.md, sub-title.md\r\n\r\n    // console.log(`Need to check against ${taRepoName}`);\r\n    let taFileContent; // Not really used here -- just to show that we got something valid\r\n    try {\r\n        const getFileCached_ = (optionalCheckingOptions && optionalCheckingOptions.getFileCached) ? optionalCheckingOptions.getFileCached : getFileCached;\r\n        taFileContent = await getFileCached_({ username, repository: taRepoName, path: filepath, branch });\r\n        // console.log(\"Fetched fileContent for\", taRepoName, filepath, typeof fileContent, fileContent.length);\r\n    } catch (trcGCerror) {\r\n        console.log(\"ERROR: Failed to load\", username, taRepoName, filepath, branch, trcGCerror.message);\r\n        addNotice6({priority:888, message:`Error loading ${fieldName} TA link`, extract:fieldText, location:`${ourLocation} ${filepath}: ${trcGCerror}`});\r\n    }\r\n    if (!taFileContent)\r\n        addNotice6({priority:889, message:`Unable to find ${fieldName} TA link`, extract:fieldText, location:`${ourLocation} ${filepath}`});\r\n    else if ( taFileContent.length < 10)\r\n        addNotice6({priority:887, message:`Linked ${fieldName} TA article seems empty`, extract:fieldText, location:`${ourLocation} ${filepath}`});\r\n\r\n    // console.log(`checkTAReference is returning ${JSON.stringify(ctarResult)}`);\r\n    return ctarResult;\r\n}\r\n// end of checkTAReference function\r\n\r\n\r\nexport default checkTAReference;\r\n","import * as books from '../core/books/books';\r\nimport { getFileCached } from '../core/getApi';\r\nimport { ourParseInt } from './utilities';\r\n// import { consoleLogObject } from '../core/utilities';\r\n\r\n\r\n// const TN_LINKS_VALIDATOR_VERSION_STRING = '0.2.2';\r\n\r\n// const DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nasync function checkTNLinks(bookID, fieldName, fieldText, givenLocation, optionalCheckingOptions) {\r\n    /* This is for the case of the OccurrenceNote field containing markdown links\r\n\r\n    bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n\r\n    These notes may contain links\r\n        to TA, e.g., “(See: [[rc://en/ta/man/translate/figs-metaphor]] and …”\r\n        to TWs, e.g., “(See: [[rc://en/tw/dict/bible/other/death]] and …”\r\n        To Bibles, e.g., “… how you translated this in [Revelation 3:11](../03/11.md).”\r\n\r\n    // We fetch the TA link from Door43 to test that it's really there\r\n    //  -- you can control this with:\r\n    //      optionalCheckingOptions.taRepoUsername\r\n    //      optionalCheckingOptions.taRepoBranch (or tag)\r\n    //      optionalCheckingOptions.taRepoDefaultLanguageCode\r\n    */\r\n\r\n    // console.log(`checkTNLinks v${TN_LINKS_VALIDATOR_VERSION_STRING} ${bookID} (${fieldName}, (${fieldText.length}) '${fieldText}', ${givenLocation}, …)`);\r\n    console.assert(bookID !== undefined, \"checkTNLinks: 'bookID' parameter should be defined\");\r\n    console.assert(typeof bookID === 'string', `checkTNLinks: 'bookID' parameter should be a string not a '${typeof bookID}'`);\r\n    console.assert(bookID.length === 3, `checkTNLinks: 'bookID' parameter should be three characters long not ${bookID.length}`);\r\n    console.assert(books.isValidBookID(bookID), `checkTNLinks: '${bookID}' is not a valid USFM book identifier`);\r\n    console.assert(fieldName !== undefined, \"checkTNLinks: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof fieldName === 'string', `checkTNLinks: 'fieldText' parameter should be a string not a '${typeof fieldName}'`);\r\n    console.assert(fieldText !== undefined, \"checkTNLinks: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof fieldText === 'string', `checkTNLinks: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n    console.assert(givenLocation !== undefined, \"checkTNLinks: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof givenLocation === 'string', `checkTNLinks: 'fieldText' parameter should be a string not a '${typeof givenLocation}'`);\r\n    console.assert(fieldName === 'OccurrenceNote' || fieldName === 'Annotation', `Unexpected checkTNLinks fieldName='${fieldName}'`);\r\n\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n\r\n    const ctarResult = { noticeList: [] };\r\n\r\n    function addNotice6(noticeObject) {\r\n        // console.log(`checkTNLinks Notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"cTNlnk addNotice6: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `cTNlnk addNotice6: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"cTNlnk addNotice6: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `cTNlnk addNotice6: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(characterIndex !== undefined, \"cTNlnk addNotice6: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cTNlnk addNotice6: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"cTNlnk addNotice6: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cTNlnk addNotice6: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"cTNlnk addNotice6: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `cTNlnk addNotice6: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        ctarResult.noticeList.push(noticeObject);\r\n    }\r\n\r\n\r\n    // Main code for checkTNLinks\r\n    /*\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (trcELerror) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n        // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n    */\r\n\r\n  const getFileCached_ = (optionalCheckingOptions && optionalCheckingOptions.getFileCached) ? optionalCheckingOptions.getFileCached : getFileCached;\r\n  let username;\r\n    try {\r\n        username = optionalCheckingOptions.taRepoUsername;\r\n    } catch (trcUNerror) { }\r\n    if (!username) username = 'unfoldingWord'; // or Door43-Catalog ???\r\n    let branch;\r\n    try {\r\n        branch = optionalCheckingOptions.taRepoBranch;\r\n    } catch (trcBRerror) { }\r\n    if (!branch) branch = 'master';\r\n    let defaultLanguageCode;\r\n    try {\r\n        defaultLanguageCode = optionalCheckingOptions.taRepoLanguageCode;\r\n    } catch (trcLCerror) { }\r\n    if (!defaultLanguageCode) defaultLanguageCode = 'en';\r\n\r\n\r\n    // Check TA links like [[rc://en/ta/man/translate/figs-metaphor]]\r\n    let resultArray;\r\n    // console.log(\"checkTNLinks: Search for TA links\")\r\n    const taRegex = new RegExp('\\\\[\\\\[rc://([^ /]+?)/ta/man/([^ /]+?)/([^ \\\\]]+?)\\\\]\\\\]', 'g');\r\n    // eslint-disable-next-line no-cond-assign\r\n    while (resultArray = taRegex.exec(fieldText)) {\r\n        // console.log(`  resultArray=${JSON.stringify(resultArray)}`);\r\n        console.assert(resultArray.length === 4, `Expected 4 fields (not ${resultArray.length})`)\r\n        let languageCode = resultArray[1];\r\n        if (!languageCode || languageCode === '*') languageCode = defaultLanguageCode;\r\n        const taRepoName = `${languageCode}_ta`;\r\n        // console.log(`Got taRepoName=${taRepoName}`);\r\n        const filepath = `${resultArray[2]}/${resultArray[3]}/01.md`; // Other files are title.md, sub-title.md\r\n        // console.log(`Got tA filepath=${filepath}`);\r\n\r\n        // console.log(`Need to check against ${taRepoName}`);\r\n        let taFileContent; // Not really used here -- just to show that we got something valid\r\n        try {\r\n            taFileContent = await getFileCached_({ username, repository: taRepoName, path: filepath, branch });\r\n            // console.log(\"Fetched fileContent for\", taRepoName, filepath, typeof fileContent, fileContent.length);\r\n        } catch (trcGCerror) {\r\n            console.log(\"ERROR: Failed to load\", username, taRepoName, filepath, branch, trcGCerror.message);\r\n            addNotice6({priority:885, message:`Error loading ${fieldName} TA link`, extract:resultArray[0], location:`${ourLocation} ${filepath}: ${trcGCerror}`});\r\n        }\r\n        if (!taFileContent)\r\n            addNotice6({priority:886, message:`Unable to find ${fieldName} TA link`, extract:resultArray[0], location:`${ourLocation} ${filepath}`});\r\n        else if (taFileContent.length < 10)\r\n            addNotice6({priority:884, message:`Linked ${fieldName} TA article seems empty`, extract:resultArray[0], location:`${ourLocation} ${filepath}`});\r\n    }\r\n\r\n    // Check TW links like [[rc://en/tw/dict/bible/other/death]]\r\n    // console.log(\"checkTNLinks: Search for TW links\")\r\n    const twRegex = new RegExp('\\\\[\\\\[rc://([^ /]+?)/tw/dict/bible/([^ /]+?)/([^ \\\\]]+?)\\\\]\\\\]', 'g');\r\n    // eslint-disable-next-line no-cond-assign\r\n    while (resultArray = twRegex.exec(fieldText)) {\r\n        // console.log(`  resultArray=${JSON.stringify(resultArray)}`);\r\n        console.assert(resultArray.length === 4, `Expected 4 fields (not ${resultArray.length})`)\r\n        let languageCode = resultArray[1];\r\n        if (!languageCode || languageCode === '*') languageCode = defaultLanguageCode;\r\n        const twRepoName = `${languageCode}_tw`;\r\n        // console.log(`Got twRepoName=${twRepoName}`);\r\n        const filepath = `bible/${resultArray[2]}/${resultArray[3]}.md`; // Other files are title.md, sub-title.md\r\n        // console.log(`Got tW filepath=${filepath}`);\r\n\r\n        // console.log(`Need to check against ${twRepoName}`);\r\n        let taFileContent; // Not really used here -- just to show that we got something valid\r\n        try {\r\n            taFileContent = await getFileCached_({ username, repository: twRepoName, path: filepath, branch });\r\n            // console.log(\"Fetched fileContent for\", twRepoName, filepath, typeof fileContent, fileContent.length);\r\n        } catch (trcGCerror) {\r\n            console.log(\"ERROR: Failed to load\", username, twRepoName, filepath, branch, trcGCerror.message);\r\n            addNotice6({priority:882, message:`Error loading ${fieldName} TW link`, extract:resultArray[0], location:`${ourLocation} ${filepath}: ${trcGCerror}`});\r\n        }\r\n        if (!taFileContent)\r\n            addNotice6({priority:883, message:`Unable to find ${fieldName} TW link`, extract:resultArray[0], location:`${ourLocation} ${filepath}`});\r\n        else if (taFileContent.length < 10)\r\n            addNotice6({priority:881, message:`Linked ${fieldName} TW article seems empty`, extract:resultArray[0], location:`${ourLocation} ${filepath}`});\r\n    }\r\n\r\n    // Check Bible links like [Revelation 3:11](../03/11.md)\r\n    const lowercaseBookID = bookID.toLowerCase();\r\n    let numChaptersThisBook;\r\n    try {\r\n        numChaptersThisBook = books.chaptersInBook(lowercaseBookID).length;\r\n    } catch (tnlcError) {\r\n        addNotice6({priority:979, message:\"Invalid book identifier passed to checkTNLinks\", location:` '${bookID}' in first parameter: ${tnlcError}`});\r\n    }\r\n\r\n    // console.log(\"checkTNLinks: Search for Bible links\")\r\n    const bibleRegex = new RegExp('\\\\[(\\\\w+?) (\\\\d{1,3}):(\\\\d{1,3})\\\\]\\\\(\\\\.\\\\./(\\\\d{1,3})/(\\\\d{1,3})\\\\.md\\\\)', 'g');\r\n    // eslint-disable-next-line no-cond-assign\r\n    while (resultArray = bibleRegex.exec(fieldText)) {\r\n        // console.log(`  resultArray=${JSON.stringify(resultArray)}`);\r\n        console.assert(resultArray.length === 6, `Expected 6 fields (not ${resultArray.length})`)\r\n\r\n        let chapterInt, verseInt;\r\n        try {\r\n            chapterInt = ourParseInt(resultArray[4]);\r\n        } catch (tnCIerror) {\r\n            console.log(`TN Link Check couldn't convert chapter '${resultArray[4]}': ${tnCIerror}`);\r\n            chapterInt = 1;\r\n        }\r\n        // eslint-disable-next-line no-unused-vars\r\n        let numVersesThisChapter;\r\n        if (chapterInt < 1 || chapterInt > numChaptersThisBook)\r\n            addNotice6({priority:843, message:\"Invalid chapter number\", extract:resultArray[4], location:`${ourLocation}`});\r\n        else {\r\n            try {\r\n                numVersesThisChapter = books.versesInChapter(lowercaseBookID, chapterInt);\r\n            } catch (tnVIerror) {\r\n            console.log(`TN Link Check couldn't convert verse '${resultArray[5]}': ${tnVIerror}`);\r\n            verseInt = 1;\r\n            }\r\n        }\r\n        try {\r\n            if (ourParseInt(resultArray[2]) !== chapterInt)\r\n                addNotice6({priority:743, message:\"Chapter numbers of Bible link don't match\", extract:resultArray[0], location:`${ourLocation}`});\r\n        } catch (ccError) {\r\n            console.log(`TN Link Check couldn't compare chapter numbers: ${ccError}`);\r\n        }\r\n        try {\r\n            verseInt = ourParseInt(resultArray[5]);\r\n        } catch (tnVIerror) {\r\n            console.log(`TN Link Check couldn't convert verse '${resultArray[5]}': ${tnVIerror}`);\r\n        }\r\n        try {\r\n            if (ourParseInt(resultArray[3]) !== ourParseInt(verseInt))\r\n                addNotice6({priority:742, message:\"Verse numbers of Bible link don't match\", extract:resultArray[0], location:`${ourLocation}`});\r\n        } catch (vvError) {\r\n            console.log(`TN Link Check couldn't compare verse numbers: ${vvError}`);\r\n        }\r\n    }\r\n\r\n    // console.log(`checkTNLinks is returning ${JSON.stringify(ctarResult)}`);\r\n    return ctarResult;\r\n}\r\n// end of checkTNLinks function\r\n\r\n\r\nexport default checkTNLinks;\r\n","import * as books from '../core/books/books';\r\nimport { getFileCached } from '../core/getApi';\r\n// import { consoleLogObject } from '../core/utilities';\r\n\r\n\r\n// const QUOTE_VALIDATOR_VERSION_STRING = '0.4.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nasync function checkOriginalLanguageQuote(fieldName, fieldText, bookID, C, V, givenLocation, optionalCheckingOptions) {\r\n    // Checks that the Hebrew/Greek quote can be found in the original texts\r\n\r\n    // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n\r\n    // Note that the original language verse text can be passed in as\r\n    //      optionalCheckingOptions.originalLanguageVerseText.\r\n    // Alternatively, we can fetch it from Door43 -- you can control this with:\r\n    //      optionalCheckingOptions.originalLanguageRepoUsername\r\n    //      (UHB or UGNT will be used for the repo name)\r\n    //      optionalCheckingOptions.originalLanguageRepoBranch (or tag)\r\n\r\n    // console.log(`checkOriginalLanguageQuote v${QUOTE_VALIDATOR_VERSION_STRING} (${fieldName}, (${fieldText.length}) '${fieldText}', ${bookID} ${C}:${V} ${givenLocation}, …)`);\r\n    console.assert(fieldName !== undefined, \"checkOriginalLanguageQuote: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof fieldName === 'string', `checkOriginalLanguageQuote: 'fieldText' parameter should be a string not a '${typeof fieldName}'`);\r\n    console.assert(fieldText !== undefined, \"checkOriginalLanguageQuote: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof fieldText === 'string', `checkOriginalLanguageQuote: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n    console.assert(bookID !== undefined, \"checkOriginalLanguageQuote: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof bookID === 'string', `checkOriginalLanguageQuote: 'fieldText' parameter should be a string not a '${typeof bookID}'`);\r\n    console.assert(bookID.length === 3, `checkOriginalLanguageQuote: 'bookID' parameter should be three characters long not ${bookID.length}`);\r\n    console.assert(books.isValidBookID(bookID), `checkOriginalLanguageQuote: '${bookID}' is not a valid USFM book identifier`);\r\n    console.assert(C !== undefined, \"checkOriginalLanguageQuote: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof C === 'string', `checkOriginalLanguageQuote: 'fieldText' parameter should be a string not a '${typeof C}'`);\r\n    console.assert(V !== undefined, \"checkOriginalLanguageQuote: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof V === 'string', `checkOriginalLanguageQuote: 'fieldText' parameter should be a string not a '${typeof V}'`);\r\n    console.assert(givenLocation !== undefined, \"checkOriginalLanguageQuote: 'fieldText' parameter should be defined\");\r\n    console.assert(typeof givenLocation === 'string', `checkOriginalLanguageQuote: 'fieldText' parameter should be a string not a '${typeof givenLocation}'`);\r\n\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n\r\n    const colqResult = { noticeList: [] };\r\n\r\n    function addNotice6(noticeObject) {\r\n        // console.log(`checkOriginalLanguageQuote Notice: (priority=${noticeObject.priority}) ${noticeObject.message}${characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : \"\"}${noticeObject.extract ? ` ${noticeObject.extract}` : \"\"}${noticeObject.location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"cOLQ addNotice6: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `cOLQ addNotice6: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"cOLQ addNotice6: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `cOLQ addNotice6: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(characterIndex !== undefined, \"cOLQ addNotice6: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cOLQ addNotice6: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"cOLQ addNotice6: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cOLQ addNotice6: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"cOLQ addNotice6: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `cOLQ addNotice6: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        colqResult.noticeList.push(noticeObject);\r\n    }\r\n\r\n    async function getPassage(bookID, C, V, optionalCheckingOptions) {\r\n        // console.log(`getPassage(${bookID}, ${C}, ${V})`);\r\n\r\n        const bookNumberAndName = books.usfmNumberName(bookID);\r\n        const whichTestament = books.testament(bookID); // returns 'old' or 'new'\r\n        const originalLanguageRepoLanguageCode = whichTestament === 'old' ? 'hbo' : 'el-x-koine';\r\n        const originalLanguageRepoCode = whichTestament === 'old' ? 'UHB' : 'UGNT';\r\n        const originalLanguageRepoName = `${originalLanguageRepoLanguageCode}_${originalLanguageRepoCode.toLowerCase()}`;\r\n        const filename = `${bookNumberAndName}.usfm`;\r\n\r\n        let username;\r\n        try {\r\n            username = optionalCheckingOptions.originalLanguageRepoUsername;\r\n        } catch (qcoError) { }\r\n        if (!username) username = 'unfoldingWord'; // or Door43-Catalog ???\r\n        let branch;\r\n        try {\r\n            branch = optionalCheckingOptions.originalLanguageRepoBranch;\r\n        } catch (qcunError) { }\r\n        if (!branch) branch = 'master';\r\n\r\n        let originalUSFM;\r\n        // console.log(`Need to check against ${originalLanguageRepoCode}`);\r\n        const getFileCached_ = (optionalCheckingOptions && optionalCheckingOptions.getFileCached) ? optionalCheckingOptions.getFileCached : getFileCached;\r\n        if (originalLanguageRepoCode === 'UHB') {\r\n            try {\r\n                originalUSFM = await getFileCached_({ username, repository: originalLanguageRepoName, path: filename, branch });\r\n                // console.log(\"Fetched file_content for\", repoName, filename, typeof originalUSFM, originalUSFM.length);\r\n            } catch (gcUHBerror) {\r\n                console.log(\"ERROR: Failed to load\", username, originalLanguageRepoCode, filename, branch, gcUHBerror.message);\r\n                addNotice6({ priority: 601, message: \"Failed to load\", filename, location: `${ourLocation}: ${gcUHBerror}`, extra: originalLanguageRepoName });\r\n            }\r\n        } else if (originalLanguageRepoCode === 'UGNT') {\r\n            try {\r\n                originalUSFM = await getFileCached_({ username, repository: originalLanguageRepoName, path: filename, branch });\r\n                // console.log(\"Fetched file_content for\", repoName, filename, typeof originalUSFM, originalUSFM.length);\r\n            } catch (gcUGNTerror) {\r\n                console.log(\"ERROR: Failed to load\", username, originalLanguageRepoCode, filename, branch, gcUGNTerror.message);\r\n                addNotice6({ priority: 601, message: \"Failed to load\", filename, location: `${ourLocation}: ${gcUGNTerror}`, extra: originalLanguageRepoName });\r\n            }\r\n        }\r\n\r\n        // Do global fixes\r\n        originalUSFM = originalUSFM.replace(/\\\\k-e\\\\\\*/g, ''); // Remove \\k-e self-closed milestones\r\n        originalUSFM = originalUSFM.replace(/\\\\k-s.+?\\\\\\*/g, ''); // Remove \\k-s self-closed milestones\r\n\r\n\r\n        // Now find the desired C:V\r\n        let foundChapter = false, foundVerse = false;\r\n        let verseText = '';\r\n        for (let bookLine of originalUSFM.split('\\n')) {\r\n            // console.log(\"bookLine\", bookLine);\r\n            if (!foundChapter && bookLine === `\\\\c ${C}`) {\r\n                foundChapter = true;\r\n                continue;\r\n            }\r\n            if (foundChapter && !foundVerse && bookLine.startsWith(`\\\\v ${V}`)) {\r\n                foundVerse = true;\r\n                bookLine = bookLine.substring(3 + V.length); // Delete verse number so below bit doesn't fail\r\n            }\r\n            if (foundVerse) {\r\n                if (bookLine.startsWith('\\\\v ') || bookLine.startsWith('\\\\c '))\r\n                    break; // Don't go into the next verse or chapter\r\n                verseText += (bookLine.startsWith('\\\\f ') ? '' : ' ') + bookLine;\r\n            }\r\n        }\r\n        verseText = verseText.replace(/\\\\p/g, '').trim().replace(/ {2}/g, ' ')\r\n        // console.log(`Got verse text1: '${verseText}'`);\r\n\r\n        // Remove \\w fields (just leaving the actual Bible text words)\r\n        let ixW = verseText.indexOf('\\\\w ')\r\n        while (ixW !== -1) {\r\n            const ixEnd = verseText.indexOf('\\\\w*', ixW)\r\n            if (ixEnd !== -1) {\r\n                const field = verseText.substring(ixW + 3, ixEnd);\r\n                const bits = field.split('|');\r\n                const adjusted_field = bits[0];\r\n                verseText = verseText.substring(0, ixW) + adjusted_field + verseText.substring(ixEnd + 3);\r\n            } else {\r\n                console.log(`Missing \\\\w* in ${bookID} ${C}:${V} verseText: '${verseText}'`);\r\n                verseText = verseText.replace(/\\\\w /g, '', 1); // Attempt to limp on\r\n            }\r\n            ixW = verseText.indexOf('\\\\w ', ixW + 1); // Might be another one\r\n        }\r\n        // console.log(`Got verse text2: '${verseText}'`);\r\n\r\n        // Remove footnotes\r\n        verseText = verseText.replace(/\\\\f (.+?)\\\\f\\*/g, '');\r\n        // Remove alternative versifications\r\n        verseText = verseText.replace(/\\\\va (.+?)\\\\va\\*/g, '');\r\n        // console.log(`Got verse text3: '${verseText}'`);\r\n\r\n        // Final clean-up (shouldn't be necessary, but just in case)\r\n        verseText = verseText.replace(/ {2}/g, ' ');\r\n        console.assert(verseText.indexOf('\\\\w') === -1, `getPassage: Should be no \\\\w in ${bookID} ${C}:${V} '${verseText}'`);\r\n        console.assert(verseText.indexOf('\\\\k') === -1, `getPassage: Should be no \\\\k in ${bookID} ${C}:${V} '${verseText}'`);\r\n        console.assert(verseText.indexOf('x-') === -1, `getPassage: Should be no x- in ${bookID} ${C}:${V} '${verseText}'`);\r\n        console.assert(verseText.indexOf('\\\\f') === -1, `getPassage: Should be no \\\\f in ${bookID} ${C}:${V} '${verseText}'`);\r\n        console.assert(verseText.indexOf('\\\\x') === -1, `getPassage: Should be no \\\\x in ${bookID} ${C}:${V} '${verseText}'`);\r\n        // console.log(`  getPassage(${bookID} ${C}:${V}) is returning '${verseText}'`);\r\n        return verseText;\r\n    }\r\n    // end of getPassage function\r\n\r\n\r\n    // Main code for checkOriginalLanguageQuote\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (gcELerror) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n\r\n    // if fieldText.lstrip() !== fieldText:\r\n    //     addNotice6({priority:0, message:`Unexpected whitespace at start of {TNid} '{fieldText}'\")\r\n    // if fieldText.rstrip() !== fieldText:\r\n    //     addNotice6({priority:0, message:`Unexpected whitespace at end of {TNid} '{fieldText}'\")\r\n    // fieldText = fieldText.strip() # so we don't get consequential errors\r\n\r\n    let characterIndex;\r\n    if ((characterIndex = fieldText.indexOf('...')) >= 0) {\r\n        // console.log(`Bad ellipse characters in '${fieldText}'`);\r\n        const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '');\r\n        addNotice6({ priority: 159, message: \"Should use proper ellipse character (not periods)\", characterIndex, extract, location: ourLocation });\r\n    }\r\n\r\n    let quoteBits;\r\n    if (fieldText.indexOf('…') >= 0) {\r\n        quoteBits = fieldText.split('…');\r\n        if ((characterIndex = fieldText.indexOf(' …')) >= 0 || (characterIndex = fieldText.indexOf('… ')) >= 0) {\r\n            // console.log(`Unexpected space(s) beside ellipse in '${fieldText}'`);\r\n            const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '');\r\n            addNotice6({ priority: 158, message: \"Unexpected space(s) beside ellipse character\", characterIndex, extract, location: ourLocation });\r\n        }\r\n    } else if (fieldText.indexOf('...') >= 0) { // Yes, we still actually allow this\r\n        quoteBits = fieldText.split('...');\r\n        if ((characterIndex = fieldText.indexOf(' ...')) >= 0 || (characterIndex = fieldText.indexOf('... ')) >= 0) {\r\n            // console.log(`Unexpected space(s) beside ellipse characters in '${fieldText}'`);\r\n            const extract = (characterIndex > halfLength ? '…' : '') + fieldText.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < fieldText.length ? '…' : '');\r\n            addNotice6({ priority: 158, message: \"Unexpected space(s) beside ellipse characters\", characterIndex, extract, location: ourLocation });\r\n        }\r\n    }\r\n    // console.log(`Got quoteBits=${quoteBits}`);\r\n\r\n    // Find the verse text in the original language\r\n    let verseText;\r\n    try {\r\n        verseText = optionalCheckingOptions.originalLanguageVerseText;\r\n    } catch (gcVTerror) { }\r\n    if (!verseText) // not supplied, so then we need to get it ourselves\r\n        verseText = await getPassage(bookID, C, V, optionalCheckingOptions);\r\n    if (!verseText) {\r\n        addNotice6({ priority: 851, message: \"Unable to load original language verse text\", location: ourLocation });\r\n        return colqResult; // nothing else we can do here\r\n    }\r\n\r\n    // Now check if the quote can be found in the verse text\r\n    if (quoteBits) {\r\n        const numQuoteBits = quoteBits.length;\r\n        if (numQuoteBits >= 2) {\r\n            for (let bitIndex = 0; bitIndex < numQuoteBits; bitIndex++) {\r\n                if (verseText.indexOf(quoteBits[bitIndex]) < 0) { // this is what we really want to catch\r\n                    // If the quote has multiple parts, create a description of the current part\r\n                    let partDescription;\r\n                    if (numQuoteBits === 1) partDescription = '';\r\n                    else if (bitIndex === 0) partDescription = 'beginning';\r\n                    else if (bitIndex === numQuoteBits - 1) partDescription = 'end';\r\n                    else partDescription = `middle${numQuoteBits > 3 ? bitIndex : ''}`;\r\n                    // console.log(`721 Unable to find '${fieldText}' ${numQuoteBits === 1? '': `'${quoteBits[bitIndex]}' `}${partDescription? '('+partDescription+') ':''}in '${verseText}'`);\r\n                    const extract = `${quoteBits[bitIndex]}' ${partDescription ? '(' + partDescription + ')' : ''}`;\r\n                    addNotice6({ priority: 721, message: \"Unable to find original language quote in verse text\", extract, location: ourLocation });\r\n                }\r\n            }\r\n        } else // < 2\r\n            addNotice6({ priority: 375, message: \"Ellipsis without surrounding snippet\", location: ourLocation });\r\n    } else { // Only a single quote (no ellipsis)\r\n        if (verseText.indexOf(fieldText) >= 0) {\r\n            // Double check that it doesn't start/stop in the middle of a word\r\n            // console.log(`Here with fieldText=${fieldText} and verseText=${verseText}`);\r\n            let remainingBits = verseText.split(fieldText);\r\n            // console.log(`remaingBits=${JSON.stringify(remainingBits)}`);\r\n            if (remainingBits.length > 2) // Join the extra bits back up\r\n                remainingBits = [remainingBits[0], remainingBits.slice(1).join('…')];\r\n            console.assert(remainingBits.length === 2, `remaining bits are ${remainingBits.length}`);\r\n            // Note: There's some Hebrew (RTL) characters at the beginning of the following regex\r\n            if (remainingBits[0] && remainingBits[0].slice(-1).search(/[^־A-Za-z\\s*[(]/) !== -1) {\r\n                // const badChar = remainingBits[0].slice(-1);\r\n                // const badCharString = ` by '{badChar}' {unicodedata.name(badChar)}={hex(ord(badChar))}`;\r\n                // console.log(`Seems '${fieldText}' might not start at the beginning of a word—it's preceded ${badCharString} in '${verseText}'`);\r\n                const extract = `(${remainingBits[0].slice(-1)}=D${remainingBits[0].slice(-1).charCodeAt()}/H${remainingBits[0].slice(-1).charCodeAt().toString(16)})` + fieldText.substring(0, extractLength - 3) + (fieldText.length > extractLength - 3 ? '…' : '');\r\n                addNotice6({ priority: 620, message: \"Seems original language quote might not start at the beginning of a word\", characterIndex: 0, extract, location: ourLocation });\r\n            }\r\n            // Note: There's some Hebrew (RTL) characters at the beginning of the following regex\r\n            if (remainingBits[1] && remainingBits[1][0].search(/[^׃־A-Za-z\\s.,:;?!–)]/) !== -1) {\r\n                // const badChar = remainingBits[1][0];\r\n                // const badCharString = ` by '${badChar}' {unicodedata.name(badChar)}={hex(ord(badChar))}`;\r\n                // console.log(`Seems '${fieldText}' might not finish at the end of a word—it's followed ${badCharString} in '${verseText}'`);\r\n                const extract = (fieldText.length > extractLength - 3 ? '…' : '') + fieldText.substring(fieldText.length - extractLength + 3, fieldText.length) + `(${remainingBits[1][0]}=D${remainingBits[1].charCodeAt(0)}/H${remainingBits[1].charCodeAt(0).toString(16)})`;\r\n                addNotice6({ priority: 621, message: \"Seems original language quote might not finish at the end of a word\", characterIndex: fieldText.length, extract, location: ourLocation });\r\n            }\r\n        } else { // can't find the given text\r\n            // console.log(`Unable to find '${fieldText}' in '${verseText}'`);\r\n            const noBreakSpaceText = fieldText.indexOf('\\u00A0') >= 0 ? \"quote which contains No-Break Space shown as '⍽'\" : \"\";\r\n            if (noBreakSpaceText) fieldText = fieldText.replace(/\\u00A0/g, '⍽');\r\n            // console.log(`722 fieldText='${fieldText}'${extraText}`);\r\n            // console.log(`722 verseText='${verseText}'`);\r\n            if (fieldText[0] === '\\u2060') { // Word joiner\r\n                const extract = fieldText.substring(0, extractLength) + fieldText.length > extractLength ? '…' : '';\r\n                addNotice6({ priority: 916, message: \"Unable to find original language quote in verse text\", details:\"quote which starts with 'word joiner'\" + (noBreakSpaceText? ' '+ noBreakSpaceText:''), extract, location: ourLocation });\r\n            } else if (fieldText.endsWith('\\u2060')) { // Word joiner\r\n                const extract = fieldText.length > extractLength ? '…' : '' + fieldText.substring(fieldText.length-extractLength, fieldText.length);\r\n                addNotice6({ priority: 916, message: \"Unable to find original language quote in verse text\", details:\"quote which ends with 'word joiner'\" + (noBreakSpaceText? ' '+ noBreakSpaceText:''), extract, location: ourLocation });\r\n            } else if (fieldText[0] === '\\u200B') { // Zero-width space\r\n                const extract = fieldText.substring(0, extractLength) + fieldText.length > extractLength ? '…' : '';\r\n                addNotice6({ priority: 916, message: \"Unable to find original language quote in verse text\", details:\"quote which starts with 'zero-width space'\" + (noBreakSpaceText? ' '+ noBreakSpaceText:''), extract, location: ourLocation });\r\n            } else if (fieldText.endsWith('\\u200B')) { // Zero-width space\r\n                const extract = fieldText.length > extractLength ? '…' : '' + fieldText.substring(fieldText.length-extractLength, fieldText.length);\r\n                addNotice6({ priority: 916, message: \"Unable to find original language quote in verse text\", details:\"quote which ends with 'zero-width space'\" + (noBreakSpaceText? ' '+ noBreakSpaceText:''), extract, location: ourLocation });\r\n            } else if (fieldText[0] === '\\u200D') { // Zero-width joiner\r\n                const extract = fieldText.substring(0, extractLength) + fieldText.length > extractLength ? '…' : '';\r\n                addNotice6({ priority: 916, message: \"Unable to find original language quote in verse text\", details:\"quote which starts with 'zero-width joiner'\" + (noBreakSpaceText? ' '+ noBreakSpaceText:''), extract, location: ourLocation });\r\n            } else if (fieldText.endsWith('\\u200D')) { // Zero-width joiner\r\n                const extract = fieldText.length > extractLength ? '…' : '' + fieldText.substring(fieldText.length-extractLength, fieldText.length);\r\n                addNotice6({ priority: 916, message: \"Unable to find original language quote in verse text\", details:\"quote which ends with 'zero-width joiner'\" + (noBreakSpaceText? ' '+ noBreakSpaceText:''), extract, location: ourLocation });\r\n            } else {\r\n                const extract = fieldText.substring(0, halfLength) + (fieldText.length > 2 * halfLength ? '…' : '') + fieldText.substring(fieldText.length - halfLength, fieldText.length);\r\n                addNotice6({ priority: 916, message: \"Unable to find original language quote in verse text\", details:noBreakSpaceText, extract, location: ourLocation });\r\n            }\r\n        }\r\n    }\r\n\r\n    // console.log(`checkOriginalLanguageQuote is returning ${JSON.stringify(colqResult)}`);\r\n    return colqResult;\r\n}\r\n// end of checkOriginalLanguageQuote function\r\n\r\n\r\nexport default checkOriginalLanguageQuote;\r\n","import * as books from './books/books';\r\nimport checkTN_TSVDataRow from './tn-table-row-check';\r\n\r\n\r\nconst TN_TABLE_TEXT_VALIDATOR_VERSION_STRING = '0.2.3';\r\n\r\nconst NUM_EXPECTED_TN_TSV_FIELDS = 9; // so expects 8 tabs per line\r\nconst EXPECTED_TN_HEADING_LINE = 'Book\\tChapter\\tVerse\\tID\\tSupportReference\\tOrigQuote\\tOccurrence\\tGLQuote\\tOccurrenceNote';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nasync function checkTN_TSVText(languageCode, bookID, filename, tableText, givenLocation, optionalCheckingOptions) {\r\n    /* This function is optimised for checking the entire file, i.e., all rows.\r\n\r\n      It also has the advantage of being able to compare one row with the previous one.\r\n\r\n     bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n\r\n     Returns a result object containing a successList and a noticeList\r\n     */\r\n    // console.log(`checkTN_TSVText(${bookID}, ${tableText.length}, ${location},${JSON.stringify(optionalCheckingOptions)})…`);\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    // if (bookID) ourLocation = ` in ${bookID}${ourLocation}`;\r\n\r\n    const result = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(`checkTN_TSVText success: ${successString}`);\r\n        result.successList.push(successString);\r\n    }\r\n    function addNoticeCV8(noticeObject) {\r\n        // console.log(`checkTN_TSVText notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"TSV addNoticeCV8: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `TSV addNoticeCV8: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"TSV addNoticeCV8: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `TSV addNoticeCV8: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(C !== undefined, \"TSV addNoticeCV8: 'C' parameter should be defined\");\r\n        if (noticeObject.C) console.assert(typeof noticeObject.C === 'string', `TSV addNoticeCV8: 'C' parameter should be a string not a '${typeof noticeObject.C}': ${noticeObject.C}`);\r\n        // console.assert(V !== undefined, \"TSV addNoticeCV8: 'V' parameter should be defined\");\r\n        if (noticeObject.V) console.assert(typeof noticeObject.V === 'string', `TSV addNoticeCV8: 'V' parameter should be a string not a '${typeof noticeObject.V}': ${noticeObject.V}`);\r\n        // console.assert(characterIndex !== undefined, \"TSV addNoticeCV8: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `TSV addNoticeCV8: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"TSV addNoticeCV8: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `TSV addNoticeCV8: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"TSV addNoticeCV8: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `TSV addNoticeCV8: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        result.noticeList.push({ ...noticeObject, bookID, filename });\r\n    }\r\n\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (ttcError) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    // const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    // const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    let lowercaseBookID = bookID.toLowerCase();\r\n    let numChaptersThisBook = 0;\r\n    try {\r\n        numChaptersThisBook = books.chaptersInBook(lowercaseBookID).length;\r\n    }\r\n    catch {\r\n        if (!books.isValidBookID(bookID)) // must not be in FRT, BAK, etc.\r\n            addNoticeCV8({ priority: 747, message: \"Bad function call: should be given a valid book abbreviation\", extract: bookID, location: ` (not '${bookID}')${ourLocation}` });\r\n    }\r\n\r\n    let lines = tableText.split('\\n');\r\n    // console.log(`  '${location}' has ${lines.length.toLocaleString()} total lines (expecting ${NUM_EXPECTED_TN_FIELDS} fields in each line)`);\r\n\r\n    let lastB = '', lastC = '', lastV = '';\r\n    let rowIDList = [], uniqueRowList = [];\r\n    let numVersesThisChapter = 0;\r\n    for (let n = 0; n < lines.length; n++) {\r\n        // console.log(`checkTN_TSVText checking line ${n}: ${JSON.stringify(lines[n])}`);\r\n        if (n === 0) {\r\n            if (lines[0] === EXPECTED_TN_HEADING_LINE)\r\n                addSuccessMessage(`Checked TSV header ${ourLocation}`);\r\n            else\r\n                addNoticeCV8({ priority: 746, message: \"Bad TSV header\", lineNumber: n + 1, location: `${ourLocation}: '${lines[0]}'` });\r\n        }\r\n        else // not the header\r\n        {\r\n            let fields = lines[n].split('\\t');\r\n            if (fields.length === NUM_EXPECTED_TN_TSV_FIELDS) {\r\n                // eslint-disable-next-line no-unused-vars\r\n                const [B, C, V, rowID, supportReference, origQuote, occurrence, _GLQuote, _occurrenceNote] = fields;\r\n\r\n                // Use the row check to do most basic checks\r\n                const firstResult = await checkTN_TSVDataRow(languageCode, lines[n], bookID, C, V, ourLocation, optionalCheckingOptions);\r\n                // Choose only ONE of the following\r\n                // This is the fast way of append the results from this field\r\n                // result.noticeList = result.noticeList.concat(firstResult.noticeList);\r\n                // If we need to put everything through addNoticeCV8, e.g., for debugging or filtering\r\n                //  process results line by line\r\n                for (const noticeEntry of firstResult.noticeList)\r\n                    addNoticeCV8({ ...noticeEntry, lineNumber: n + 1 });\r\n\r\n                // So here we only have to check against the previous and next fields for out-of-order problems and duplicate problems\r\n                if (B !== lastB || C !== lastC || V !== lastV) {\r\n                    rowIDList = []; // ID's only need to be unique within each verse\r\n                    uniqueRowList = []; // Same for these\r\n                }\r\n\r\n                // TODO: Check if we need this at all (even though tC 3.0 can't display these \"duplicate\" notes)\r\n                // Check for duplicate notes\r\n                const uniqueID = C + V + supportReference + origQuote + occurrence; // This combination should not be repeated\r\n                // if (uniqueRowList.indexOf(uniqueID) >= 0)\r\n                //     addNoticeCV8({ priority: 880, C, V, message: `Duplicate note`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                // if (uniqueRowList.indexOf(uniqueID) >= 0)\r\n                //     addNoticeCV8({ priority: 80, C, V, message: `Note: tC 3.0 won't display duplicate note`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                uniqueRowList.push(uniqueID);\r\n\r\n                if (B) {\r\n                    if (B !== bookID)\r\n                        addNoticeCV8({ priority: 745, C, V, message: `Wrong '${B}' book identifier (expected '${bookID}')`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                }\r\n                else\r\n                    addNoticeCV8({ priority: 744, C, V, message: \"Missing book identifier\", rowID, lineNumber: n + 1, location: ourLocation });\r\n\r\n                if (C) {\r\n                    if (C === 'front') { }\r\n                    else if (/^\\d+$/.test(C)) {\r\n                        let intC = Number(C);\r\n                        if (C !== lastC)\r\n                            numVersesThisChapter = books.versesInChapter(lowercaseBookID, intC);\r\n                        if (intC === 0)\r\n                            addNoticeCV8({ priority: 551, C, V, message: `Invalid zero '${C}' chapter number`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        if (intC > numChaptersThisBook)\r\n                            addNoticeCV8({ priority: 737, C, V, message: `Invalid large '${C}' chapter number`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        if (/^\\d+$/.test(lastC)) {\r\n                            let lastintC = Number(lastC);\r\n                            if (intC < lastintC)\r\n                                addNoticeCV8({ priority: 736, C, V, message: `Receding '${C}' chapter number after '${lastC}'`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                            else if (intC > lastintC + 1)\r\n                                addNoticeCV8({ priority: 735, C, V, message: `Advancing '${C}' chapter number after '${lastC}'`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        }\r\n                    }\r\n                    else\r\n                        addNoticeCV8({ priority: 734, C, V, message: \"Bad chapter number\", rowID, lineNumber: n + 1, location: ourLocation });\r\n                }\r\n                else\r\n                    addNoticeCV8({ priority: 739, C, V, message: \"Missing chapter number\", rowID, lineNumber: n + 1, location: ` after ${lastC}:${V}${ourLocation}` });\r\n\r\n                if (V) {\r\n                    if (V === 'intro') { }\r\n                    else if (/^\\d+$/.test(V)) {\r\n                        let intV = Number(V);\r\n                        if (intV === 0)\r\n                            addNoticeCV8({ priority: 552, C, V, message: `Invalid zero '${V}' verse number`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        if (intV > numVersesThisChapter)\r\n                            addNoticeCV8({ priority: 734, C, V, message: `Invalid large '${V}' verse number for chapter ${C}`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        if (/^\\d+$/.test(lastV)) {\r\n                            let lastintV = Number(lastV);\r\n                            if (intV < lastintV)\r\n                                addNoticeCV8({ priority: 733, C, V, message: `Receding '${V}' verse number after '${lastV}'`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                            // else if (intV > lastintV + 1)\r\n                            //   addNoticeCV8({priority:556, `Skipped verses with '${V}' verse number after '${lastV}'${withString}`);\r\n                        }\r\n                    }\r\n                    else\r\n                        addNoticeCV8({ priority: 738, C, V, message: \"Bad verse number\", rowID, lineNumber: n + 1, location: ourLocation });\r\n\r\n                }\r\n                else\r\n                    addNoticeCV8({ priority: 790, C, V, message: \"Missing verse number\", rowID, lineNumber: n + 1, location: ` after ${C}:${lastV}${ourLocation}` });\r\n\r\n                if (rowID) {\r\n                    if (rowIDList.indexOf(rowID) >= 0)\r\n                        addNoticeCV8({ priority: 729, C, V, message: `Duplicate '${rowID}' ID`, fieldName:'ID', rowID, lineNumber: n + 1, location: ourLocation });\r\n                } else\r\n                    addNoticeCV8({ priority: 730, C, V, message: \"Missing ID\", fieldName:'ID', lineNumber: n + 1, location: ourLocation });\r\n\r\n\r\n                lastB = B; lastC = C; lastV = V;\r\n\r\n            } else\r\n                // if (n === lines.length - 1) // it's the last line\r\n                //     console.log(`  Line ${n}: Has ${fields.length} field(s) instead of ${NUM_EXPECTED_TN_FIELDS}: ${EXPECTED_TN_HEADING_LINE.replace(/\\t/g, ', ')}`);\r\n                // else\r\n                if (n !== lines.length - 1) // it's not the last line\r\n                    addNoticeCV8({ priority: 988, message: `Wrong number of tabbed fields (expected ${NUM_EXPECTED_TN_TSV_FIELDS})`, extract: `Found ${fields.length} field${fields.length === 1 ? '' : 's'}`, lineNumber: n + 1, location: ourLocation });\r\n        }\r\n    }\r\n    addSuccessMessage(`Checked all ${(lines.length - 1).toLocaleString()} data line${lines.length - 1 === 1 ? '' : 's'}${ourLocation}.`);\r\n    if (result.noticeList)\r\n        addSuccessMessage(`checkTN_TSVText v${TN_TABLE_TEXT_VALIDATOR_VERSION_STRING} finished with ${result.noticeList.length ? result.noticeList.length.toLocaleString() : \"zero\"} notice${result.noticeList.length === 1 ? '' : 's'}`);\r\n    else\r\n        addSuccessMessage(`No errors or warnings found by checkTN_TSVText v${TN_TABLE_TEXT_VALIDATOR_VERSION_STRING}`)\r\n    // console.log(`  checkTN_TSVText returning with ${result.successList.length.toLocaleString()} success(es), ${result.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(\"checkTN_TSVText result is\", JSON.stringify(result));\r\n    return result;\r\n}\r\n// end of checkTN_TSVText function\r\n\r\n\r\nexport default checkTN_TSVText;\r\n","import * as books from './books/books';\r\nimport checkTextField from './field-text-check';\r\nimport checkMarkdownText from './markdown-text-check';\r\nimport checkTAReference from './ta-reference-check';\r\nimport checkTNLinks from './tn-links-check';\r\nimport checkOriginalLanguageQuote from './quote-check';\r\n\r\n\r\n// const ANNOTATION_TABLE_ROW_VALIDATOR_VERSION_STRING = '0.4.1';\r\n\r\nconst NUM_EXPECTED_ANNOTATION_TSV_FIELDS = 7; // so expects 6 tabs per line\r\nconst EXPECTED_TN_HEADING_LINE = 'Reference\\tID\\tTags\\tSupportReference\\tQuote\\tOccurrence\\tAnnotation';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nasync function checkAnnotationTSVDataRow(languageCode, annotationType, line, bookID, C, V, givenRowLocation, optionalCheckingOptions) {\r\n    /**\r\n    * @description - Checks one TSV data row of translation notes (TN)\r\n    * @param {String} annotationType - TN, TQ, TWL, SN, or SQ -- allows more specific checks\r\n    * @param {String} line - the TSV line to be checked\r\n    * @param {String} bookID - 3-character UPPERCASE USFM book identifier or 'OBS'\r\n    * @param {String} C - chapter number or (for OBS) story number string\r\n    * @param {String} V - verse number or (for OBS) frame number string\r\n    * @param {String} givenRowLocation - description of where the line is located\r\n    * @param {Object} optionalCheckingOptions - may contain extractLength parameter\r\n    * @return {Object} - containing noticeList\r\n    */\r\n    /* This function is only for checking one data row\r\n          and the function doesn't assume that it has any previous context.\r\n\r\n        annotationType is a 2-3 character string, being\r\n            TN, TQ, TWL, SN, or SQ\r\n                being translation or study notes, questions, or word-links.\r\n\r\n        bookID is a three-character UPPERCASE USFM book identifier or 'OBS'\r\n            so C and V are usually chapter number and verse number\r\n                but can be story number and frame number for OBS.\r\n\r\n        It's designed to be able to quickly show errors for a single row being displayed/edited.\r\n\r\n        Returns an object containing the noticeList.\r\n    */\r\n    // console.log(`checkAnnotationTSVDataRow(${annotationType}, ${line}, ${bookID} ${C}:${V} ${givenRowLocation}, ${JSON.stringify(optionalCheckingOptions)})…`);\r\n    console.assert(annotationType !== undefined, \"checkAnnotationTSVDataRow: 'annotationType' parameter should be defined\");\r\n    console.assert(typeof annotationType === 'string', `checkAnnotationTSVDataRow: 'annotationType' parameter should be a string not a '${typeof annotationType}'`);\r\n    console.assert(annotationType.length === 2 || annotationType.length === 3, `checkAnnotationTSVDataRow: 'annotationType' parameter should be 2-3 characters long not ${annotationType.length}`);\r\n    console.assert(line !== undefined, \"checkAnnotationTSVDataRow: 'line' parameter should be defined\");\r\n    console.assert(typeof line === 'string', `checkAnnotationTSVDataRow: 'line' parameter should be a string not a '${typeof line}'`);\r\n    console.assert(bookID !== undefined, \"checkAnnotationTSVDataRow: 'bookID' parameter should be defined\");\r\n    console.assert(typeof bookID === 'string', `checkAnnotationTSVDataRow: 'bookID' parameter should be a string not a '${typeof bookID}'`);\r\n    console.assert(bookID.length === 3, `checkAnnotationTSVDataRow: 'bookID' parameter should be three characters long not ${bookID.length}`);\r\n    console.assert(books.isValidBookID(bookID), `checkAnnotationTSVDataRow: '${bookID}' is not a valid USFM book identifier`);\r\n    // console.assert(C !== undefined, \"checkAnnotationTSVDataRow: 'C' parameter should be defined\");\r\n    if (C) console.assert(typeof C === 'string', `checkAnnotationTSVDataRow: 'C' parameter should be a string not a '${typeof C}'`);\r\n    // console.assert(V !== undefined, \"checkAnnotationTSVDataRow: 'V' parameter should be defined\");\r\n    if (V) console.assert(typeof V === 'string', `checkAnnotationTSVDataRow: 'V' parameter should be a string not a '${typeof V}'`);\r\n    console.assert(givenRowLocation !== undefined, \"checkAnnotationTSVDataRow: 'givenRowLocation' parameter should be defined\");\r\n    console.assert(typeof givenRowLocation === 'string', `checkAnnotationTSVDataRow: 'givenRowLocation' parameter should be a string not a '${typeof givenRowLocation}'`);\r\n\r\n    let ourRowLocation = givenRowLocation;\r\n    if (ourRowLocation && ourRowLocation[0] !== ' ') ourRowLocation = ` ${ourRowLocation}`;\r\n\r\n    let adrResult = { noticeList: [] };\r\n\r\n    function addNotice6to9(noticeObject) {\r\n        /**\r\n        * @description - adds a new notice entry, adding bookID,C,V to the given fields\r\n        * @param {Number} priority - notice priority from 1 (lowest) to 999 (highest)\r\n        * @param {String} message - the text of the notice message\r\n        * @param {String} rowID - 4-character row ID field\r\n        * @param {Number} lineNumber - one-based line number\r\n        * @param {Number} characterIndex - zero-based index of where the issue occurs in the line\r\n        * @param {String} extract - short extract from the line centred on the problem (if available)\r\n        * @param {String} location - description of where the issue is located\r\n        */\r\n        // console.log(`Annotation TSV Row Notice: ${noticeObject.priority}:${noticeObject.message} ${JSON.stringify(noticeObject)}`);\r\n        console.assert(noticeObject.priority !== undefined, \"checkAnnotationTSVDataRow addNotice6to9: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `checkAnnotationTSVDataRow addNotice6to9: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"checkAnnotationTSVDataRow addNotice6to9: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `checkAnnotationTSVDataRow addNotice6to9: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(lineNumber !== undefined, \"checkAnnotationTSVDataRow addNotice6to9: 'lineNumber' parameter should be defined\");\r\n        // console.assert(typeof lineNumber === 'number', `checkAnnotationTSVDataRow addNotice6to9: 'lineNumber' parameter should be a number not a '${typeof lineNumber}': ${lineNumber}`);\r\n        // console.assert(characterIndex !== undefined, \"checkAnnotationTSVDataRow addNotice6to9: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `checkAnnotationTSVDataRow addNotice6to9: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"checkAnnotationTSVDataRow addNotice6to9: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `checkAnnotationTSVDataRow addNotice6to9: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"checkAnnotationTSVDataRow addNotice6to9: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `checkAnnotationTSVDataRow addNotice6to9: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        // Also uses the given bookID,C,V, parameters from the main function call\r\n        adrResult.noticeList.push({ ...noticeObject, bookID, C, V });\r\n    }\r\n\r\n    function ourMarkdownTextChecks(rowID, fieldName, fieldText, allowedLinks, rowLocation, optionalCheckingOptions) {\r\n        /**\r\n        * @description - checks the given markdown field and processes the returned results\r\n        * @param {String} rowID - 4-character row ID field\r\n        * @param {String} fieldName - name of the field being checked\r\n        * @param {String} fieldText - the actual text of the field being checked\r\n        * @param {} allowedLinks - true if links are allowed in the field, otherwise false\r\n        * @param {String} rowLocation - description of where the line is located\r\n        * @param {Object} optionalCheckingOptions - parameters that might affect the check\r\n        */\r\n        // Does markdown checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n\r\n        // We don't currently use the allowedLinks parameter\r\n\r\n        // console.log(`checkAnnotationTSVDataRow ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkAnnotationTSVDataRow ourMarkdownTextChecks: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkAnnotationTSVDataRow ourMarkdownTextChecks: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        // console.assert(fieldName !== undefined, \"checkAnnotationTSVDataRow ourMarkdownTextChecks: 'fieldName' parameter should be defined\");\r\n        // console.assert(typeof fieldName === 'string', `checkAnnotationTSVDataRow ourMarkdownTextChecks: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(fieldName === 'Annotation', \"checkAnnotationTSVDataRow ourMarkdownTextChecks: Only run this check on OccurrenceNotes\")\r\n        console.assert(fieldText !== undefined, \"checkAnnotationTSVDataRow ourMarkdownTextChecks: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `checkAnnotationTSVDataRow ourMarkdownTextChecks: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert(allowedLinks === true || allowedLinks === false, \"checkAnnotationTSVDataRow ourMarkdownTextChecks: allowedLinks parameter must be either true or false\");\r\n        console.assert(rowLocation.indexOf(fieldName) < 0, `checkAnnotationTSVDataRow ourMarkdownTextChecks: 'rowLocation' parameter should be not contain fieldName=${fieldName}`);\r\n\r\n        const cmtResultObject = checkMarkdownText(fieldName, fieldText, rowLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(cmtResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of cmtResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourMarkdownTextChecks notice length=${Object.keys(noticeEntry).length}`);\r\n            // NOTE: Ellipses in OccurrenceNote have the normal meaning\r\n            //          not like the specialised meaning in the snippet fields OrigQuote and GLQuote\r\n            if (noticeEntry.priority !== 178 && noticeEntry.priority !== 179 // unexpected space after ellipse, ellipse after space\r\n            && !noticeEntry.message.startsWith(\"Unexpected … character after space\") // 191\r\n            )\r\n                addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourMarkdownTextChecks function\r\n\r\n    function ourCheckTextField(rowID, fieldName, fieldText, allowedLinks, rowLocation, optionalCheckingOptions) {\r\n        /**\r\n        * @description - checks the given text field and processes the returned results\r\n        * @param {String} rowID - 4-character row ID field\r\n        * @param {String} fieldName - name of the field being checked\r\n        * @param {String} fieldText - the actual text of the field being checked\r\n        * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false\r\n        * @param {String} rowLocation - description of where the line is located\r\n        * @param {Object} optionalCheckingOptions - parameters that might affect the check\r\n        */\r\n        // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n\r\n        // console.log(`checkAnnotationTSVDataRow ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkAnnotationTSVDataRow ourCheckTextField: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkAnnotationTSVDataRow ourCheckTextField: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        console.assert(fieldName !== undefined, \"checkAnnotationTSVDataRow ourCheckTextField: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `checkAnnotationTSVDataRow ourCheckTextField: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(fieldText !== undefined, \"checkAnnotationTSVDataRow ourCheckTextField: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `checkAnnotationTSVDataRow ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert(allowedLinks === true || allowedLinks === false, \"checkAnnotationTSVDataRow ourCheckTextField: allowedLinks parameter must be either true or false\");\r\n        console.assert(rowLocation.indexOf(fieldName) < 0, `checkAnnotationTSVDataRow ourCheckTextField: 'rowLocation' parameter should be not contain fieldName=${fieldName}`);\r\n\r\n        const dbtcResultObject = checkTextField(fieldName, fieldText, allowedLinks, rowLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(dbtcResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of dbtcResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourCheckTextField notice length=${Object.keys(noticeEntry).length}`);\r\n            addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourCheckTextField function\r\n\r\n\r\n    async function ourCheckTAReference(rowID, fieldName, taLinkText, rowLocation, optionalCheckingOptions) {\r\n        // Checks that the TA reference can be found\r\n\r\n        // Updates the global list of notices\r\n\r\n        // console.log(`checkAnnotationTSVDataRow ourCheckTAReference(${fieldName}, (${taLinkText.length}) '${taLinkText}', ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkAnnotationTSVDataRow ourCheckTAReference: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkAnnotationTSVDataRow ourCheckTAReference: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        console.assert(fieldName !== undefined, \"checkAnnotationTSVDataRow ourCheckTAReference: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `checkAnnotationTSVDataRow ourCheckTAReference: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(taLinkText !== undefined, \"checkAnnotationTSVDataRow ourCheckTAReference: 'taLinkText' parameter should be defined\");\r\n        console.assert(typeof taLinkText === 'string', `checkAnnotationTSVDataRow ourCheckTAReference: 'taLinkText' parameter should be a string not a '${typeof taLinkText}'`);\r\n        console.assert(rowLocation.indexOf(fieldName) < 0, `checkAnnotationTSVDataRow ourCheckTAReference: 'rowLocation' parameter should be not contain fieldName=${fieldName}`);\r\n\r\n        const coqResultObject = await checkTAReference(fieldName, taLinkText, rowLocation, { ...optionalCheckingOptions, taRepoLanguageCode: languageCode });\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(coqResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of coqResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourCheckTAReference notice length=${Object.keys(noticeEntry).length}`);\r\n            addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourCheckTAReference function\r\n\r\n    async function ourCheckTNOriginalLanguageQuote(rowID, fieldName, fieldText, rowLocation, optionalCheckingOptions) {\r\n        // Checks that the Hebrew/Greek quote can be found in the original texts\r\n\r\n        // Uses the bookID,C,V values from the main function call\r\n\r\n        // Updates the global list of notices\r\n\r\n        // console.log(`checkAnnotationTSVDataRow ourCheckTNOriginalLanguageQuote(${fieldName}, (${fieldText.length}) '${fieldText}', ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkAnnotationTSVDataRow ourMarkdownTextChecks: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkAnnotationTSVDataRow ourMarkdownTextChecks: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        console.assert(fieldName !== undefined, \"checkAnnotationTSVDataRow ourMarkdownTextChecks: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `checkAnnotationTSVDataRow ourMarkdownTextChecks: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(fieldText !== undefined, \"checkAnnotationTSVDataRow ourCheckTNOriginalLanguageQuote: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `checkAnnotationTSVDataRow ourCheckTNOriginalLanguageQuote: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n\r\n        const coqResultObject = await checkOriginalLanguageQuote(fieldName,fieldText, bookID,C,V, rowLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(coqResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of coqResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourCheckTNOriginalLanguageQuote notice length=${Object.keys(noticeEntry).length}`);\r\n            addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourCheckTNOriginalLanguageQuote function\r\n\r\n    async function ourCheckTNLinks(rowID, fieldName, taLinkText, rowLocation, optionalCheckingOptions) {\r\n        // Checks that the TA reference can be found\r\n\r\n        // Updates the global list of notices\r\n\r\n        // console.log(`checkAnnotationTSVDataRow ourCheckTNLinks(${fieldName}, (${taLinkText.length}) '${taLinkText}', ${rowLocation}, …)`);\r\n        console.assert(rowID !== undefined, \"checkAnnotationTSVDataRow ourCheckTNLinks: 'rowID' parameter should be defined\");\r\n        console.assert(typeof rowID === 'string', `checkAnnotationTSVDataRow ourCheckTNLinks: 'rowID' parameter should be a string not a '${typeof rowID}'`);\r\n        console.assert(fieldName !== undefined, \"checkAnnotationTSVDataRow ourCheckTNLinks: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `checkAnnotationTSVDataRow ourCheckTNLinks: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(taLinkText !== undefined, \"checkAnnotationTSVDataRow ourCheckTNLinks: 'taLinkText' parameter should be defined\");\r\n        console.assert(typeof taLinkText === 'string', `checkAnnotationTSVDataRow ourCheckTNLinks: 'taLinkText' parameter should be a string not a '${typeof taLinkText}'`);\r\n\r\n        const coqResultObject = await checkTNLinks(bookID, fieldName, taLinkText, rowLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        // result.noticeList = result.noticeList.concat(coqResultObject.noticeList);\r\n        // If we need to put everything through addNotice6to9, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        for (const noticeEntry of coqResultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `TL ourCheckTNLinks notice length=${Object.keys(noticeEntry).length}`);\r\n            addNotice6to9({ ...noticeEntry, rowID, fieldName });\r\n        }\r\n    }\r\n    // end of ourCheckTNLinks function\r\n\r\n\r\n    // Main code for checkAnnotationTSVDataRow function\r\n    if (line === EXPECTED_TN_HEADING_LINE) // Assume it must be ok\r\n        return adrResult; // We can't detect if it's in the wrong place\r\n\r\n    addNotice6to9({priority:998, message:\"checkAnnotationTSVDataRow() is still a placeholder -- not completed yet\", location:ourRowLocation});\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (tlcELerror) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    // const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    // const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    let numChaptersThisBook;\r\n    if (bookID !== 'OBS') {\r\n        const lowercaseBookID = bookID.toLowerCase();\r\n        try {\r\n            numChaptersThisBook = books.chaptersInBook(lowercaseBookID).length;\r\n        } catch (tlcNCerror) {\r\n            addNotice6to9({priority:979, message:\"Invalid book identifier passed to checkAnnotationTSVDataRow\", location:` '${bookID}' in first parameter: ${tlcNCerror}`});\r\n        }\r\n    }\r\n    const haveBibleBookID = numChaptersThisBook !== undefined;\r\n\r\n    let fields = line.split('\\t');\r\n    if (fields.length === NUM_EXPECTED_ANNOTATION_TSV_FIELDS) {\r\n        const [reference, rowID, tags, supportReference, quote, occurrence, annotation] = fields;\r\n        // let withString = ` with '${rowID}'${inString}`;\r\n        // let CV_withString = ` ${C}:${V}${withString}`;\r\n        // let atString = ` at ${B} ${C}:${V} (${rowID})${inString}`;\r\n\r\n        // Check the fields one-by-one\r\n        const [C, V] = reference.split(':')\r\n        let numVersesThisChapter, haveGoodChapterNumber;\r\n        if (C.length) {\r\n            if (C === 'front') { }\r\n            else if (/^\\d+$/.test(C)) {\r\n                let intC = Number(C);\r\n                if (intC === 0) {\r\n                    addNotice6to9({priority:824, message:`Invalid zero chapter number`, extract:C, rowID, location:ourRowLocation});\r\n                    haveGoodChapterNumber = false;\r\n                }\r\n                // TODO: Does this next section need rewriting (see verse check below)???\r\n                else if (intC > numChaptersThisBook) {\r\n                    addNotice6to9({priority:823, message:`Invalid large chapter number`, extract:C, rowID, location:ourRowLocation});\r\n                    haveGoodChapterNumber = false;\r\n                }\r\n                try {\r\n                    numVersesThisChapter = books.versesInChapter(bookID.toLowerCase(), intC);\r\n                    haveGoodChapterNumber = true;\r\n                } catch (tlcNVerror) {\r\n                    if (!haveBibleBookID)\r\n                        // addNotice6to9({priority:500, message:\"Invalid chapter number\", rowLocation);\r\n                        // else\r\n                        addNotice6to9({priority:822, message:\"Unable to check chapter number\", rowID, location:` '${C}'${ourRowLocation}`});\r\n                    haveGoodChapterNumber = false;\r\n                }\r\n            }\r\n            else\r\n                addNotice6to9({priority:821, message:\"Bad chapter number\", rowID, location:` '${C}' with${ourRowLocation}`});\r\n        }\r\n        else\r\n            addNotice6to9({priority:820, message:\"Missing chapter number\", rowID, location:` ?:${V}${ourRowLocation}`});\r\n\r\n        if (V.length) {\r\n            if (V === 'intro') { }\r\n            else if (/^\\d+$/.test(V)) {\r\n                let intV = Number(V);\r\n                if (intV === 0)\r\n                    addNotice6to9({priority:814, message:`Invalid zero '${V}' verse number`, rowID, location:ourRowLocation});\r\n                else {\r\n                    if (haveGoodChapterNumber) {\r\n                        if (intV > numVersesThisChapter)\r\n                            addNotice6to9({priority:813, message:`Invalid large '${V}' verse number`, rowID, location:` for chapter ${C}${ourRowLocation}`});\r\n                    } else\r\n                        addNotice6to9({priority:812, message:\"Unable to check verse number\", rowID, location:` '${V}'${ourRowLocation}`});\r\n                }\r\n            }\r\n            else\r\n                addNotice6to9({priority:811, message:\"Bad verse number\", rowID, location:` '${V}'${ourRowLocation}`});\r\n        }\r\n        else\r\n            addNotice6to9({priority:810, message:\"Missing verse number\", rowID, location:` after ${C}:?${ourRowLocation}`});\r\n\r\n        if (!rowID.length)\r\n            addNotice6to9({priority:779, message:\"Missing ID field\", location:ourRowLocation});\r\n        else {\r\n            if (rowID.length !== 4)\r\n                addNotice6to9({priority:778, message:\"ID should be exactly 4 characters\", rowID, location:` (not ${rowID.length})${ourRowLocation}`});\r\n            else if ('abcdefghijklmnopqrstuvwxyz0123456789'.indexOf(rowID[0]) < 0)\r\n                addNotice6to9({priority:176, message:\"ID should start with a lowercase letter or digit\", characterIndex:0, rowID, location:` (not '${rowID[0]}')${ourRowLocation}`});\r\n            else if ('abcdefghijklmnopqrstuvwxyz0123456789'.indexOf(rowID[3]) < 0)\r\n                addNotice6to9({priority:175, message:\"ID should end with a lowercase letter or digit\", characterIndex:3, rowID, location:` (not '${rowID[3]}')${ourRowLocation}`});\r\n            else if ('abcdefghijklmnopqrstuvwxyz0123456789'.indexOf(rowID[1]) < 0)\r\n                addNotice6to9({priority:174, message:\"ID characters should only be lowercase letters, digits, or hypen\", characterIndex:1, rowID, location:` (not '${rowID[1]}')${ourRowLocation}`});\r\n            else if ('abcdefghijklmnopqrstuvwxyz0123456789'.indexOf(rowID[2]) < 0)\r\n                addNotice6to9({priority:173, message:\"ID characters should only be lowercase letters, digits, or hypen\", characterIndex:2, rowID, location:` (not '${rowID[2]}')${ourRowLocation}`});\r\n        }\r\n\r\n        if (tags.length)\r\n            ;\r\n\r\n        if (supportReference.length) { // need to check UTN against UTA\r\n            ourCheckTextField(rowID, 'SupportReference', supportReference, true, ourRowLocation, optionalCheckingOptions);\r\n            await ourCheckTAReference(rowID, 'SupportReference', supportReference, ourRowLocation, optionalCheckingOptions);\r\n        }\r\n        // else // TODO: Find out if these fields are really compulsory (and when they're not, e.g., for 'intro') ???\r\n        //     addNotice6to9({priority:277, message:\"Missing SupportReference field\", location:ourRowLocation});\r\n\r\n        if (quote.length) { // need to check UTN against UHB and UGNT\r\n            ourCheckTextField(rowID, 'Quote', quote, false, ourRowLocation, optionalCheckingOptions);\r\n            await ourCheckTNOriginalLanguageQuote(rowID, 'Quote', quote, ourRowLocation, optionalCheckingOptions);\r\n        }\r\n        else // TODO: Find out if these fields are really compulsory (and when they're not, e.g., for 'intro') ???\r\n            if (V !== 'intro')\r\n                addNotice6to9({priority:276, message:\"Missing Quote field\", rowID, location:ourRowLocation});\r\n\r\n        if (occurrence.length) { // This should usually be a digit\r\n            if (occurrence === '0') { // zero means that it doesn't occur\r\n                if (quote.length)\r\n                    addNotice6to9({priority:550, message:\"Invalid zero occurrence field when we have an original quote\", rowID, location:ourRowLocation});\r\n                // if (V !== 'intro')\r\n                //     addNotice6to9({priority:500, message:\"Invalid zero occurrence field\", rowID, location:rowLocation);\r\n            }\r\n            else if (occurrence === '-1') // TODO check the special conditions when this can occur???\r\n                ;\r\n            else if ('12345'.indexOf(occurrence) < 0) // it's not one of these integers\r\n                addNotice6to9({priority:792, message:`Invalid '${occurrence}' occurrence field`, rowID, location:ourRowLocation});\r\n        }\r\n\r\n        if (annotation.length) {\r\n            ourMarkdownTextChecks(rowID, 'Annotation', annotation, true, ourRowLocation, optionalCheckingOptions);\r\n            await ourCheckTNLinks(rowID, 'Annotation', annotation, ourRowLocation, optionalCheckingOptions);\r\n        }\r\n        else // TODO: Find out if these fields are really compulsory (and when they're not, e.g., for 'intro') ???\r\n            addNotice6to9({priority:274, message:`Missing ${annotationType} Annotation field`, rowID, location:ourRowLocation});\r\n\r\n    } else\r\n        addNotice6to9({priority:861, message:`Found wrong number of TSV fields (expected ${NUM_EXPECTED_ANNOTATION_TSV_FIELDS})`, extract:`Found ${fields.length} field${fields.length === 1 ? '' : 's'}`, location:ourRowLocation});\r\n\r\n    // console.log(`  checkAnnotationTSVDataRow returning with ${drResult.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(\"checkAnnotationTSVDataRow result is\", JSON.stringify(drResult));\r\n    return adrResult; // object with noticeList only\r\n}\r\n// end of checkAnnotationTSVDataRow function\r\n\r\nexport default checkAnnotationTSVDataRow;\r\n","import * as books from '../core/books/books';\r\nimport { isWhitespace, countOccurrences } from './text-handling-functions'\r\nimport checkTextField from './field-text-check';\r\nimport checkTextfileContents from './file-text-check';\r\nimport { runUsfmJsCheck } from './usfm-js-check';\r\nimport { runBCSGrammarCheck } from './BCS-usfm-grammar-check';\r\nimport { ourParseInt } from './utilities';\r\n\r\n\r\n// const USFM_VALIDATOR_VERSION_STRING = '0.6.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\n// See http://ubsicap.github.io/usfm/master/index.html\r\nconst INTRO_LINE_START_MARKERS = ['id', 'usfm', 'ide', 'h',\r\n    'toc1', 'toc2', 'toc3',\r\n    'mt', 'mt1', 'mt2',\r\n    'mte', 'mte1', 'mte2',\r\n    'imt', 'imt1', 'imt2',\r\n    'is', 'is1', 'is2',\r\n    'ip', 'ipi', 'im', 'imi', 'ipq', 'imq', 'ipr',\r\n    'iq', 'iq1', 'iq2',\r\n    'ili', 'ili1', 'ili2',\r\n    'iot', 'io', 'io1', 'io2',\r\n    'iex', 'imte', 'imte1', 'imte2'];\r\nconst CV_MARKERS = ['c', 'v', 'ca', 'va'];\r\nconst HEADING_TYPE_MARKERS = [ // expected to contain text on the same line\r\n    's', 's1', 's2', 's3', 's4', 'sr',\r\n    'ms', 'ms1', 'mr',\r\n    'r', 'd', 'rem', 'sp', 'qs', 'cl',\r\n    'sd', 'sd1', 'sd2',\r\n    'pr', 'cls', 'pmo', 'pmc', 'pmr', 'pc',\r\n    'periph'];\r\nconst PARAGRAPH_MARKERS = ['p', 'q', 'q1', 'q2', 'q3', 'q4',\r\n    'm', 'mi',\r\n    'pi', 'pi1', 'pi2', 'pi3', 'pi4',\r\n    'li', 'li1', 'li2', 'li3', 'li4',\r\n    'lim', 'lim1', 'lim2', 'lim3', 'lim4',\r\n    'lh', 'lf',\r\n    'po', 'pm',\r\n    'ph', 'ph1', 'ph2', 'ph3', 'ph4',\r\n    'tr'];\r\nconst NOTE_MARKERS = ['f', 'x'];\r\nconst SPECIAL_MARKERS = ['w', 'zaln-s', 'k-s',\r\n    'qt-s', 'qt1-s', 'qt2-s',\r\n    'lit'];\r\nconst MILESTONE_MARKERS = ['ts\\\\*', 'ts-s', 'ts-e', 'k-e\\\\*']; // Is this a good way to handle it???\r\nconst MARKERS_WITHOUT_CONTENT = ['b', 'nb', 'ib', 'ie'].concat(MILESTONE_MARKERS);\r\nconst ALLOWED_LINE_START_MARKERS = [].concat(INTRO_LINE_START_MARKERS).concat(HEADING_TYPE_MARKERS)\r\n    .concat(CV_MARKERS).concat(PARAGRAPH_MARKERS)\r\n    .concat(NOTE_MARKERS).concat(SPECIAL_MARKERS).concat(MARKERS_WITHOUT_CONTENT)\r\n    .concat(MILESTONE_MARKERS);\r\nconst DEPRECATED_MARKERS = [\r\n    'h1', 'h2', 'h3', 'h4',\r\n    'pr',\r\n    'ph', 'ph1', 'ph2', 'ph3', 'ph4',\r\n    'addpn', 'pro', 'fdc', 'xdc'];\r\nconst MARKERS_WITH_COMPULSORY_CONTENT = [].concat(INTRO_LINE_START_MARKERS).concat(HEADING_TYPE_MARKERS)\r\n    .concat(CV_MARKERS).concat(NOTE_MARKERS).concat(SPECIAL_MARKERS);\r\n// eslint-disable-next-line no-unused-vars\r\nconst CHARACTER_MARKERS = ['add', 'bk', 'dc', 'k', 'nd', 'ord', 'pn', 'png', 'addpn',\r\n    'qt', 'sig', 'sls', 'tl', 'wj',\r\n    'rq', 'ior', 'iqt',\r\n    'em', 'bd', 'it', 'bdit', 'no', 'sc', 'sup',\r\n    'fig', 'ndx', 'rb', 'pro', 'w', 'wg', 'wh', 'wa', // NOTE that we have \\w in TWO places\r\n    'litl', 'lik',\r\n    'liv', 'liv1', 'liv2', 'liv3', 'liv4'];\r\n// eslint-disable-next-line no-unused-vars\r\nconst FOOTNOTE_INTERNAL_MARKERS = ['fr', 'fq', 'fqa', 'fk', 'fl', 'fw', 'fp', 'fv', 'ft', 'fdc', 'fm', 'xt'];\r\n// eslint-disable-next-line no-unused-vars\r\nconst XREF_INTERNAL_MARKERS = ['xo', 'xk', 'xq', 'xt', 'xta', 'xop', 'xot', 'xnt', 'xdc', 'rq'];\r\nconst COMPULSORY_MARKERS = ['id', 'ide'];\r\nconst EXPECTED_MARKERS = ['usfm', 'mt1'];\r\nconst EXPECTED_BIBLE_BOOK_MARKERS = ['h', 'toc1', 'toc2', 'toc3'];\r\nconst EXPECTED_PERIPHERAL_BOOK_MARKERS = ['periph'];\r\n\r\n\r\nfunction checkUSFMText(languageCode, bookID, filename, givenText, givenLocation, optionalCheckingOptions) {\r\n    /* This function is optimised for checking the entire file, i.e., all lines.\r\n\r\n    bookID is a three-character UPPERCASE USFM book identifier.\r\n\r\n    filename parameter can be an empty string if we don't have one.\r\n\r\n     Returns a result object containing a successList and a noticeList\r\n     */\r\n    // console.log(`checkUSFMText(${languageCode}, ${bookID}, ${givenText.length.toLocaleString()} chars, '${givenLocation}', ${JSON.stringify(optionalCheckingOptions)})…`);\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (usfmELerror) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength} cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    const result = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(`checkUSFMText success: ${successString}`);\r\n        result.successList.push(successString);\r\n    }\r\n    function addNoticeCV8(noticeObject) {\r\n        // console.log(\"checkUSFMText addNoticeCV8:\", JSON.stringify(noticeObject));\r\n        // console.log(`checkUSFMText addNoticeCV8: (priority=${noticeObject.priority}) ${noticeObject.C}:${noticeObject.V} ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : \"\"}${noticeObject.extract ? ` ${noticeObject.extract}` : \"\"}${noticeObject.location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"cUSFM addNoticeCV8: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `cUSFM addNoticeCV8: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"cUSFM addNoticeCV8: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `cUSFM addNoticeCV8: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(C !== undefined, \"cUSFM addNoticeCV8: 'C' parameter should be defined\");\r\n        if (noticeObject.C) console.assert(typeof noticeObject.C === 'string', `cUSFM addNoticeCV8: 'C' parameter should be a string not a '${typeof noticeObject.C}': ${noticeObject.C}`);\r\n        // console.assert(V !== undefined, \"cUSFM addNoticeCV8: 'V' parameter should be defined\");\r\n        if (noticeObject.V) console.assert(typeof noticeObject.V === 'string', `cUSFM addNoticeCV8: 'V' parameter should be a string not a '${typeof noticeObject.V}': ${noticeObject.V}`);\r\n        // console.assert(characterIndex !== undefined, \"cUSFM addNoticeCV8: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex !== undefined) console.assert(typeof noticeObject.characterIndex === 'number', `cUSFM addNoticeCV8: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"cUSFM addNoticeCV8: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cUSFM addNoticeCV8: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"cUSFM addNoticeCV8: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `cUSFM addNoticeCV8: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        result.noticeList.push({ ...noticeObject, bookID, filename });\r\n    }\r\n\r\n\r\n    function ourRunBCSGrammarCheck(filename, fileText, fileLocation) {\r\n        // Runs the BCS USFM Grammar checker\r\n        //  which can be quite time-consuming on large, complex USFM files\r\n        // console.log(\"Running our BCS USFM grammar check (can take quite a while for a large book)…\");\r\n\r\n        const grammarCheckResult = runBCSGrammarCheck('strict', fileText, filename, fileLocation, optionalCheckingOptions);\r\n        // NOTE: We haven't figured out how to get ERRORS out of this parser yet\r\n        // console.log(`  Finished our BCS USFM grammar check with ${grammarCheckResult.isValidUSFM} and ${grammarCheckResult.warnings.length} warnings.`);\r\n        addSuccessMessage(`Checked USFM Grammar (strict mode) ${grammarCheckResult.isValidUSFM ? \"without errors\" : \" (but the USFM DIDN'T validate)\"}`);\r\n\r\n        // if (!grammarCheckResult.isValidUSFM) // TEMP DEGRADE TO WARNING 994 -> 544 ................XXXXXXXXXXXXXXXXXXXXXX\r\n        // Don't do this since we add the actual error message elsewhere now\r\n        // addNoticeCV8({priority:994, '', '', `USFM3 Grammar Check (strict mode) doesn't pass`, location:fileLocation});\r\n\r\n        // We only get one error if it fails\r\n        if (grammarCheckResult.error && grammarCheckResult.error.priority)\r\n            // Prevent these false alarms (from Ohm schema issues, esp. empty lemma fields)\r\n            if (!grammarCheckResult.error.extract\r\n                || (grammarCheckResult.error.extract.indexOf('emma=\"\"') < 0 && grammarCheckResult.error.message.indexOf('Expected \"c\", \"v\", ') < 0))\r\n                addNoticeCV8(grammarCheckResult.error);\r\n\r\n        // console.log(\"  Warnings:\", JSON.stringify(grammarCheckResult.warnings));\r\n        // Display these warnings but with a lower priority\r\n        for (const warningString of grammarCheckResult.warnings)\r\n            if (!warningString.startsWith(\"Empty lines present\") // we allow empty lines in our USFM\r\n                && !warningString.startsWith(\"Trailing spaces present at line end\") // we find these ourselves\r\n            )\r\n                addNoticeCV8({ priority: 102, message: `USFMGrammar: ${warningString}`, location: fileLocation });\r\n\r\n        if (!grammarCheckResult.isValidUSFM) {\r\n            const relaxedGrammarCheckResult = runBCSGrammarCheck('relaxed', fileText, filename, fileLocation);\r\n            addSuccessMessage(`Checked USFM Grammar (relaxed mode) ${relaxedGrammarCheckResult.isValidUSFM ? \"without errors\" : \" (but the USFM DIDN'T validate)\"}`);\r\n            if (!relaxedGrammarCheckResult.isValidUSFM)\r\n                addNoticeCV8({ priority: 644, message: \"USFM3 Grammar Check (relaxed mode) doesn't pass either\", location: fileLocation });\r\n        }\r\n    }\r\n    // end of ourRunBCSGrammarCheck function\r\n\r\n\r\n    function CVCheck(bookID, givenText, CVlocation) {\r\n        /*\r\n        This check uses the USFM-JS package to parse the USFM\r\n            and then it checks the results to make sure all expected verses are there.\r\n\r\n        This has the side advantage that it's using exactly the same code/package that's\r\n            used by tCore and tC Create.\r\n\r\n        Note that for verse bridges, USFM-JS returns the bridge, e.g., 24-25\r\n            AS WELL AS an entry for the bridged verses, e.g., 24 and 25.\r\n\r\n        Sadly this package doesn't return any errors or warnings from its parsing\r\n            so that's handle other ways in other places.\r\n\r\n        Note that this code below does NOT check for chapters and verses\r\n            being in the correct order. That's done elsewhere.\r\n        */\r\n        // console.log(\"Running CVCheck() using USFM-JS (can take quite a while for a large book)…\");\r\n        let chapterNumberString, verseNumberString;\r\n\r\n\r\n        function hasText(verseObjects) {\r\n            let gotDeep = false;\r\n            for (const someObject of verseObjects) {\r\n                // console.log(\"someObject\", JSON.stringify(someObject));\r\n                if (someObject['type'] === 'text' && someObject['text'].length > 5)\r\n                    return true;\r\n                if (someObject['type'] === 'word' && someObject['text'].length > 2)\r\n                    return true;\r\n                if (someObject['type'] === 'milestone')\r\n                    for (const someSubobject of someObject['children']) {\r\n                        // console.log(\"someSubobject\", JSON.stringify(someSubobject));\r\n                        if (someSubobject['type'] === 'text' && someSubobject['text'].length > 5)\r\n                            return true;\r\n                        if (someSubobject['type'] === 'word' && someSubobject['text'].length > 2)\r\n                            return true;\r\n                        if (someSubobject['type'] === 'milestone')\r\n                            for (const someSubSubobject of someSubobject['children']) {\r\n                                // console.log(\"someSubSubobject\", JSON.stringify(someSubSubobject));\r\n                                if (someSubSubobject['type'] === 'text' && someSubSubobject['text'].length > 5)\r\n                                    return true;\r\n                                if (someSubSubobject['type'] === 'word' && someSubSubobject['text'].length > 2)\r\n                                    return true;\r\n                                if (someSubSubobject['type'] === 'milestone')\r\n                                    for (const someSubSubSubobject of someSubSubobject['children']) {\r\n                                        // console.log(\"someSubSubSubobject\", JSON.stringify(someSubSubSubobject));\r\n                                        if (someSubSubSubobject['type'] === 'text' && someSubSubSubobject['text'].length > 5)\r\n                                            return true;\r\n                                        if (someSubSubSubobject['type'] === 'word' && someSubSubSubobject['text'].length > 2)\r\n                                            return true;\r\n                                        if (someSubSubSubobject['type'] === 'milestone')\r\n                                            for (const someSubSubSubSubobject of someSubSubSubobject['children']) {\r\n                                                // console.log(\"someSubSubSubSubobject\", JSON.stringify(someSubSubSubSubobject));\r\n                                                if (someSubSubSubSubobject['type'] === 'text' && someSubSubSubSubobject['text'].length > 5)\r\n                                                    return true;\r\n                                                if (someSubSubSubSubobject['type'] === 'word' && someSubSubSubSubobject['text'].length > 2)\r\n                                                    return true;\r\n                                                if (someSubSubSubSubobject['type'] === 'milestone') gotDeep = true;\r\n                                                // console.assert(someSubSubSubobject['type'] !== 'milestone', `We need to add more depth levels to hasText() for ${chapterNumberString}:${verseNumberString}`);\r\n                                            }\r\n                                    }\r\n                            }\r\n                    }\r\n            }\r\n            if (gotDeep) console.assert(false, `We need to add more depth levels to hasText() for ${bookID} ${chapterNumberString}:${verseNumberString}`);\r\n            // console.log(`hasText() for ${chapterNumberString}:${verseNumberString} returning false with ${typeof verseObjects} (${verseObjects.length}): ${JSON.stringify(verseObjects)}`);\r\n            return false;\r\n        }\r\n        // end of hasText function\r\n\r\n\r\n        // Main code for CVCheck function\r\n        let lowercaseBookID = bookID.toLowerCase();\r\n        let expectedVersesPerChapterList = [];\r\n        try {\r\n            expectedVersesPerChapterList = books.chaptersInBook(lowercaseBookID); // A list of integers -- numVerses for each chapter\r\n            // console.log(\"Got chapterList\", JSON.stringify(expectedVersesPerChapterList));\r\n        }\r\n        catch { }\r\n\r\n        // Try doing this using USFM-JS via runUsfmJsCheck()\r\n        const result1 = runUsfmJsCheck(givenText);\r\n        // console.log(\"Got a JSON result\", JSON.stringify(result1));\r\n        // console.log(\"Got a JSON headers result\", JSON.stringify(result1.returnedJSON.headers));\r\n        // console.log(\"Got a JSON chapters result\", JSON.stringify(result1.returnedJSON.chapters));\r\n        for (chapterNumberString in result1.returnedJSON.chapters) {\r\n            // console.log(`chapterNumberString=${chapterNumberString}`);\r\n            // if (chapterNumberString === '3')\r\n            //     console.log(`chapter ${chapterNumberString} ${JSON.stringify(result1.returnedJSON.chapters[chapterNumberString])}`);\r\n            let chapterInt;\r\n            try {\r\n                chapterInt = ourParseInt(chapterNumberString);\r\n            } catch (usfmCIerror) {\r\n                console.log(`CVCheck couldn't convert ${bookID} chapter '${chapterNumberString}': ${usfmCIerror}`);\r\n            }\r\n            if (chapterInt < 1 || chapterInt > expectedVersesPerChapterList.length)\r\n                addNoticeCV8({ priority: 869, message: \"Chapter number out of range\", C: chapterNumberString, extract: `${bookID} ${chapterNumberString}`, location: CVlocation });\r\n            else {\r\n                let discoveredVerseList = [], discoveredVerseWithTextList = [];\r\n                // console.log(`Chapter ${chapterNumberString} verses ${Object.keys(result1.returnedJSON.chapters[chapterNumberString])}`);\r\n                for (verseNumberString in result1.returnedJSON.chapters[chapterNumberString]) {\r\n                    if (verseNumberString === 'front') continue; // skip the rest here\r\n                    // if (chapterNumberString === '3')\r\n                    //     console.log(`verseNumberString=${verseNumberString}`);\r\n                    // if (chapterNumberString === '3' && verseNumberString === '14')\r\n                    //     console.log(`verse ${verseNumberString} ${JSON.stringify(result1.returnedJSON.chapters[chapterNumberString][verseNumberString])}`);\r\n                    const verseObjects = result1.returnedJSON.chapters[chapterNumberString][verseNumberString]['verseObjects'];\r\n                    // if (chapterNumberString === '3' && verseNumberString === '14')\r\n                    //     console.log(`verseObjects=${verseObjects}`);\r\n                    const verseHasText = hasText(verseObjects);\r\n                    if (verseNumberString.indexOf('-') >= 0) { // It's a verse bridge\r\n                        const bits = verseNumberString.split('-');\r\n                        const firstVString = bits[0], secondVString = bits[1];\r\n                        let intFirstV, intSecondV;\r\n                        try {\r\n                            intFirstV = ourParseInt(firstVString);\r\n                            intSecondV = ourParseInt(secondVString);\r\n                            for (let v = intFirstV; v <= intSecondV; v++) {\r\n                                discoveredVerseList.push(v);\r\n                                if (verseHasText)\r\n                                    discoveredVerseWithTextList.push(v);\r\n                            }\r\n                        } catch (usfmVIerror) {\r\n                            addNoticeCV8({ priority: 762, message: \"Unable to convert verse bridge numbers to integers\", C: chapterNumberString, V: verseNumberString, characterIndex: 3, extract: verseNumberString, location: `${CVlocation} with ${usfmVIerror}` });\r\n                        }\r\n                    } else { // It's NOT a verse bridge\r\n                        let verseInt;\r\n                        try {\r\n                            verseInt = ourParseInt(verseNumberString);\r\n                            discoveredVerseList.push(verseInt);\r\n                        } catch (usfmPIerror) {\r\n                            console.log(`We couldn't convert ${bookID} ${chapterNumberString} verse '${verseNumberString}': ${usfmPIerror}`);\r\n                        }\r\n\r\n                        if (verseInt < 1 || verseInt > expectedVersesPerChapterList[chapterInt - 1])\r\n                            addNoticeCV8({ priority: 868, message: \"Verse number out of range\", C: chapterNumberString, V: verseNumberString, extract: `${bookID} ${chapterNumberString}:${verseNumberString}`, location: CVlocation });\r\n\r\n                        if (verseHasText)\r\n                            discoveredVerseWithTextList.push(verseInt);\r\n                    }\r\n                }\r\n\r\n                // Check that expected verses numbers were actually all there\r\n                // console.log(\"Doing missing verse check\");\r\n                for (let v = 1; v <= expectedVersesPerChapterList[chapterInt - 1]; v++) {\r\n                    if (discoveredVerseList.indexOf(v) < 0)\r\n                        if (books.isOftenMissing(bookID, chapterInt, v))\r\n                            addNoticeCV8({ priority: 67, C: chapterNumberString, V: `${v}`, message: \"Verse appears to be left out\", location: CVlocation });\r\n                        else\r\n                            addNoticeCV8({ priority: 867, C: chapterNumberString, V: `${v}`, message: \"Verse appears to be missing\", location: CVlocation });\r\n                    // Check for existing verses but missing text\r\n                    if (discoveredVerseWithTextList.indexOf(v) < 0) {\r\n                        // const firstVerseObject = result1.returnedJSON.chapters[chapterNumberString][v]['verseObjects'][0];\r\n                        // console.log(\"firstVerseObject\", JSON.stringify(firstVerseObject));\r\n                        addNoticeCV8({ priority: 866, C: chapterNumberString, V: `${v}`, message: \"Verse seems to have no text\", location: CVlocation });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        addSuccessMessage(`Checked CV patterns for ${bookID}${CVlocation}`);\r\n    }\r\n    // end of CVCheck function\r\n\r\n\r\n    function ourCheckTextField(lineNumber, C, V, fieldName, fieldText, allowedLinks, fieldLocation, optionalCheckingOptions) {\r\n        /**\r\n        * @description - checks the given text field and processes the returned results\r\n        * @param {String} C - chapter number of the text being checked\r\n        * @param {String} V - verse number of the text being checked\r\n        * @param {String} fieldName - name of the field being checked\r\n        * @param {String} fieldText - the actual text of the field being checked\r\n        * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false\r\n        * @param {String} fieldLocation - description of where the field is located\r\n        * @param {Object} optionalCheckingOptions - parameters that might affect the check\r\n        */\r\n        // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n        // console.log(`cUSFM ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${fieldLocation}, …)`);\r\n        console.assert(fieldName !== undefined, \"cUSFM ourCheckTextField: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName === 'string', `cUSFM ourCheckTextField: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(fieldText !== undefined, \"cUSFM ourCheckTextField: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText === 'string', `cUSFM ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert(allowedLinks === true || allowedLinks === false, \"cUSFM ourCheckTextField: allowedLinks parameter must be either true or false\");\r\n\r\n        const dbtcResultObject = checkTextField(fieldName, fieldText, allowedLinks, fieldLocation, optionalCheckingOptions);\r\n\r\n        // Process results line by line to filter out potential false positives\r\n        //  for this particular kind of text field\r\n        for (const noticeEntry of dbtcResultObject.noticeList) {\r\n            console.log(\"Notice keys\", JSON.stringify(Object.keys(noticeEntry)));\r\n            console.assert(Object.keys(noticeEntry).length === 5, `USFM ourCheckTextField notice length=${Object.keys(noticeEntry).length}`);\r\n            if (!noticeEntry.message.startsWith(\"Mismatched () characters\") // 663 Mismatched left/right chars -- suppress these misleading warnings coz open quote can occur in one verse and close in another\r\n                && !noticeEntry.message.startsWith(\"Mismatched [] characters\")\r\n                && !noticeEntry.message.startsWith(\"Mismatched “” characters\")\r\n                && !noticeEntry.message.startsWith(\"Mismatched «» characters\")\r\n                && (!noticeEntry.message.startsWith(\"Unexpected | character after space\") || fieldText.indexOf('x-lemma') < 0) // inside \\zaln-s fields\r\n                && (!noticeEntry.message.startsWith(\"Unexpected doubled , characters\") || fieldText.indexOf('x-morph') < 0) // inside \\w fields\r\n                && (!noticeEntry.message.startsWith('Unexpected doubled \" characters') || fieldText.indexOf('x-morph') < 0) // inside \\w fields\r\n            ) {\r\n                // const newNoticeObject = { priority:noticeEntry.priority, message:noticeEntry.message }\r\n                // if (C !== undefined && C.length) newNoticeObject.C = C;\r\n                // if (V !== undefined && V.length) newNoticeObject.V = V;\r\n                // // if (filename !== undefined && filename.length) newNoticeObject.filename = filename;\r\n                // if (noticeEntry.characterIndex !== undefined) newNoticeObject.characterIndex = noticeEntry.characterIndex;\r\n                // if (noticeEntry.extract !== undefined && noticeEntry.extract.length) newNoticeObject.extract = noticeEntry.extract;\r\n                // if (noticeEntry.location !== undefined && noticeEntry.location.length) newNoticeObject.location = noticeEntry.location;\r\n                addNoticeCV8({ ...noticeEntry, lineNumber, C, V });\r\n            }\r\n        }\r\n    }\r\n    // end of ourCheckTextField function\r\n\r\n\r\n    function ourBasicFileChecks(filename, fileText, fileLocation, optionalCheckingOptions) {\r\n        // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n        console.assert(filename !== undefined, \"cUSFM ourBasicFileChecks: 'filename' parameter should be defined\");\r\n        console.assert(typeof filename === 'string', `cUSFM ourBasicFileChecks: 'filename' parameter should be a string not a '${typeof filename}'`);\r\n        console.assert(fileText !== undefined, \"cUSFM ourBasicFileChecks: 'fileText' parameter should be defined\");\r\n        console.assert(typeof fileText === 'string', `cUSFM ourBasicFileChecks: 'fileText' parameter should be a string not a '${typeof fileText}'`);\r\n\r\n        const resultObject = checkTextfileContents(languageCode, filename, fileText, fileLocation, optionalCheckingOptions);\r\n\r\n        // Choose only ONE of the following\r\n        // This is the fast way of append the results from this field\r\n        result.noticeList = result.noticeList.concat(resultObject.noticeList);\r\n        // If we need to put everything through addNoticeCV8, e.g., for debugging or filtering\r\n        //  process results line by line\r\n        // for (const noticeEntry of resultObject.noticeList)\r\n        //     addNoticeCV8({priority:noticeEntry.priority, noticeEntry.message, noticeEntry[2], noticeEntry[3], noticeEntry[4], noticeEntry[5], noticeEntry[6], noticeEntry[7]);\r\n    }\r\n    // end of ourBasicFileChecks function\r\n\r\n\r\n    function checkUSFMCharacterFields(filename, fileText, fileLocation) {\r\n        // Check matched pairs\r\n        for (const punctSet of [\r\n            // Character formatting\r\n            ['\\\\add ', '\\\\add*'], ['\\\\addpn ', '\\\\addpn*'],\r\n            ['\\\\bd ', '\\\\bd*'], ['\\\\bdit ', '\\\\bdit*'],\r\n            ['\\\\bk ', '\\\\bk*'],\r\n            ['\\\\dc ', '\\\\dc*'],\r\n            ['\\\\em ', '\\\\em*'],\r\n            ['\\\\fig ', '\\\\fig*'],\r\n            ['\\\\it ', '\\\\it*'],\r\n            ['\\\\k ', '\\\\k*'],\r\n            ['\\\\nd ', '\\\\nd*'], ['\\\\ndx ', '\\\\ndx*'],\r\n            ['\\\\no ', '\\\\no*'],\r\n            ['\\\\ord ', '\\\\ord*'],\r\n            ['\\\\pn ', '\\\\pn*'],\r\n            ['\\\\pro ', '\\\\pro*'],\r\n            ['\\\\qt ', '\\\\qt*'],\r\n            ['\\\\sc ', '\\\\sc*'],\r\n            ['\\\\sig ', '\\\\sig*'],\r\n            ['\\\\sls ', '\\\\sls*'],\r\n            ['\\\\tl ', '\\\\tl*'],\r\n            ['\\\\w ', '\\\\w*'],\r\n            ['\\\\wg ', '\\\\wg*'], ['\\\\wh ', '\\\\wh*'],\r\n            ['\\\\wj ', '\\\\wj*'],\r\n\r\n            ['\\\\ca ', '\\\\ca*'], ['\\\\va ', '\\\\va*'],\r\n\r\n            ['\\\\f ', '\\\\f*'], ['\\\\x ', '\\\\x*'],\r\n        ]) {\r\n            const opener = punctSet[0], closer = punctSet[1];\r\n            const lCount = countOccurrences(fileText, opener);\r\n            const rCount = countOccurrences(fileText, closer);\r\n            if (lCount !== rCount)\r\n                addNoticeCV8({ priority: 873, message: `Mismatched ${opener}${closer} fields`, extract: `(left=${lCount.toLocaleString()}, right=${rCount.toLocaleString()})`, location: fileLocation });\r\n        }\r\n    }\r\n    // end of checkUSFMCharacterFields function\r\n\r\n\r\n    function checkUSFMFileContents(filename, fileText, markerSet, fileLocation) {\r\n        // Does global checks on the file\r\n        // Note: These run the risk of duplicating messages that are found within individual lines.\r\n        //          However, it's common in USFM for parentheses to open '(' in one verse\r\n        //                      and close ')' in another. So the USFM line check can't check that.\r\n        //          Also, the USFM v3.0 spec seems to allow/require whitespace reduction,\r\n        //              i.e., newLines can conceivably appear WITHIN a footnote for example.\r\n\r\n        // Check markers like \\add ... \\add*, \\f .. \\f*\r\n        checkUSFMCharacterFields(filename, fileText, fileLocation)\r\n\r\n        // Now do the general global checks (e.g., for general punctuation)\r\n        ourBasicFileChecks(filename, fileText, fileLocation);\r\n\r\n        for (const compulsoryMarker of COMPULSORY_MARKERS)\r\n            if (!markerSet.has(compulsoryMarker))\r\n                addNoticeCV8({ priority: 819, message: \"Missing compulsory USFM line\", extract: `missing \\\\${compulsoryMarker}`, location: fileLocation });\r\n        for (const expectedMarker of EXPECTED_MARKERS)\r\n            if (!markerSet.has(expectedMarker)\r\n                && (!expectedMarker.endsWith('1') || !markerSet.has(expectedMarker.substring(0, expectedMarker.length - 1))))\r\n                addNoticeCV8({ priority: 519, message: \"Missing expected USFM line\", extract: `missing \\\\${expectedMarker}`, location: fileLocation });\r\n        if (books.isExtraBookID(bookID))\r\n            for (const expectedMarker of EXPECTED_PERIPHERAL_BOOK_MARKERS)\r\n                if (!markerSet.has(expectedMarker))\r\n                    addNoticeCV8({ priority: 517, message: \"Missing expected USFM line\", extract: `missing \\\\${expectedMarker}`, location: fileLocation });\r\n                else\r\n                    for (const expectedMarker of EXPECTED_BIBLE_BOOK_MARKERS)\r\n                        if (!markerSet.has(expectedMarker))\r\n                            addNoticeCV8({ priority: 518, message: \"Missing expected USFM line\", extract: `missing \\\\${expectedMarker}`, location: fileLocation });\r\n        for (const deprecatedMarker of DEPRECATED_MARKERS)\r\n            if (markerSet.has(deprecatedMarker))\r\n                addNoticeCV8({ priority: 218, message: \"Using deprecated USFM marker\", extract: `\\\\${deprecatedMarker}`, location: fileLocation });\r\n    }\r\n    // end of checkUSFMFileContents function\r\n\r\n\r\n    function checkUSFMLineInternals(lineNumber, C, V, marker, rest, lineLocation, optionalCheckingOptions) {\r\n        // Handles character formatting within the line contents\r\n        // let adjustedRest = rest;\r\n\r\n        if (marker === 'c' && isNaN(rest))\r\n            addNoticeCV8({ priority: 822, message: \"Expected \\\\c field to contain an integer\", lineNumber, C, V, characterIndex: 3, extract: '\\\\c ' + rest, location: lineLocation });\r\n        if (marker === 'v') {\r\n            let Vstr = (rest) ? rest.split(' ', 1)[0] : '?';\r\n            if (isNaN(Vstr) && Vstr.indexOf('-') < 0)\r\n                addNoticeCV8({ priority: 822, C, V, message: \"Expected \\\\v field to contain an integer\", characterIndex: 3, extract: '\\\\v ' + rest, location: lineLocation });\r\n        }\r\n        const allowedLinks = (marker === 'w' || marker === 'k-s' || marker === 'SPECIAL1')\r\n            // (because we don't know what marker SPECIAL1 is, so default to \"no false alarms\")\r\n            && rest.indexOf('x-tw') >= 0;\r\n        if (rest) ourCheckTextField(lineNumber, C, V, '\\\\' + marker, rest, allowedLinks, ' field ' + lineLocation, optionalCheckingOptions);\r\n    }\r\n    // end of checkUSFMLineInternals function\r\n\r\n\r\n    function checkUSFMLineContents(lineNumber, C, V, marker, rest, lineLocation) {\r\n        // Looks at the marker and determines what content is allowed/expected on the rest of the line\r\n        // 'SPECIAL1' is used internally here when a character other than a backslash starts a line\r\n        if (ALLOWED_LINE_START_MARKERS.indexOf(marker) >= 0 || marker === 'SPECIAL1') {\r\n            if (rest && MARKERS_WITHOUT_CONTENT.indexOf(marker) >= 0)\r\n                if (isWhitespace(rest))\r\n                    addNoticeCV8({ priority: 301, message: `Unexpected whitespace after \\\\${marker} marker`, C, V, lineNumber, characterIndex: marker.length, extract: rest, location: lineLocation });\r\n                else if (rest !== 'ס') // in UHB NEH 3:20\r\n                    addNoticeCV8({ priority: 401, message: `Unexpected content after \\\\${marker} marker`, C, V, lineNumber, characterIndex: marker.length, extract: rest, location: lineLocation });\r\n                else if (MARKERS_WITH_COMPULSORY_CONTENT.indexOf(marker) >= 0 && !rest)\r\n                    addNoticeCV8({ priority: 711, message: \"Expected compulsory content\", C, V, lineNumber, characterIndex: marker.length, location: ` after \\\\${marker} marker${lineLocation}` });\r\n        } else // it's not a recognised line marker\r\n            // Lower priority of deprecated \\s5 markers (compared to all other unknown markers)\r\n            addNoticeCV8({ priority: marker === 's5' ? 111 : 809, message: `${marker === 's5' ? 'Deprecated' : 'Unexpected'} '\\\\${marker}' marker at start of line`, C, V, lineNumber, characterIndex: 1, location: lineLocation });\r\n        if (rest) checkUSFMLineInternals(lineNumber, marker, rest, lineLocation);\r\n    }\r\n    // end of checkUSFMLineContents function\r\n\r\n\r\n    function mainUSFMCheck(bookID, filename, givenText, location) {\r\n        // console.log(\"Running mainUSFMCheck() (can take quite a while for a large book)…\");\r\n\r\n        let ourLocation = location;\r\n        if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n\r\n        let lowercaseBookID = bookID.toLowerCase();\r\n        // eslint-disable-next-line no-unused-vars\r\n        let numChaptersThisBook = 0;\r\n        try {\r\n            numChaptersThisBook = books.chaptersInBook(lowercaseBookID).length;\r\n        }\r\n        catch {\r\n            if (!books.isValidBookID(bookID)) // must not be in FRT, BAK, etc.\r\n                addNoticeCV8({ priority: 903, message: \"Bad function call: should be given a valid book abbreviation\", extract: bookID, location: ` (not '${bookID}')${ourLocation}` });\r\n        }\r\n\r\n        function findStartMarker(C, V, lineNumber, USFMline) {\r\n            // Returns the USFM marker at the start of the line\r\n            //  (without the leading backslash but including full self-closing milestones)\r\n            console.assert(USFMline && USFMline[0] === '\\\\', `Programming error in findStartMarker(${C}:${V}, ${lineNumber}, ${USFMline})`);\r\n            let foundMarker = '';\r\n            for (let characterIndex = 1; characterIndex < USFMline.length; characterIndex++) {\r\n                const char = USFMline[characterIndex];\r\n                if (char === ' ') break;\r\n                // Cope with self-closing milestones like \\k-s\\*\r\n                if (char === '\\\\' && (characterIndex === USFMline.length - 1 || USFMline[characterIndex + 1] !== '*')) {\r\n                    const extract = USFMline.substring(0, extractLength) + (USFMline.length > extractLength ? '…' : '');\r\n                    addNoticeCV8({ priority: 603, message: \"USFM marker doesn't end with space\", C, V, lineNumber, characterIndex, extract, location: ourLocation });\r\n                    break;\r\n                }\r\n                foundMarker += char;\r\n                if (char === '*') break;\r\n            }\r\n            return foundMarker;\r\n        }\r\n\r\n        let lines = givenText.split('\\n');\r\n        // console.log(`  '${ourLocation}' has ${lines.length.toLocaleString()} total lines`);\r\n\r\n        // let lastB = '';\r\n        let lastC = '', lastV = '', C = '0', V = '0';\r\n        let lastIntC = 0, lastIntV = 0;\r\n        // let numVersesThisChapter = 0;\r\n        let lastMarker = '', lastRest = '';\r\n        const markerSet = new Set();\r\n        for (let n = 1; n <= lines.length; n++) {\r\n            let line = lines[n - 1];\r\n            if (C === '0') V = n.toString();\r\n            // console.log(`line '${line}'${atString}`);\r\n            if (!line) {\r\n                // addNoticeCV8({priority:103, \"Unexpected blank line\", 0, '', location:ourLocation});\r\n                continue;\r\n            }\r\n            let characterIndex;\r\n            if ((characterIndex = line.indexOf('\\r')) >= 0) {\r\n                const iy = characterIndex + halfLength; // Want extract to focus more on what follows\r\n                const extract = (iy > halfLength ? '…' : '') + line.substring(iy - halfLength, iy + halfLengthPlus).replace(/ /g, '␣') + (iy + halfLengthPlus < line.length ? '…' : '')\r\n                addNoticeCV8({ priority: 703, C, V, message: \"Unexpected CarriageReturn character\", lineNumber: n, characterIndex, extract, location: ourLocation });\r\n            }\r\n\r\n            let marker, rest;\r\n            if (line[0] === '\\\\') {\r\n                marker = findStartMarker(C, V, n, line);\r\n                rest = line.substring(marker.length + 2); // Skip backslash, marker, and space after marker\r\n                // console.log(`Line ${n}: marker='${marker}' rest='${rest}'`);\r\n            } else { // Line didn't start with a backslash\r\n                // NOTE: Some unfoldingWord USFM Bibles commonly have this\r\n                //          so it's not necessarily either an error or a warning\r\n                rest = line;\r\n                if (`([“‘`.indexOf(line[0]) < 0) { // These are the often expected characters\r\n                    // Drop the priority if it's a \"half-likely\" character\r\n                    addNoticeCV8({ priority: `\"`.indexOf(line[0]) < 0 ? 980 : 280, C, V, message: \"Expected line to start with backslash\", lineNumber: n, characterIndex: 0, extract: line[0], location: ourLocation });\r\n                    if (line[1] === '\\\\') { // Let's drop the leading punctuation and try to check the rest of the line\r\n                        marker = line.substring(2).split(' ', 1)[0];\r\n                        rest = line.substring(marker.length + 2 + 1); // Skip leading character, backslash, marker, and space after marker\r\n                        // console.log(`USFM after ${line[0]} got '${marker}': '${rest}'`);\r\n                    }\r\n                    else\r\n                        marker = 'rem'; // to try to avoid consequential errors, but the rest of the line won't be checked\r\n                } else { // How do we handle an allowed line that doesn't start with a backslash?\r\n                    // Can't use 'rem' because we want the rest of the line checked\r\n                    marker = 'SPECIAL1'; // Handle as a special case\r\n                }\r\n            }\r\n            markerSet.add(marker); // Keep track of all line markers\r\n\r\n            // Handle C/V numbers including verse bridges\r\n            let intC, intV, vIndex;\r\n            if (marker === 'c') {\r\n                C = rest; V = '0';\r\n                try {\r\n                    intC = ourParseInt(C);\r\n                } catch (usfmICerror) {\r\n                    addNoticeCV8({ priority: 724, C, V, message: \"Unable to convert chapter number to integer\", lineNumber: n, characterIndex: 3, extract: `${rest.substring(0, halfLength)}${rest.length > halfLength ? '…' : ''}`, location: ourLocation });\r\n                    intC = -999; // Used to prevent consequential errors\r\n                }\r\n                if (C === lastC || (intC > 0 && intC !== lastIntC + 1))\r\n                    addNoticeCV8({ priority: 764, C, V, message: \"Chapter number didn't increment correctly\", lineNumber: n, characterIndex: 3, extract: `${rest.substring(0, halfLength)}${rest.length > halfLength ? '…' : ''} (${lastC ? lastC : '0'} → ${C})`, location: ourLocation });\r\n                lastC = C; lastV = '0';\r\n                lastIntC = intC; lastIntV = 0;\r\n            } else if (marker === 'v') {\r\n                V = (rest) ? rest.split(' ', 1)[0] : '?';\r\n                if (V.indexOf('-') < 0) { // no hyphen -> no verse bridge\r\n                    try {\r\n                        intV = ourParseInt(V);\r\n                    } catch (usfmIVerror) {\r\n                        addNoticeCV8({ priority: 723, C, V, message: \"Unable to convert verse number to integer\", lineNumber: n, characterIndex: 3, extract: `${rest.substring(0, halfLength)}${rest.length > halfLength ? '…' : ''}`, location: ourLocation });\r\n                        intV = -999; // Used to prevent consequential errors\r\n                    }\r\n                    if (V === lastV || (intV > 0 && intV !== lastIntV + 1))\r\n                        addNoticeCV8({ priority: 763, C, V, message: \"Verse number didn't increment correctly\", lineNumber: n, characterIndex: 3, extract: `${rest.substring(0, halfLength)}${rest.length > halfLength ? '…' : ''} (${lastV ? lastV : '0'} → ${V})`, location: ourLocation });\r\n                    lastV = V; lastIntV = intV;\r\n                } else { // handle verse bridge\r\n                    const bits = V.split('-');\r\n                    const firstV = bits[0], secondV = bits[1];\r\n                    let intFirstV, intSecondV;\r\n                    try {\r\n                        intFirstV = ourParseInt(firstV);\r\n                        intSecondV = ourParseInt(secondV);\r\n                    } catch (usfmV12error) {\r\n                        addNoticeCV8({ priority: 762, C, V, message: \"Unable to convert verse bridge numbers to integers\", lineNumber: n, characterIndex: 3, extract: `${rest.substring(0, Math.max(9, extractLength))}${rest.length > extractLength ? '…' : ''}`, location: ourLocation });\r\n                        intFirstV = -999; intSecondV = -998; // Used to prevent consequential errors\r\n                    }\r\n                    if (intSecondV <= intFirstV)\r\n                        addNoticeCV8({ priority: 769, C, V, message: \"Verse bridge numbers not in ascending order\", lineNumber: n, characterIndex: 3, extract: `${rest.substring(0, Math.max(9, extractLength))}${rest.length > extractLength ? '…' : ''} (${firstV} → ${secondV})`, location: ourLocation });\r\n                    else if (firstV === lastV || (intFirstV > 0 && intFirstV !== lastIntV + 1))\r\n                        addNoticeCV8({ priority: 765, C, V, message: \"Bridged verse numbers didn't increment correctly\", lineNumber: n, characterIndex: 3, extract: `${rest.substring(0, Math.max(9, extractLength))}${rest.length > extractLength ? '…' : ''} (${lastV} → ${firstV})`, location: ourLocation });\r\n                    lastV = secondV; lastIntV = intSecondV;\r\n                }\r\n            } else if ((vIndex = rest.indexOf('\\\\v ')) >= 0) {\r\n                // verse number marker follows another marker on the same line, so it's inside `rest`\r\n                const restRest = rest.substring(vIndex + 3);\r\n                // console.log(`Got restRest=${restRest}`);\r\n                try {\r\n                    intV = parseInt(restRest);\r\n                    // console.log(\"Got\", intV);\r\n                } catch (usfmIIVerror) {\r\n                    addNoticeCV8({ priority: 720, C, V, message: \"Unable to convert internal verse number to integer\", lineNumber: n, characterIndex: 3, extract: `${restRest.substring(0, halfLength)}${restRest.length > halfLength ? '…' : ''}`, location: ourLocation });\r\n                    intV = -999; // Used to prevent consequential errors\r\n                }\r\n                if (intV > 0 && intV !== lastIntV + 1)\r\n                    addNoticeCV8({ priority: 761, C, V, message: \"Verse number didn't increment correctly\", lineNumber: n, characterIndex: 3, extract: `${restRest.substring(0, halfLength)}${restRest.length > halfLength ? '…' : ''} (${lastV ? lastV : '0'} → ${V})`, location: ourLocation });\r\n                lastV = intV.toString(); lastIntV = intV;\r\n            }\r\n\r\n            if (marker === 'id' && !rest.startsWith(bookID)) {\r\n                const thisLength = Math.max(4, extractLength);\r\n                const extract = `${rest.substring(0, thisLength)}${rest.length > thisLength ? '…' : ''}`;\r\n                addNoticeCV8({ priority: 987, C, V, message: \"Expected \\\\id line to start with book identifier\", lineNumber: n, characterIndex: 4, extract, location: ourLocation });\r\n            }\r\n            // Check the order of markers\r\n            // In headers\r\n            if (marker === 'toc2' && lastMarker !== 'toc1')\r\n                addNoticeCV8({ priority: 87, C, V, message: \"Expected \\\\toc2 line to follow \\\\toc1\", lineNumber: n, characterIndex: 1, extract: `(not '${lastMarker}')`, location: ourLocation });\r\n            else if (marker === 'toc3' && lastMarker !== 'toc2')\r\n                addNoticeCV8({ priority: 87, C, V, message: \"Expected \\\\toc3 line to follow \\\\toc2\", lineNumber: n, characterIndex: 1, extract: `(not '${lastMarker}')`, location: ourLocation });\r\n            // In chapters\r\n            else if ((PARAGRAPH_MARKERS.indexOf(marker) >= 0 || marker === 's5' || marker === 'ts\\\\*')\r\n                && PARAGRAPH_MARKERS.indexOf(lastMarker) >= 0\r\n                && !lastRest)\r\n                addNoticeCV8({ priority: 399, C, V, message: \"Useless paragraph marker\", lineNumber: n, characterIndex: 1, extract: `('${lastMarker}' before '${marker}')`, location: ourLocation });\r\n\r\n            // Do general checks\r\n            checkUSFMLineContents(n, C, V, marker, rest, ourLocation);\r\n\r\n            lastMarker = marker; lastRest = rest;\r\n        }\r\n\r\n        // Do overall global checks of the entire text\r\n        checkUSFMFileContents(filename, givenText, markerSet, ourLocation) // Do this last so the results are lower in the lists\r\n\r\n        addSuccessMessage(`Checked all ${lines.length.toLocaleString()} line${lines.length === 1 ? '' : 's'} for ${bookID}${ourLocation}`)\r\n    }\r\n\r\n    /* function runSlowTask(which) {\r\n        // Ideally these should be run in parallel using multiprocessing\r\n        //  See https://hackernoon.com/multithreading-multiprocessing-and-the-nodejs-event-loop-5b2929bd450b\r\n        console.log(`runSlowTask(${which})`)\r\n        return (which === 1)\r\n            ? mainUSFMCheck(bookID, filename, givenText, location)\r\n            : runBCSGrammarCheck(filename, givenText, location);\r\n    }\r\n    // Main code for checkUSFMText()\r\n    console.log(\"Starting USFM checking tasks…\");\r\n    const tasks = [1,2].map(runSlowTask);\r\n    const allResults = await Promise.all(tasks);\r\n    console.log(`  Finished all tasks with ${JSON.stringify(allResults)}.`);\r\n    console.log(\"  Finished all tasks.\");\r\n    if (!allResults[1].isValidUSFM)\r\n        addNoticeCV8({priority:942, \"USFM Grammar check fails\", location});\r\n    console.log(\"  Warnings:\", JSON.stringify(allResults[1].warnings));\r\n    // Display these warnings but with a lower priority\r\n    for (const warningString of allResults[1].warnings)\r\n        addNoticeCV8({priority:103, `USFMGrammar: ${warningString.trim()}`, location});\r\n    */\r\n\r\n    // NOTE: If we're careful about how/when we add their notices to our global list,\r\n    //  we should be able to run these three slowish checks in parallel on different threads/processes\r\n    let allResults = [];\r\n    allResults.push(mainUSFMCheck(bookID, filename, givenText, ourLocation));\r\n    allResults.push(CVCheck(bookID, givenText, ourLocation));\r\n    if (!books.isExtraBookID(bookID))\r\n        allResults.push(ourRunBCSGrammarCheck(filename, givenText, ourLocation));\r\n    // console.assert(allResults.length === 2);\r\n    // console.log(\"allResults\", JSON.stringify(allResults));\r\n    // if (!allResults[1].isValidUSFM)\r\n    //     addNoticeCV8({priority:941, \"USFM Grammar check fails\", location});\r\n    // console.log(\"  Warnings:\", JSON.stringify(allResults[1].warnings));\r\n    // // Display these warnings but with a lower priority\r\n    // for (const warningString of allResults[1].warnings)\r\n    // addNoticeCV8({priority:103, `USFMGrammar: ${warningString.trim()}`, location});\r\n\r\n    // console.log(`  checkUSFMText returning with ${result.successList.length.toLocaleString()} success(es) and ${result.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(`checkUSFMText result is ${JSON.stringify(result)}`);\r\n    return result;\r\n}\r\n// end of checkUSFMText function\r\n\r\n\r\nexport default checkUSFMText;\r\n","// import { isWhitespace, countOccurrences } from './text-handling-functions'\r\nimport yaml from 'yaml';\r\nimport checkTextField from './field-text-check';\r\n\r\n\r\nconst YAML_VALIDATOR_VERSION_STRING = '0.1.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nfunction checkYAMLText(textName, YAMLText, givenLocation, optionalCheckingOptions) {\r\n    /* This function is optimised for checking the entire file, i.e., all lines.\r\n\r\n     Returns a result object containing a successList and a noticeList,\r\n        as well as the parsed YAML for further checking.\r\n\r\n     */\r\n    // console.log(`checkYAMLText(${textName}, ${YAMLText.length}, ${givenLocation})…`);\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    if (textName) ourLocation = ` in ${textName}${ourLocation}`;\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (ytcError) {}\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n        // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    // const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    // const halfLengthPlus = Math.floor((extractLength+1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    const cytResult = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(`checkYAMLText success: ${successString}`);\r\n        cytResult.successList.push(successString);\r\n    }\r\n    function addNotice6(noticeObject) {\r\n        // console.log(`checkYAMLText Notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(noticeObject.priority!==undefined, \"cYt addNotice6: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority==='number', `cManT addNotice6: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message!==undefined, \"cYt addNotice6: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message==='string', `cManT addNotice6: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(characterIndex!==undefined, \"cYt addNotice6: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex==='number', `cManT addNotice6: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract!==undefined, \"cYt addNotice6: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract==='string', `cManT addNotice6: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location!==undefined, \"cYt addNotice6: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location==='string', `cYt addNotice6: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        cytResult.noticeList.push(noticeObject);\r\n    }\r\n\r\n    function ourCheckTextField(fieldName, fieldText, allowedLinks, optionalFieldLocation, optionalCheckingOptions) {\r\n        /**\r\n        * @description - checks the given text field and processes the returned results\r\n        * @param {String} fieldName - name of the field being checked\r\n        * @param {String} fieldText - the actual text of the field being checked\r\n        * @param {boolean} allowedLinks - true if links are allowed in the field, otherwise false\r\n        * @param {String} optionalFieldLocation - description of where the field is located\r\n        * @param {Object} optionalCheckingOptions - parameters that might affect the check\r\n        */\r\n        // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n        // console.log(`cYt ourCheckTextField(${fieldName}, (${fieldText.length}), ${allowedLinks}, ${fieldLocation}, …)`);\r\n        console.assert(fieldName!==undefined, \"cYt ourCheckTextField: 'fieldName' parameter should be defined\");\r\n        console.assert(typeof fieldName==='string', `cYt ourCheckTextField: 'fieldName' parameter should be a string not a '${typeof fieldName}'`);\r\n        console.assert(fieldText!==undefined, \"cYt ourCheckTextField: 'fieldText' parameter should be defined\");\r\n        console.assert(typeof fieldText==='string', `cYt ourCheckTextField: 'fieldText' parameter should be a string not a '${typeof fieldText}'`);\r\n        console.assert( allowedLinks===true || allowedLinks===false, \"cYt ourCheckTextField: allowedLinks parameter must be either true or false\");\r\n\r\n        const resultObject = checkTextField(fieldName, fieldText, allowedLinks, optionalFieldLocation, optionalCheckingOptions);\r\n\r\n        // Process results line by line\r\n        //  suppressing undesired errors\r\n        for (const noticeEntry of resultObject.noticeList) {\r\n            // console.assert(Object.keys(noticeEntry).length === 5, `YAML ourCheckTextField notice length=${Object.keys(noticeEntry).length}`);\r\n            if (noticeEntry.priority !== 191 // \"Unexpected XXX character after space\"\r\n              && noticeEntry.message !== \"Unexpected ' character after space\"\r\n            //   && noticeEntry.message !== \"Unexpected space after ' character\"\r\n              && noticeEntry.message !== \"Unexpected space after [ character\"\r\n              && (noticeEntry.message !== \"Unexpected doubled - characters\" || fieldText === '---')\r\n              )\r\n                addNotice6(noticeEntry);\r\n    }\r\n}\r\n    // end of ourCheckTextField function\r\n\r\n    function checkYAMLLineContents(lineName, lineText, lineLocation) {\r\n\r\n        // console.log(`checkYAMLLineContents for '${lineName} ${lineText}' at${lineLocation}`);\r\n        let thisText = lineText\r\n\r\n        // Remove leading spaces\r\n        thisText = thisText.replace(/^ +/g,'')\r\n        // console.log(`After removing leading spaces have '${thisText}'`);\r\n\r\n        // Remove leading hyphens\r\n        thisText = thisText.replace(/^-/g,'')\r\n        // console.log(`After removing hyphens have '${thisText}'`);\r\n\r\n        // Remove leading spaces again now\r\n        thisText = thisText.replace(/^ +/g,'')\r\n        // console.log(`After removing more leading spaces have '${thisText}'`);\r\n\r\n        const allowedLinksInLine = thisText.startsWith('url:') || thisText.startsWith('chapter_url:');\r\n        if (thisText)\r\n            ourCheckTextField(lineName, thisText, allowedLinksInLine, lineLocation, optionalCheckingOptions);\r\n    }\r\n    // end of checkYAMLLine function\r\n\r\n\r\n    // Main code for checkYAMLText function\r\n    const lines = YAMLText.split('\\n');\r\n    // console.log(`  '${location}' has ${lines.length.toLocaleString()} total lines`);\r\n    let formData;\r\n    try {\r\n        formData = yaml.parse(YAMLText);\r\n        // console.log(\"yaml.parse(YAMLText) got formData\", JSON.stringify(formData));\r\n    }\r\n    catch(yamlError) {\r\n        // console.log(`ERROR: yaml parse error: ${yamlError.message}`);\r\n        addNotice6({priority:920, message:yamlError.message, location:ourLocation})\r\n    }\r\n    // Add the parsed YAML to our result\r\n    cytResult.formData = formData;\r\n\r\n    // let lastNumLeadingSpaces = 0;\r\n    // let lastLineContents;\r\n    for (let n= 1; n <= lines.length; n++) {\r\n\r\n        const line = lines[n - 1];\r\n        // let numLeadingSpaces;\r\n        // if (line) {\r\n        //     numLeadingSpaces = line.match(/^ */)[0].length;\r\n            // console.log(`Got numLeadingSpaces=${numLeadingSpaces} for ${line}${atString}`);\r\n        //     if (numLeadingSpaces && lastNumLeadingSpaces && numLeadingSpaces!=lastNumLeadingSpaces)\r\n        //         addNotice6({472, \"Nesting seems confused\", 0, '', atString);\r\n\r\n            checkYAMLLineContents(`line ${n.toLocaleString()}`, line, ourLocation);\r\n        // } else {\r\n        //     // This is a blank line\r\n        //     numLeadingSpaces = 0;\r\n        // }\r\n\r\n        // lastLineContents = line;\r\n        // lastNumLeadingSpaces = numLeadingSpaces;\r\n    }\r\n\r\n    addSuccessMessage(`Checked all ${lines.length.toLocaleString()} line${lines.length===1?'':'s'}${ourLocation}.`);\r\n    if (cytResult.noticeList)\r\n        addSuccessMessage(`checkYAMLText v${YAML_VALIDATOR_VERSION_STRING} finished with ${cytResult.noticeList.length?cytResult.noticeList.length.toLocaleString():\"zero\"} notice${cytResult.noticeList.length === 1 ? '' : 's'}`);\r\n    else\r\n        addSuccessMessage(`No errors or warnings found by checkYAMLText v${YAML_VALIDATOR_VERSION_STRING}`)\r\n    // console.log(`  checkYAMLText returning with ${cytResult.successList.length.toLocaleString()} success(es), ${cytResult.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(\"checkYAMLText result is\", JSON.stringify(result));\r\n    return cytResult;\r\n}\r\n// end of checkYAMLText function\r\n\r\n\r\nexport default checkYAMLText;\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 397;","export * from './file-check';\r\nexport * from './book-package-check';\r\nexport * from './book-packages-check';\r\nexport * from './repo-check';\r\nexport * from './notice-processing-functions';\r\nexport * from './RenderProcessedResults';","export {default as FileCheck} from './FileCheck';\r\n\r\n","import React, { useEffect, useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import ReactJson from 'react-json-view';\r\n// import { Paper, Button } from '@material-ui/core';\r\n// import { RepositoryContext, FileContext } from 'gitea-react-toolkit';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { getFileCached, checkFileContents } from '../../core';\r\nimport { processNoticesToErrorsWarnings, processNoticesToSevereMediumLow, processNoticesToSingleList } from '../notice-processing-functions';\r\nimport { RenderSuccessesErrorsWarnings, RenderSuccessesSevereMediumLow, RenderSuccessesWarningsGradient, RenderElapsedTime } from '../RenderProcessedResults';\r\nimport { ourParseInt } from '../../core/utilities';\r\n// import { consoleLogObject } from '../../core/utilities';\r\n\r\n\r\n// const FILE_CHECK_VERSION_STRING = '0.1.3';\r\n\r\n\r\nfunction FileCheck(props) {\r\n    // console.log(`I'm here in FileCheck v${FILE_CHECK_VERSION_STRING}`);\r\n    // consoleLogObject(\"props\", props);\r\n\r\n    const [result, setResultValue] = useState(\"Waiting-FileCheck\");\r\n    useEffect(() => {\r\n      // console.log(\"FileCheck.useEffect() called with \", JSON.stringify(props));\r\n\r\n      // Use an IIFE (Immediately Invoked Function Expression)\r\n      //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174\r\n      (async () => {\r\n        // console.log(\"Started FileCheck.unnamedFunction()\");\r\n\r\n        // Display our \"waiting\" message\r\n        setResultValue(<p style={{ color: 'magenta' }}>Checking <b>{filename}</b>…</p>);\r\n        // console.log(`About to call getFileCached(${username}, ${repoName}, ${filename}, ${branch})…`);\r\n        const fileContent = await getFileCached({ username: username, repository: repoName, path: filename, branch: branch });\r\n        let rawCFResults = { noticeList:[{priority:990, message:\"Unable to load file\", filename}], elapsedSeconds:0 };\r\n        if (fileContent) {\r\n          const languageCode = repoName.split('_')[0];\r\n          rawCFResults = await checkFileContents(languageCode, filename, fileContent, givenLocation, checkingOptions);\r\n        }\r\n        // console.log(`FileCheck got initial results with ${rawCFResults.successList.length} success message(s) and ${rawCFResults.noticeList.length} notice(s)`);\r\n\r\n        // Since we know the repoName here, add it to our notices\r\n        for (const thisNotice of rawCFResults.noticeList)\r\n          thisNotice.repoName = repoName; // Add in this info that we know\r\n\r\n        // Add some extra fields to our rawCFResults object in case we need this information again later\r\n        rawCFResults.checkType = 'File';\r\n        rawCFResults.username = username;\r\n        rawCFResults.repoName = repoName;\r\n        rawCFResults.branch = props.branch;\r\n        rawCFResults.filename = filename;\r\n        rawCFResults.checkingOptions = checkingOptions;\r\n\r\n        // Now do our final handling of the result\r\n        let processOptions = { // Uncomment any of these to test them\r\n          // 'maximumSimilarMessages': 4, // default is 3  -- 0 means don't suppress\r\n          // 'errorPriorityLevel': 800, // default is 700\r\n          // 'cutoffPriorityLevel': 100, // default is 0\r\n          // 'sortBy': 'ByPriority', // default is 'AsFound'\r\n          // 'ignorePriorityNumberList': [123, 202], // default is []\r\n        };\r\n        // Or this allows the parameters to be specified as a FileCheck property\r\n        if (props.maximumSimilarMessages) processOptions.maximumSimilarMessages = ourParseInt(props.maximumSimilarMessages);\r\n        if (props.errorPriorityLevel) processOptions.errorPriorityLevel = ourParseInt(props.errorPriorityLevel);\r\n        if (props.cutoffPriorityLevel) processOptions.cutoffPriorityLevel = ourParseInt(props.cutoffPriorityLevel);\r\n        if (props.sortBy) processOptions.sortBy = props.sortBy;\r\n        // if (props.ignorePriorityNumberList) processOptions.ignorePriorityNumberList = props.ignorePriorityNumberList;\r\n\r\n        let displayType = 'ErrorsWarnings'; // default\r\n        if (props.displayType) displayType = props.displayType;\r\n\r\n        function renderSummary(processedResults) {\r\n          return (<div>\r\n            <p>Checked <b>{filename}</b> (from {username} {repoName} <i>{branch === undefined ? 'DEFAULT' : branch}</i> branch)</p>\r\n            <p>&nbsp;&nbsp;&nbsp;&nbsp;Finished in <RenderElapsedTime elapsedSeconds={processedResults.elapsedSeconds} /> with {rawCFResults.noticeList.length===0?'no':rawCFResults.noticeList.length} notice{rawCFResults.noticeList.length===1?'':'s'}.</p>\r\n            {/* <RenderRawResults results={rawCFResults} /> */}\r\n          </div>);\r\n        }\r\n\r\n        if (displayType === 'ErrorsWarnings') {\r\n          const processedResults = processNoticesToErrorsWarnings(rawCFResults, processOptions);\r\n  //                 console.log(`${`FileCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)`}\r\n  //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()} numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n          if (processedResults.errorList.length || processedResults.warningList.length)\r\n            setResultValue(<>\r\n              <div>{renderSummary(processedResults)}\r\n                {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n              <RenderSuccessesErrorsWarnings results={processedResults} />\r\n            </>);\r\n          else // no errors or warnings\r\n            setResultValue(<>\r\n              <div>{renderSummary(processedResults)}\r\n                {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n              <RenderSuccessesErrorsWarnings results={processedResults} />\r\n            </>);\r\n        } else if (displayType === 'SevereMediumLow') {\r\n          const processedResults = processNoticesToSevereMediumLow(rawCFResults, processOptions);\r\n  //                 console.log(`FileCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n  //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()} numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n          if (processedResults.severeList.length || processedResults.mediumList.length || processedResults.lowList.length)\r\n            setResultValue(<>\r\n              <div>{renderSummary(processedResults)}\r\n                {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n              <RenderSuccessesSevereMediumLow results={processedResults} />\r\n            </>);\r\n          else // no severe, medium, or low notices\r\n            setResultValue(<>\r\n              <div>{renderSummary(processedResults)}\r\n                {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n              <RenderSuccessesSevereMediumLow results={processedResults} />\r\n            </>);\r\n        } else if (displayType === 'SingleList') {\r\n          const processedResults = processNoticesToSingleList(rawCFResults, processOptions);\r\n  //                 console.log(`FileCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n  //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()} numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n          if (processedResults.warningList.length)\r\n            setResultValue(<>\r\n              <div>{renderSummary(processedResults)}\r\n                {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n              <RenderSuccessesWarningsGradient results={processedResults} />\r\n            </>);\r\n          else // no warnings\r\n            setResultValue(<>\r\n              <div>{renderSummary(processedResults)}\r\n                {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n              <RenderSuccessesWarningsGradient results={processedResults} />\r\n            </>);\r\n        } else setResultValue(<b style={{ color: 'red' }}>Invalid displayType='{displayType}'</b>)\r\n      })(); // end of async part in unnamedFunction\r\n      // Doesn't work if we add this to next line: username,repoName,branch,checkingOptions,filename,givenLocation,props\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []); // end of useEffect part\r\n\r\n    const username = props.username;\r\n    // console.log(`FileCheck username='${username}'`);\r\n    if (!username) return <><b>ERROR</b>: The Door43 username must be specified</>;\r\n    const repoName = props.repoName;\r\n    // console.log(`FileCheck repoName='${repoName}'`);\r\n    if (!repoName) return <><b>ERROR</b>: The Door43 repository name must be specified</>;\r\n    let branch = props.branch;\r\n    // console.log(`FileCheck branch='${branch}'`);\r\n    if (branch === undefined) branch = 'master';\r\n    const filename = props.filename;\r\n    // console.log(`filename='${filename}'`);\r\n    if (!filename) return <><b>ERROR</b>: The Door43 filename must be specified</>;\r\n\r\n    let givenLocation = props['location'] ? props['location'] : \"\";\r\n    if (givenLocation && givenLocation[0] !== ' ') givenLocation = ` ${givenLocation}`;\r\n\r\n    const checkingOptions = { // Uncomment any of these to test them\r\n        // 'extractLength': 25,\r\n    };\r\n    // Or this allows the parameters to be specified as a FileCheck property\r\n    if (props.extractLength) checkingOptions.extractLength = ourParseInt(props.extractLength);\r\n\r\n    // {/* <div className={classes.root}> */}\r\n    return (\r\n        <div className=\"Fred\">\r\n            {result}\r\n        </div>\r\n    );\r\n};\r\n// end of FileCheck()\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n    },\r\n});\r\n\r\nexport default withStyles(styles)(FileCheck);\r\n","import * as books from './books/books';\r\nimport checkAnnotationTSVDataRow from './annotation-row-check';\r\n\r\n\r\nconst ANNOTATION_TABLE_VALIDATOR_VERSION_STRING = '0.2.3';\r\n\r\nconst NUM_EXPECTED_ANNOTATION_TSV_FIELDS = 7; // so expects 6 tabs per line\r\nconst EXPECTED_TN_HEADING_LINE = 'Reference\\tID\\tTags\\tSupportReference\\tQuote\\tOccurrence\\tAnnotation';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nasync function CheckAnnotationRows(languageCode, annotationType, bookID, filename, tableText, givenLocation, optionalCheckingOptions) {\r\n    /* This function is optimised for checking the entire file, i.e., all rows.\r\n\r\n      It also has the advantage of being able to compare one row with the previous one.\r\n\r\n     bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n\r\n     Returns a result object containing a successList and a noticeList\r\n     */\r\n    // console.log(`CheckAnnotationRows(${languageCode}, ${annotationType}, ${bookID}, ${tableText.length}, ${givenLocation},${JSON.stringify(optionalCheckingOptions)})…`);\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    // if (bookID) ourLocation = ` in ${bookID}${ourLocation}`;\r\n\r\n    const result = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(`CheckAnnotationRows success: ${successString}`);\r\n        result.successList.push(successString);\r\n    }\r\n    function addNoticeCV8(noticeObject) {\r\n        // console.log(`CheckAnnotationRows notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"ATSV addNoticeCV8: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `ATSV addNoticeCV8: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"ATSV addNoticeCV8: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `ATSV addNoticeCV8: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(C !== undefined, \"ATSV addNoticeCV8: 'C' parameter should be defined\");\r\n        if (noticeObject.C) console.assert(typeof noticeObject.C === 'string', `ATSV addNoticeCV8: 'C' parameter should be a string not a '${typeof noticeObject.C}': ${noticeObject.C}`);\r\n        // console.assert(V !== undefined, \"ATSV addNoticeCV8: 'V' parameter should be defined\");\r\n        if (noticeObject.V) console.assert(typeof noticeObject.V === 'string', `ATSV addNoticeCV8: 'V' parameter should be a string not a '${typeof noticeObject.V}': ${noticeObject.V}`);\r\n        // console.assert(characterIndex !== undefined, \"ATSV addNoticeCV8: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `ATSV addNoticeCV8: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"ATSV addNoticeCV8: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `ATSV addNoticeCV8: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"ATSV addNoticeCV8: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `ATSV addNoticeCV8: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        result.noticeList.push({ ...noticeObject, bookID, filename });\r\n    }\r\n\r\n\r\n    addNoticeCV8({ priority: 997, message: \"CheckAnnotationRows() is still a placeholder -- not completed yet\", location: ourLocation });\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (ttcError) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    // const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    // const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    let lowercaseBookID = bookID.toLowerCase();\r\n    let numChaptersThisBook = 0;\r\n    try {\r\n        numChaptersThisBook = books.chaptersInBook(lowercaseBookID).length;\r\n    }\r\n    catch {\r\n        if (!books.isValidBookID(bookID)) // must not be in FRT, BAK, etc.\r\n            addNoticeCV8({ priority: 747, message: \"Bad function call: should be given a valid book abbreviation\", extract: bookID, location: ` (not '${bookID}')${ourLocation}` });\r\n    }\r\n\r\n    let lines = tableText.split('\\n');\r\n    // console.log(`  '${location}' has ${lines.length.toLocaleString()} total lines (expecting ${NUM_EXPECTED_TN_FIELDS} fields in each line)`);\r\n\r\n    let lastC = '', lastV = '';\r\n    let rowID_list = [];\r\n    let numVersesThisChapter = 0;\r\n    for (let n = 0; n < lines.length; n++) {\r\n        // console.log(`CheckAnnotationRows checking line ${n}: ${JSON.stringify(lines[n])}`);\r\n        if (n === 0) {\r\n            if (lines[0] === EXPECTED_TN_HEADING_LINE)\r\n                addSuccessMessage(`Checked TSV header ${ourLocation}`);\r\n            else\r\n                addNoticeCV8({ priority: 746, message: \"Bad TSV header\", lineNumber: n + 1, location: `${ourLocation}: '${lines[0]}'` });\r\n        }\r\n        else // not the header\r\n        {\r\n            let fields = lines[n].split('\\t');\r\n            if (fields.length === NUM_EXPECTED_ANNOTATION_TSV_FIELDS) {\r\n                // eslint-disable-next-line no-unused-vars\r\n                const [reference, rowID, tags, _support_reference, _quote, _occurrence, _annotation] = fields;\r\n                const [C, V] = reference.split(':')\r\n\r\n                // Use the row check to do most basic checks\r\n                const firstResult = await checkAnnotationTSVDataRow(languageCode, annotationType, lines[n], bookID, C, V, ourLocation, optionalCheckingOptions);\r\n                // Choose only ONE of the following\r\n                // This is the fast way of append the results from this field\r\n                // result.noticeList = result.noticeList.concat(firstResult.noticeList);\r\n                // If we need to put everything through addNoticeCV8, e.g., for debugging or filtering\r\n                //  process results line by line\r\n                for (const noticeEntry of firstResult.noticeList)\r\n                    addNoticeCV8({ ...noticeEntry, lineNumber: n + 1 });\r\n\r\n                // So here we only have to check against the previous and next fields for out-of-order problems\r\n                if (C) {\r\n                    if (C === 'front') { }\r\n                    else if (/^\\d+$/.test(C)) {\r\n                        let intC = Number(C);\r\n                        if (C !== lastC)\r\n                            numVersesThisChapter = books.versesInChapter(lowercaseBookID, intC);\r\n                        if (intC === 0)\r\n                            addNoticeCV8({ priority: 551, C, V, message: `Invalid zero '${C}' chapter number`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        if (intC > numChaptersThisBook)\r\n                            addNoticeCV8({ priority: 737, C, V, message: `Invalid large '${C}' chapter number`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        if (/^\\d+$/.test(lastC)) {\r\n                            let lastintC = Number(lastC);\r\n                            if (intC < lastintC)\r\n                                addNoticeCV8({ priority: 736, C, V, message: `Receding '${C}' chapter number after '${lastC}'`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                            else if (intC > lastintC + 1)\r\n                                addNoticeCV8({ priority: 735, C, V, message: `Advancing '${C}' chapter number after '${lastC}'`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        }\r\n                    }\r\n                    else\r\n                        addNoticeCV8({ priority: 734, C, V, message: \"Bad chapter number\", rowID, lineNumber: n + 1, location: ourLocation });\r\n                }\r\n                else\r\n                    addNoticeCV8({ priority: 739, C, V, message: \"Missing chapter number\", rowID, lineNumber: n + 1, location: ` after ${lastC}:${V}${ourLocation}` });\r\n\r\n                if (V) {\r\n                    if (V === 'intro') { }\r\n                    else if (/^\\d+$/.test(V)) {\r\n                        let intV = Number(V);\r\n                        if (intV === 0)\r\n                            addNoticeCV8({ priority: 552, C, V, message: `Invalid zero '${V}' verse number`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        if (intV > numVersesThisChapter)\r\n                            addNoticeCV8({ priority: 734, C, V, message: `Invalid large '${V}' verse number for chapter ${C}`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                        if (/^\\d+$/.test(lastV)) {\r\n                            let lastintV = Number(lastV);\r\n                            if (intV < lastintV)\r\n                                addNoticeCV8({ priority: 733, C, V, message: `Receding '${V}' verse number after '${lastV}'`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                            // else if (intV > lastintV + 1)\r\n                            //   addNoticeCV8({priority:556, `Skipped verses with '${V}' verse number after '${lastV}'${withString}`);\r\n                        }\r\n                    }\r\n                    else\r\n                        addNoticeCV8({ priority: 738, C, V, message: \"Bad verse number\", rowID, lineNumber: n + 1, location: ourLocation });\r\n\r\n                }\r\n                else\r\n                    addNoticeCV8({ priority: 790, C, V, message: \"Missing verse number\", rowID, lineNumber: n + 1, location: ` after ${C}:${lastV}${ourLocation}` });\r\n\r\n                if (rowID) {\r\n                    if (rowID_list.indexOf(rowID) >= 0)\r\n                        addNoticeCV8({ priority: 729, C, V, message: `Duplicate '${rowID}' ID`, rowID, lineNumber: n + 1, location: ourLocation });\r\n                } else\r\n                    addNoticeCV8({ priority: 730, C, V, message: \"Missing ID\", lineNumber: n + 1, location: ourLocation });\r\n\r\n\r\n                if (C !== lastC || V !== lastV) {\r\n                    rowID_list = []; // ID's only need to be unique within each verse\r\n                    lastC = C; lastV = V;\r\n                }\r\n\r\n            } else\r\n                // if (n === lines.length - 1) // it's the last line\r\n                //     console.log(`  Line ${n}: Has ${fields.length} field(s) instead of ${NUM_EXPECTED_TN_FIELDS}: ${EXPECTED_TN_HEADING_LINE.replace(/\\t/g, ', ')}`);\r\n                // else\r\n                if (n !== lines.length - 1) // it's not the last line\r\n                    addNoticeCV8({ priority: 988, message: `Wrong number of tabbed fields (expected ${NUM_EXPECTED_ANNOTATION_TSV_FIELDS})`, extract: `Found ${fields.length} field${fields.length === 1 ? '' : 's'}`, lineNumber: n + 1, location: ourLocation });\r\n        }\r\n    }\r\n    addSuccessMessage(`Checked all ${(lines.length - 1).toLocaleString()} data line${lines.length - 1 === 1 ? '' : 's'}${ourLocation}.`);\r\n    if (result.noticeList)\r\n        addSuccessMessage(`CheckAnnotationRows v${ANNOTATION_TABLE_VALIDATOR_VERSION_STRING} finished with ${result.noticeList.length ? result.noticeList.length.toLocaleString() : \"zero\"} notice${result.noticeList.length === 1 ? '' : 's'}`);\r\n    else\r\n        addSuccessMessage(`No errors or warnings found by CheckAnnotationRows v${ANNOTATION_TABLE_VALIDATOR_VERSION_STRING}`)\r\n    // console.log(`  CheckAnnotationRows returning with ${result.successList.length.toLocaleString()} success(es), ${result.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(\"CheckAnnotationRows result is\", JSON.stringify(result));\r\n    return result;\r\n}\r\n// end of CheckAnnotationRows function\r\n\r\n\r\nexport default CheckAnnotationRows;\r\n","import { isWhitespace, countOccurrences } from './text-handling-functions'\r\n\r\n//const VALIDATOR_VERSION_STRING = '0.1.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nexport function checkTextfileContents(languageCode, filename, fileText, optionalFileLocation, optionalCheckingOptions) {\r\n    // Does basic checks for small errors like mismatched punctuation pairs, etc.\r\n    //  (Used by usfm-text-check)\r\n\r\n    // filename (str): Used for identification\r\n    // fileText (str): The field being checked\r\n    // allowedLinks (bool): doesn't check links -- only checks lack of links\r\n    // optionalFileLocation (str): Used to inform where this field is located\r\n\r\n    // We assume that checking for compulsory fields is done elsewhere\r\n\r\n    // Returns a single notice list\r\n    //  The list contains objects with the following fields:\r\n    //      priority (compulsory): the priority number 0..999 (usually 800+ are errors, lower are warnings)\r\n    //      message (compulsory): the error description string\r\n    //      characterIndeX: the 0-based index for the position in the string\r\n    //      extract: a short extract of the string containing the error (or empty-string if irrelevant)\r\n    //      location: the detailed location string\r\n    //  (Returned in this way for more intelligent processing at a higher level)\r\n    // console.log(`checkTextfileContents(${filename}, ${fileText.length.toLocaleString()} chars, ${allowedLinks}, '${optionalFileLocation}')…`);\r\n    console.assert(filename !== undefined, \"checkTextfileContents: 'filename' parameter should be defined\");\r\n    console.assert(typeof filename === 'string', `checkTextfileContents: 'filename' parameter should be a number not a '${typeof filename}': ${filename}`);\r\n    console.assert(fileText !== undefined, \"checkTextfileContents: 'fileText' parameter should be defined\");\r\n    console.assert(typeof fileText === 'string', `checkTextfileContents: 'fileText' parameter should be a number not a '${typeof fileText}': ${fileText}`);\r\n    // console.assert( allowedLinks===true || allowedLinks===false, \"checkTextfileContents: allowedLinks parameter must be either true or false\");\r\n\r\n    let result = { noticeList: [] };\r\n\r\n    function addNotice6(noticeObject) {\r\n        // console.log(`dBTC Notice: (priority=${noticeObject.priority}) ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : \"\"}${noticeObject.extract ? ` ${noticeObject.extract}` : \"\"}${noticeObject.location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"dBTCs addNotice6: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `dBTCs addNotice6: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"dBTCs addNotice6: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `dBTCs addNotice6: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(characterIndex !== undefined, \"dBTCs addNotice6: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `dBTCs addNotice6: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"dBTCs addNotice6: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `dBTCs addNotice6: 'extract' parameter should be a string not a '${typeof noticeObject.extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"dBTCs addNotice6: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `dBTCs addNotice6: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        result.noticeList.push(noticeObject);\r\n    }\r\n\r\n\r\n    // Main code for checkTextfileContents()\r\n    if (!fileText) // Nothing to check\r\n        return result;\r\n\r\n    // Create our more detailed location string by prepending the filename\r\n    let ourLocation = optionalFileLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n\r\n    if (isWhitespace(fileText)) {\r\n        addNotice6({ priority: 638, message: \"Only found whitespace\", location: ourLocation });\r\n        return result;\r\n    }\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (bfcError) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    let characterIndex;\r\n    if ((characterIndex = fileText.indexOf('<<<<<<<')) >= 0) {\r\n        const iy = characterIndex + halfLength; // Want extract to focus more on what follows\r\n        const extract = (iy > halfLength ? '…' : '') + fileText.substring(iy - halfLength, iy + halfLengthPlus).replace(/ /g, '␣') + (iy + halfLengthPlus < fileText.length ? '…' : '')\r\n        addNotice6({ priority: 993, message: \"Unresolved GIT conflict\", characterIndex, extract, location: ourLocation });\r\n    } else if ((characterIndex = fileText.indexOf('=======')) >= 0) {\r\n        const iy = characterIndex + halfLength; // Want extract to focus more on what follows\r\n        const extract = (iy > halfLength ? '…' : '') + fileText.substring(iy - halfLength, iy + halfLengthPlus).replace(/ /g, '␣') + (iy + halfLengthPlus < fileText.length ? '…' : '')\r\n        addNotice6({ priority: 992, message: \"Unresolved GIT conflict\", characterIndex, extract, location: ourLocation });\r\n    } else if ((characterIndex = fileText.indexOf('>>>>>>>>')) >= 0) {\r\n        const iy = characterIndex + halfLength; // Want extract to focus more on what follows\r\n        const extract = (iy > halfLength ? '…' : '') + fileText.substring(iy - halfLength, iy + halfLengthPlus).replace(/ /g, '␣') + (iy + halfLengthPlus < fileText.length ? '…' : '')\r\n        addNotice6({ priority: 991, message: \"Unresolved GIT conflict\", characterIndex, extract, location: ourLocation });\r\n    }\r\n\r\n    // Check matched pairs in the file\r\n    for (const punctSet of [['[', ']'], ['(', ')'], ['{', '}'],\r\n    ['<', '>'], ['⟨', '⟩'], ['“', '”'],\r\n    ['‹', '›'], ['«', '»'], ['**_', '_**']]) {\r\n        // Can't check '‘’' coz they might be used as apostrophe\r\n        const leftChar = punctSet[0], rightChar = punctSet[1];\r\n        const leftCount = countOccurrences(fileText, leftChar);\r\n        const rightCount = countOccurrences(fileText, rightChar);\r\n        if (leftCount !== rightCount)\r\n            // NOTE: These are lower priority than similar checks in a field\r\n            //          since they occur only within the entire file\r\n            addNotice6({ priority: leftChar === '“' ? 162 : 462, message: `Mismatched ${leftChar}${rightChar} characters`, details: `(left=${leftCount.toLocaleString()}, right=${rightCount.toLocaleString()})`, location: ourLocation });\r\n    }\r\n\r\n    // if (!allowedLinks) {\r\n    //     // Simple check that there aren't any\r\n    //     ix = fileText.indexOf('://');\r\n    //     if (ix === -1) ix = fileText.indexOf('http');\r\n    //     if (ix === -1) ix = fileText.indexOf('ftp');\r\n    //     // The following might have to be removed if text fields can contain email addresses\r\n    //     if (ix === -1) ix = fileText.indexOf('.org');\r\n    //     if (ix === -1) ix = fileText.indexOf('.com');\r\n    //     if (ix === -1) ix = fileText.indexOf('.info');\r\n    //     if (ix === -1) ix = fileText.indexOf('.bible');\r\n    //     if (ix >= 0) {\r\n    //         let extract = (ix>halfLength ? '…' : '') + fileText.substring(ix-halfLength, ix+halfLengthPlus) + (ix+halfLengthPlus < fileText.length ? '…' : '')\r\n    //         addNotice6({765, \"Unexpected link\", ix,extract, ourAtString});\r\n    //     }\r\n    // }\r\n    return result;\r\n}\r\n// end of checkTextfileContents function\r\n\r\nexport default checkTextfileContents;\r\n","import { toJSON } from 'usfm-js';\r\n\r\n\r\nexport function runUsfmJsCheck(fileText, convertOptions) {\r\n    // Runs the USFM-JS converter as a check\r\n    //  which can be quite time-consuming on large, complex USFM files\r\n    // console.log(\"Running USFM-JS converter check (can take quite a while for a large book)…\");\r\n\r\n    const jsonResult = toJSON(fileText, convertOptions);\r\n    const jsonKeys = Object.keys(jsonResult); // Expect 'headers', 'chapters'\r\n    const numJSONkeys = jsonKeys.length;\r\n    // console.log(`  Finished USFM-JS converter check with ${numJSONkeys} json key(s)`);\r\n    // console.log(`  jsonResult: ${JSON.stringify(jsonResult)}`)\r\n    // NOTE: We don't know how to get the errors out yet\r\n\r\n    return { isValidUSFM: numJSONkeys >= 2, returnedJSON:jsonResult }; // Expect 'headers', 'chapters'\r\n}\r\n// end of runUsfmJsCheck function\r\n\r\n\r\nexport function checkUSFMToJSON(bookID, filename, givenText, givenLocation, optionalCheckingOptions) {\r\n    /*\r\n    This function is only used for the demonstration pages -- not for the core!\r\n\r\n    bookID is a three-character UPPERCASE USFM book identifier.\r\n\r\n        filename parameter can be an empty string if we don't have one.\r\n\r\n     Returns a result object containing a successList and a noticeList\r\n     */\r\n    // console.log(`checkUSFMToJSON(${givenText.length.toLocaleString()} chars, '${givenLocation}')…`);\r\n\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    if (filename) ourLocation = ` in ${filename}${ourLocation}`;\r\n\r\n\r\n    const result = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(`checkUSFMToJSON success: ${successString}`);\r\n        result.successList.push(successString);\r\n    }\r\n    function addNotice6to7({priority, message, lineNumber, characterIndex, extract, location}) {\r\n        /**\r\n        * @description - adds a new notice entry, adding bookID,C,V to the given fields\r\n        * @param {Number} priority - notice priority from 1 (lowest) to 999 (highest)\r\n        * @param {String} message - the text of the notice message\r\n        * @param {Number} characterIndex - where the issue occurs in the line\r\n        * @param {String} extract - short extract from the line centred on the problem (if available)\r\n        * @param {String} location - description of where the issue is located\r\n        */\r\n        // console.log(`checkUSFMToJSON notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(priority !== undefined, \"cUSFMjs addNotice6to7: 'priority' parameter should be defined\");\r\n        console.assert(typeof priority === 'number', `cUSFMjs addNotice6to7: 'priority' parameter should be a number not a '${typeof priority}': ${priority}`);\r\n        console.assert(message !== undefined, \"cUSFMjs addNotice6to7: 'message' parameter should be defined\");\r\n        console.assert(typeof message === 'string', `cUSFMjs addNotice6to7: 'message' parameter should be a string not a '${typeof message}': ${message}`);\r\n        // console.assert(characterIndex !== undefined, \"cUSFMjs addNotice6to7: 'characterIndex' parameter should be defined\");\r\n        if (characterIndex) console.assert(typeof characterIndex === 'number', `cUSFMjs addNotice6to7: 'characterIndex' parameter should be a number not a '${typeof characterIndex}': ${characterIndex}`);\r\n        // console.assert(extract !== undefined, \"cUSFMjs addNotice6to7: 'extract' parameter should be defined\");\r\n        if (extract) console.assert(typeof extract === 'string', `cUSFMjs addNotice6to7: 'extract' parameter should be a string not a '${typeof extract}': ${extract}`);\r\n        console.assert(location !== undefined, \"cUSFMjs addNotice6to7: 'location' parameter should be defined\");\r\n        console.assert(typeof location === 'string', `cUSFMjs addNotice6to7: 'location' parameter should be a string not a '${typeof location}': ${location}`);\r\n        result.noticeList.push({priority,message, bookID, lineNumber, characterIndex, extract, location});\r\n    }\r\n\r\n\r\n    // Set your options here -- change values or comment out lines\r\n    const convertOptions = {\r\n        'chunk': true,\r\n        'content-source': ourLocation,\r\n        'convertToInt': []\r\n        };\r\n    const convertCheckResult = runUsfmJsCheck(givenText, ourLocation, convertOptions);\r\n    // NOTE: We haven't figured out how to get ERRORS out of this parser yet\r\n\r\n    if (!convertCheckResult.isValidUSFM)\r\n        addNotice6to7({priority:943, message:`USFM3 toJSON Check doesn't pass`, location:ourLocation});\r\n\r\n    addSuccessMessage(`Checked USFM-JS`);\r\n    // console.log(`  checkUSFMToJSON returning with ${result.successList.length.toLocaleString()} success(es) and ${result.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(`checkUSFMToJSON result is ${JSON.stringify(result)}`);\r\n    return result;\r\n}\r\n// end of checkUSFMToJSON function\r\n\r\n\r\nexport default checkUSFMToJSON;\r\n","import grammar from 'usfm-grammar';\r\nimport * as books from '../core/books/books';\r\n\r\n\r\n// const USFM_GRAMMAR_VALIDATOR_VERSION_STRING = '0.3.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nexport function runBCSGrammarCheck(strictnessString, fileText, filename, givenLocation, optionalCheckingOptions) {\r\n    // Runs the BCS USFM Grammar checker\r\n    //  which can be quite time-consuming on large, complex USFM files\r\n    // console.log(`Running ${strictnessString} BCS USFM grammar check${givenLocation} (can take quite a while for a large book)…`);\r\n    console.assert(strictnessString === 'strict' || strictnessString === 'relaxed', `Unexpected strictnessString='${strictnessString}'`);\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (usfmELerror) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n    // console.log(`Using supplied extractLength=${extractLength} cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    // Now create the parser and run the check\r\n    const ourUsfmParser = new grammar.USFMParser(fileText,\r\n        strictnessString === 'relaxed' ? grammar.LEVEL.RELAXED : null);\r\n    // Returns a Boolean indicating whether the input USFM text satisfies the grammar or not.\r\n    // This method is available in both default and relaxed modes.\r\n    // const parserResult = ourUsfmParser.validate();\r\n    const parserResult = ourUsfmParser.toJSON()\r\n    let parserMessages;\r\n    parserMessages = parserResult._messages; // Throw away the JSON (if any)\r\n    // console.log(`  Finished BCS USFM grammar check with messages: ${JSON.stringify(parserResult)}\\n and warnings: ${JSON.stringify(ourUsfmParser.warnings)}.`);\r\n    let parseError;\r\n    parseError = parserMessages._error;\r\n    // console.log(`  parseError: ${parseError}`);\r\n    let ourErrorMessage, lineNumberString, characterIndex, extract;\r\n    // NOTE: The following code is quite fragile\r\n    //  as it depends on the precise format of the error message return from USFMParser\r\n    let ourErrorObject = {};\r\n    if (parseError) {\r\n        const contextRE = /(\\d+?)\\s\\|\\s(.+)/g;\r\n        for (const errorLine of parseError.split('\\n')) {\r\n            // console.log(`BCS errorLine=${errorLine}`);\r\n            if (errorLine.startsWith('>')) {\r\n                const regexResult = contextRE.exec(errorLine.substring(1).trim());\r\n                // console.log(`  regexResult: ${JSON.stringify(regexResult)}`);\r\n                if (regexResult) {\r\n                    lineNumberString = regexResult[1];\r\n                    extract = regexResult[2];\r\n                }\r\n            }\r\n            else if (errorLine.endsWith('^')) {\r\n                characterIndex = errorLine.indexOf('^') - 8;\r\n                if (characterIndex < 0) characterIndex = 0; // Just in case\r\n                if (extract.length)\r\n                    extract = (characterIndex > halfLength ? '…' : '') + extract.substring(characterIndex - halfLength, characterIndex + halfLengthPlus) + (characterIndex + halfLengthPlus < extract.length ? '…' : '')\r\n            }\r\n            else ourErrorMessage = errorLine; // We only want the last one\r\n        }\r\n        // console.log(`  ourErrorMessage: '${ourErrorMessage}' lineNumberString=${lineNumberString} characterIndex=${characterIndex} extract='${extract}'`);\r\n\r\n        // Some of these \"errors\" need to be degraded in priority\r\n\r\n        let adjustedPriority = 994;\r\n        if (extract==='\\\\s5' // Temporarily, even though \\s5 fields are not valid USFM\r\n        || ourErrorMessage.startsWith('Expected \"f*\", \"+\"') // Might neeed a OHM schema fix?\r\n        )\r\n            adjustedPriority = 294;\r\n\r\n        ourErrorObject = {priority:adjustedPriority, message:`USFMGrammar: ${ourErrorMessage}`,\r\n                            filename,\r\n                            characterIndex, extract,\r\n                            location:givenLocation};\r\n\r\n        // Save our line number\r\n        if (lineNumberString && lineNumberString.length) {\r\n            //  but we need a temporary fix for the BCS bug which doesn't include blank lines in the count\r\n            let lineNumber = Number(lineNumberString)\r\n            let notified = false;\r\n            const lines = fileText.split('\\n');\r\n            for (let n = 1; n <= lines.length; n++) {\r\n                if (n >= lineNumber) break; // Gone far enough\r\n                if (!lines[n-1]) {\r\n                    lineNumber += 1; // Increment error line number for each blank line\r\n                    if (!notified) {\r\n                        console.log(\"Temporarily adjusting BCS grammar error line number to account for blank lines\");\r\n                        notified = true;\r\n                    }\r\n                }\r\n            }\r\n            ourErrorObject.lineNumber = lineNumber;\r\n        }\r\n    }\r\n\r\n    const parseWarnings = parserResult._warnings ? parserResult._warnings : ourUsfmParser.warnings;\r\n    // console.log(`  Warnings: ${JSON.stringify(parseWarnings)}`);\r\n    let ourWarnings = [];\r\n    for (const warningString of parseWarnings) {\r\n        // console.log(`warningString: '${warningString}'`);\r\n        // Clean up their warnings a little: Remove trailing spaces and periods\r\n        let adjustedString = warningString.trim(); // Removes the trailing space\r\n        if (adjustedString.endsWith('.')) adjustedString = adjustedString.substring(0, adjustedString.length - 1);\r\n        ourWarnings.push(adjustedString);\r\n    }\r\n\r\n    return { isValidUSFM: !parseError, error: ourErrorObject, warnings: ourWarnings };\r\n}\r\n// end of runBCSGrammarCheck function\r\n\r\n\r\nexport function checkUSFMGrammar(bookID, strictnessString, filename, givenText, givenLocation, optionalCheckingOptions) {\r\n    /*\r\n    This function is only used for the demonstration pages -- not for the core!\r\n\r\n    bookID is a three-character UPPERCASE USFM book identifier.\r\n\r\n    filename parameter can be an empty string if we don't have one.\r\n\r\n     Returns a result object containing a successList and a noticeList\r\n     */\r\n    console.log(`checkUSFMGrammar(${givenText.length.toLocaleString()} chars, '${givenLocation}')…`);\r\n    console.assert(strictnessString === 'strict' || strictnessString === 'relaxed', `Unexpected strictnessString='${strictnessString}'`);\r\n\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n\r\n\r\n    const cugResult = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(`checkUSFMGrammar success: ${successString}`);\r\n        cugResult.successList.push(successString);\r\n    }\r\n    function addNotice6to7(noticeObject) {\r\n        /**\r\n        * @description - adds a new notice entry, adding bookID,C,V to the given fields\r\n        * @param {Number} priority - notice priority from 1 (lowest) to 999 (highest)\r\n        * @param {String} message - the text of the notice message\r\n        * @param {Number} characterIndex - where the issue occurs in the line\r\n        * @param {String} extract - short extract from the line centred on the problem (if available)\r\n        * @param {String} location - description of where the issue is located\r\n        */\r\n        // console.log(`checkUSFMGrammar notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"cUSFMgr addNotice6to7: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `cUSFMgr addNotice6to7: 'priority' parameter should be a number not a '${typeof noticeObject.priority}': ${noticeObject.priority}`);\r\n        console.assert(noticeObject.message !== undefined, \"cUSFMgr addNotice6to7: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `cUSFMgr addNotice6to7: 'message' parameter should be a string not a '${typeof noticeObject.message}': ${noticeObject.message}`);\r\n        // console.assert(characterIndex !== undefined, \"cUSFMgr addNotice6to7: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cUSFMgr addNotice6to7: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}': ${noticeObject.characterIndex}`);\r\n        // console.assert(extract !== undefined, \"cUSFMgr addNotice6to7: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cUSFMgr addNotice6to7: 'extract' parameter should be a string not a '${typeof extract}': ${noticeObject.extract}`);\r\n        console.assert(noticeObject.location !== undefined, \"cUSFMgr addNotice6to7: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `cUSFMgr addNotice6to7: 'location' parameter should be a string not a '${typeof noticeObject.location}': ${noticeObject.location}`);\r\n        cugResult.noticeList.push({ ...noticeObject, bookID,filename });\r\n    }\r\n\r\n\r\n    // Main code for checkUSFMGrammar function\r\n    if (books.isExtraBookID(bookID)) // doesn't work for these\r\n        return cugResult;\r\n\r\n    const grammarCheckResult = runBCSGrammarCheck(strictnessString, givenText, filename, ourLocation, optionalCheckingOptions);\r\n    // console.log(`grammarCheckResult=${JSON.stringify(grammarCheckResult)}`);\r\n\r\n    if (!grammarCheckResult.isValidUSFM)\r\n        addNotice6to7({priority:944, message:`USFM3 Grammar Check (${strictnessString} mode) doesn't pass`, filename, location:ourLocation});\r\n\r\n    // We only get one error if it fails\r\n    if (grammarCheckResult.error && grammarCheckResult.priority)\r\n        addNotice6to7(grammarCheckResult.error);\r\n\r\n    // Display these warnings but with a lowish priority\r\n    for (const warningString of grammarCheckResult.warnings)\r\n        addNotice6to7({priority:101, message:`USFMGrammar: ${warningString}`, filename, location:ourLocation});\r\n\r\n    addSuccessMessage(`Checked USFM Grammar (${strictnessString} mode) ${grammarCheckResult.isValidUSFM ? \"without errors\" : \" (but the USFM DIDN'T validate)\"}`);\r\n    // console.log(`  checkUSFMGrammar returning with ${result.successList.length.toLocaleString()} success(es) and ${result.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(`checkUSFMGrammar result is ${JSON.stringify(result)}`);\r\n    return cugResult;\r\n}\r\n// end of checkUSFMGrammar function\r\n\r\n\r\nexport default checkUSFMGrammar;\r\n","import React from 'react';\r\nimport * as books from './books';\r\nimport { getRepoName, getFilelistFromZip, getFileCached, fetchRepositoryZipFile } from './getApi';\r\nimport checkUSFMText from './usfm-text-check';\r\nimport checkMarkdownText from './markdown-text-check';\r\nimport checkPlainText from './plain-text-check';\r\nimport checkYAMLText from './yaml-text-check';\r\nimport checkManifestText from './manifest-text-check';\r\nimport checkTN_TSVText from './tn-table-text-check';\r\n\r\n\r\n/*\r\n    checkRepo\r\n*/\r\nexport async function checkRepo(username, repoName, branch, givenLocation, setResultValue, checkingOptions) {\r\n  /*\r\n  checkRepo DOES NOT USE the Gitea React Toolkit to fetch the repo\r\n\r\n  It returns an object containing:\r\n      successList: an array of strings to tell the use exactly what has been checked\r\n      noticeList: an array of 9 (i.e., with extra bookOrFileCode parameter at end) notice components\r\n  */\r\n  // console.log(`I'm here in checkRepo\r\n  //   with ${username}, ${repoName}, ${branch}, ${givenLocation}, ${JSON.stringify(checkingOptions)}`);\r\n  const startTime = new Date();\r\n\r\n  const languageCode = repoName.split('_')[0];\r\n  // console.log(\"checkRepo languageCode\", languageCode);\r\n\r\n  if (branch === undefined) branch = 'master'; // Ideally we should ask what the default branch is\r\n\r\n  let checkRepoResult = {\r\n    successList: [], noticeList: [],\r\n    checkedFileCount: 0, checkedFilenames: [], checkedFilenameExtensions: []\r\n  };\r\n\r\n  function addSuccessMessage(successString) {\r\n    // Adds the message to the result that we will later return\r\n    // console.log(`checkRepo success: ${successString}`);\r\n    checkRepoResult.successList.push(successString);\r\n  }\r\n  function addNotice10(noticeObject) {\r\n    // Adds the notices to the result that we will later return\r\n    // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n    // Note that bookID,C,V might all be empty strings (as some repos don't have BCV)\r\n    // console.log(`checkRepo addNotice10: ${noticeObject.priority}:${noticeObject.message} ${noticeObject.bookID} ${noticeObject.C}:${noticeObject.V} ${noticeObject.filename}:${noticeObject.lineNumber} ${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : \"\"}${noticeObject.extract ? ` ${noticeObject.extract}` : \"\"}${noticeObject.location}`);\r\n    console.assert(noticeObject.priority !== undefined, \"cR addNotice10: 'priority' parameter should be defined\");\r\n    console.assert(typeof noticeObject.priority === 'number', `cR addNotice10: 'priority' parameter should be a number not a '${typeof noticeObject.priority}'`);\r\n    console.assert(noticeObject.message !== undefined, \"cR addNotice10: 'message' parameter should be defined\");\r\n    console.assert(typeof noticeObject.message === 'string', `cR addNotice10: 'message' parameter should be a string not a '${typeof noticeObject.message}'`);\r\n    // console.assert(bookID !== undefined, \"cR addNotice10: 'bookID' parameter should be defined\");\r\n    if (noticeObject.bookID) {\r\n      console.assert(typeof noticeObject.bookID === 'string', `cR addNotice10: 'bookID' parameter should be a string not a '${typeof noticeObject.bookID}'`);\r\n      console.assert(noticeObject.bookID.length === 3, `cR addNotice10: 'bookID' parameter should be three characters long not ${noticeObject.bookID.length}`);\r\n      console.assert(books.isOptionalValidBookID(noticeObject.bookID), `cR addNotice10: '${noticeObject.bookID}' is not a valid USFM book identifier`);\r\n    }\r\n    // console.assert(C !== undefined, \"cR addNotice10: 'C' parameter should be defined\");\r\n    if (noticeObject.C) console.assert(typeof noticeObject.C === 'string', `cR addNotice10: 'C' parameter should be a string not a '${typeof noticeObject.C}'`);\r\n    // console.assert(V !== undefined, \"cR addNotice10: 'V' parameter should be defined\");\r\n    if (noticeObject.V) console.assert(typeof noticeObject.V === 'string', `cR addNotice10: 'V' parameter should be a string not a '${typeof noticeObject.V}'`);\r\n    // console.assert(characterIndex !== undefined, \"cR addNotice10: 'characterIndex' parameter should be defined\");\r\n    if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cR addNotice10: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}'`);\r\n    // console.assert(extract !== undefined, \"cR addNotice10: 'extract' parameter should be defined\");\r\n    if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cR addNotice10: 'extract' parameter should be a string not a '${typeof noticeObject.extract}'`);\r\n    console.assert(noticeObject.location !== undefined, \"cR addNotice10: 'location' parameter should be defined\");\r\n    console.assert(typeof noticeObject.location === 'string', `cR addNotice10: 'location' parameter should be a string not a '${typeof noticeObject.location}'`);\r\n    console.assert(noticeObject.extra !== undefined, \"cR addNotice10: 'extra' parameter should be defined\");\r\n    console.assert(typeof noticeObject.extra === 'string', `cR addNotice10: 'extra' parameter should be a string not a '${typeof noticeObject.extra}'`);\r\n    // Add in the repoName from the outer scope\r\n    checkRepoResult.noticeList.push({ ...noticeObject, repoName });\r\n  }\r\n\r\n\r\n  async function ourCheckFileContents(bookOrFileCode, cfBookID, filename, file_content, fileLocation, optionalCheckingOptions) {\r\n    // We assume that checking for compulsory fields is done elsewhere\r\n    // console.log(`checkRepo ourCheckFileContents(${filename})…`);\r\n\r\n    // Updates the global list of notices\r\n    console.assert(bookOrFileCode !== undefined, \"ourCheckFileContents: 'bookOrFileCode' parameter should be defined\");\r\n    console.assert(typeof bookOrFileCode === 'string', `ourCheckFileContents: 'bookOrFileCode' parameter should be a string not a '${typeof bookOrFileCode}'`);\r\n    console.assert(cfBookID !== undefined, \"ourCheckFileContents: 'cfBookID' parameter should be defined\");\r\n    console.assert(typeof cfBookID === 'string', `ourCheckFileContents: 'cfBookID' parameter should be a string not a '${typeof cfBookID}'`);\r\n    console.assert(filename !== undefined, \"ourCheckFileContents: 'filename' parameter should be defined\");\r\n    console.assert(typeof filename === 'string', `ourCheckFileContents: 'filename' parameter should be a string not a '${typeof filename}'`);\r\n    console.assert(file_content !== undefined, \"ourCheckFileContents: 'file_content' parameter should be defined\");\r\n    console.assert(typeof file_content === 'string', `ourCheckFileContents: 'file_content' parameter should be a string not a '${typeof file_content}'`);\r\n    console.assert(fileLocation !== undefined, \"ourCheckFileContents: 'fileLocation' parameter should be defined\");\r\n    console.assert(typeof fileLocation === 'string', `ourCheckFileContents: 'fileLocation' parameter should be a string not a '${typeof fileLocation}'`);\r\n\r\n    const cfcResultObject = await checkFileContents(languageCode, filename, file_content, fileLocation, optionalCheckingOptions);\r\n    // console.log(\"checkFileContents() returned\", resultObject.successList.length, \"success message(s) and\", resultObject.noticeList.length, \"notice(s)\");\r\n    // for (const successEntry of resultObject.successList)\r\n    //     console.log(\"  \", successEntry);\r\n\r\n    // Process results line by line,  appending the bookOrFileCode as an extra field as we go\r\n    for (const cfcNoticeEntry of cfcResultObject.noticeList)\r\n      // We add the bookOrFileCode as an extra value\r\n      addNotice10({ ...cfcNoticeEntry, bookID: cfBookID, extra: bookOrFileCode });\r\n  }\r\n  // end of ourCheckFileContents function\r\n\r\n\r\n  // Main code for checkRepo()\r\n  // Put all this in a try/catch block coz otherwise it's difficult to debug/view errors\r\n  try {\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    // if (ourLocation.indexOf(username) < 0)\r\n    // ourLocation = ` in ${username} ${repoName} ${givenLocation}`\r\n\r\n    // Update our \"waiting\" message\r\n    setResultValue(<p style={{ color: 'magenta' }}>Fetching zipped files from <b>{username}/{repoName}</b> repository…</p>);\r\n\r\n    // Let's fetch the zipped repo since it should be much more efficient than individual fetches\r\n    // console.log(`checkRepo: fetch zip file for ${repoName}…`);\r\n    const zipFetchSucceeded = await fetchRepositoryZipFile({ username, repository: repoName, branch });\r\n    if (!zipFetchSucceeded)\r\n      console.log(`checkRepo: misfetched zip file for repo with ${zipFetchSucceeded}`);\r\n    if (!zipFetchSucceeded) return checkRepoResult;\r\n    // Note: We don't stop for failure coz the code below will still work (fetching each file individually)\r\n\r\n    // Now we need to fetch the list of files from the repo\r\n    setResultValue(<p style={{ color: 'magenta' }}>Preprocessing file list from <b>{username}/{repoName}</b> repository…</p>);\r\n    // const pathList = await getFilelistFromFetchedTreemaps(username, repoName, branch);\r\n    const pathList = await getFilelistFromZip({ username, repository: repoName, branch });\r\n    // console.log(`Got pathlist (${pathList.length}) = ${pathList}`);\r\n\r\n    // So now we want to work through checking all the files in this repo\r\n    const countString = `${pathList.length.toLocaleString()} file${pathList.length === 1 ? '' : 's'}`;\r\n    let checkedFileCount = 0, checkedFilenames = [], checkedFilenameExtensions = new Set(), totalCheckedSize = 0;\r\n    for (const thisFilepath of pathList) {\r\n      // console.log(`At top of loop: thisFilepath='${thisFilepath}'`);\r\n\r\n      // Update our \"waiting\" message\r\n      setResultValue(<p style={{ color: 'magenta' }}>Checking <b>{username}/{repoName}</b> repo: checked {checkedFileCount.toLocaleString()}/{countString}…</p>);\r\n\r\n      const thisFilename = thisFilepath.split('/').pop();\r\n      // console.log(`thisFilename=${thisFilename}`);\r\n      const thisFilenameExtension = thisFilename.split('.').pop();\r\n      // console.log(`thisFilenameExtension=${thisFilenameExtension}`);\r\n\r\n      // Default to the main filename without the extensions\r\n      let bookOrFileCode = thisFilename.substring(0, thisFilename.length - thisFilenameExtension.length - 1);\r\n      let ourBookID = \"\";\r\n      if (thisFilenameExtension === 'usfm') {\r\n        // const filenameMain = thisFilename.substring(0, thisFilename.length - 5); // drop .usfm\r\n        // console.log(`Have USFM filenameMain=${bookOrFileCode}`);\r\n        const bookID = bookOrFileCode.substring(bookOrFileCode.length - 3);\r\n        // console.log(`Have USFM bookcode=${bookID}`);\r\n        console.assert(books.isValidBookID(bookID), `checkRepo: '${bookID}' is not a valid USFM book identifier`);\r\n        bookOrFileCode = bookID;\r\n        ourBookID = bookID;\r\n      }\r\n      else if (thisFilenameExtension === 'tsv') {\r\n        // const filenameMain = thisFilename.substring(0, thisFilename.length - 4); // drop .tsv\r\n        // console.log(`Have TSV filenameMain=${bookOrFileCode}`);\r\n        const bookID = bookOrFileCode.substring(bookOrFileCode.length - 3);\r\n        // console.log(`Have TSV bookcode=${bookID}`);\r\n        console.assert(books.isValidBookID(bookID), `checkRepo: '${bookID}' is not a valid USFM book identifier`);\r\n        bookOrFileCode = bookID;\r\n        ourBookID = bookID;\r\n      }\r\n\r\n      // console.log(\"checkRepo: Try to load\", username, repoName, thisFilepath, branch);\r\n      const getFile_ = (checkingOptions && checkingOptions.getFile) ? checkingOptions.getFile : getFileCached;\r\n      let repoFileContent;\r\n      try {\r\n        repoFileContent = await getFile_({ username, repository: repoName, path: thisFilepath, branch });\r\n        // console.log(\"Fetched file_content for\", repoName, thisPath, typeof repoFileContent, repoFileContent.length);\r\n      } catch (cRgfError) {\r\n        console.log(\"Failed to load\", username, repoName, thisFilepath, branch, `${cRgfError}`);\r\n        addNotice10({ priority: 996, message: \"Failed to load\", bookID: ourBookID, filename: thisFilename, location: `${givenLocation} ${thisFilepath}: ${cRgfError}`, extra: repoName });\r\n        return;\r\n      }\r\n      if (repoFileContent) {\r\n        // console.log(`checkRepo for ${repoName} checking ${thisFilename}`);\r\n        await ourCheckFileContents(bookOrFileCode, ourBookID,\r\n          // OBS has many files with the same name, so we have to give some of the path as well\r\n          repoName.endsWith('_obs') ? thisFilepath.replace('content/', '') : thisFilename,\r\n          repoFileContent, ourLocation, checkingOptions);\r\n        checkedFileCount += 1;\r\n        checkedFilenames.push(thisFilename);\r\n        checkedFilenameExtensions.add(thisFilenameExtension);\r\n        totalCheckedSize += repoFileContent.length;\r\n        // console.log(`checkRepo checked ${thisFilename}`);\r\n        if (thisFilenameExtension !== 'md') // There's often far, far too many of these\r\n          addSuccessMessage(`Checked ${bookOrFileCode.toUpperCase()} file: ${thisFilename}`);\r\n      }\r\n    }\r\n\r\n    // Check that we processed a license and a manifest\r\n    if (checkedFilenames.indexOf('LICENSE.md') < 0)\r\n      addNotice10({ priority: 946, message: \"Missing LICENSE.md\", location: ourLocation, extra: 'LICENSE' });\r\n    if (checkedFilenames.indexOf('manifest.yaml') < 0)\r\n      addNotice10({ priority: 947, message: \"Missing manifest.yaml\", location: ourLocation, extra: 'MANIFEST' });\r\n\r\n    // Add some extra fields to our checkRepoResult object\r\n    //  in case we need this information again later\r\n    checkRepoResult.checkedFileCount = checkedFileCount;\r\n    checkRepoResult.checkedFilenames = checkedFilenames;\r\n    checkRepoResult.checkedFilenameExtensions = [...checkedFilenameExtensions]; // convert Set to Array\r\n    checkRepoResult.checkedFilesizes = totalCheckedSize;\r\n    checkRepoResult.checkedRepoNames = [`${username}/${repoName}`];\r\n    // checkRepoResult.checkedOptions = checkingOptions; // This is done at the caller level\r\n\r\n    addSuccessMessage(`Checked ${username} repo: ${repoName}`);\r\n    // console.log(`checkRepo() is returning ${checkRepoResult.successList.length.toLocaleString()} success message(s) and ${checkRepoResult.noticeList.length.toLocaleString()} notice(s)`);\r\n  } catch (cRerror) {\r\n    console.log(`checkRepo main code block got error: ${cRerror.message}`);\r\n    setResultValue(<>\r\n      <p style={{ color: 'Red' }}>checkRepo main code block got error: <b>{cRerror.message}</b></p>\r\n    </>);\r\n\r\n  }\r\n  checkRepoResult.elapsedSeconds = (new Date() - startTime) / 1000; // seconds\r\n  return checkRepoResult;\r\n};\r\n// end of checkRepo()\r\n\r\n\r\n/*\r\n    checkFileContents\r\n*/\r\nexport async function checkFileContents(languageCode, filename, fileContent, givenLocation, checkingOptions) {\r\n  // Determine the file type from the filename extension\r\n  //  and return the results of checking that kind of file text\r\n  // console.log(`I'm here in checkFileContents\r\n  //   with ${filename}, ${fileContent.length} chars, ${givenLocation}, ${JSON.stringify(checkingOptions)}`);\r\n  const startTime = new Date();\r\n\r\n  let ourCFLocation = givenLocation;\r\n  if (ourCFLocation[0] !== ' ') ourCFLocation = ' ' + ourCFLocation;\r\n\r\n  let checkFileResult;\r\n  if (filename.toLowerCase().endsWith('.tsv')) {\r\n    const filenameMain = filename.substring(0, filename.length - 4); // drop .tsv\r\n    // console.log(`Have TSV filenameMain=${filenameMain}`);\r\n    const bookID = filenameMain.substring(filenameMain.length - 3);\r\n    // console.log(`Have TSV bookcode=${bookID}`);\r\n    console.assert(books.isValidBookID(bookID), `checkFileContents: '${bookID}' is not a valid USFM book identifier`);\r\n    checkFileResult = await checkTN_TSVText(languageCode, bookID, filename, fileContent, ourCFLocation, checkingOptions);\r\n  }\r\n  else if (filename.toLowerCase().endsWith('.usfm')) {\r\n    const filenameMain = filename.substring(0, filename.length - 5); // drop .usfm\r\n    // console.log(`Have USFM filenameMain=${filenameMain}`);\r\n    const bookID = filenameMain.substring(filenameMain.length - 3);\r\n    // console.log(`Have USFM bookcode=${bookID}`);\r\n    console.assert(books.isValidBookID(bookID), `checkFileContents: '${bookID}' is not a valid USFM book identifier`);\r\n    checkFileResult = checkUSFMText(languageCode, bookID, filename, fileContent, ourCFLocation, checkingOptions);\r\n  } else if (filename.toLowerCase().endsWith('.sfm')) {\r\n    const filenameMain = filename.substring(0, filename.length - 4); // drop .sfm\r\n    console.log(`Have SFM filenameMain=${filenameMain}`);\r\n    const bookID = filenameMain.substring(2, 5);\r\n    console.log(`Have SFM bookcode=${bookID}`);\r\n    console.assert(books.isValidBookID(bookID), `checkFileContents: '${bookID}' is not a valid USFM book identifier`);\r\n    checkFileResult = checkUSFMText(languageCode, bookID, filename, fileContent, ourCFLocation, checkingOptions);\r\n  } else if (filename.toLowerCase().endsWith('.md'))\r\n    checkFileResult = checkMarkdownText(filename, fileContent, ourCFLocation, checkingOptions);\r\n  else if (filename.toLowerCase().endsWith('.txt'))\r\n    checkFileResult = checkPlainText(filename, fileContent, ourCFLocation, checkingOptions);\r\n  else if (filename.toLowerCase() === 'manifest.yaml')\r\n    checkFileResult = checkManifestText(filename, fileContent, ourCFLocation, checkingOptions);\r\n  else if (filename.toLowerCase().endsWith('.yaml'))\r\n    checkFileResult = checkYAMLText(filename, fileContent, ourCFLocation, checkingOptions);\r\n  else {\r\n    checkFileResult = checkPlainText(filename, fileContent, ourCFLocation, checkingOptions);\r\n    checkFileResult.noticeList.unshift({ priority: 995, message: \"File extension is not recognized, so treated as plain text.\", filename, location: filename });\r\n  }\r\n  // console.log(`checkFileContents got initial results with ${checkFileResult.successList.length} success message(s) and ${checkFileResult.noticeList.length} notice(s)`);\r\n\r\n  // Add some extra fields to our checkFileResult object\r\n  //  in case we need this information again later\r\n  checkFileResult.checkedFileCount = 1;\r\n  checkFileResult.checkedFilename = filename;\r\n  checkFileResult.checkedFilesize = fileContent.length;\r\n  checkFileResult.checkedOptions = checkingOptions;\r\n\r\n  checkFileResult.elapsedSeconds = (new Date() - startTime) / 1000; // seconds\r\n  // console.log(`checkFileResult: ${JSON.stringify(checkFileResult)}`);\r\n  return checkFileResult;\r\n};\r\n// end of checkFileContents()\r\n\r\n\r\n/*\r\n    checkTQbook\r\n*/\r\nexport async function checkTQbook(username, languageCode, repoName, branch, bookID, checkingOptions) {\r\n  // console.log(`checkTQbook(${username}, ${repoName}, ${branch}, ${bookID}, ${JSON.stringify(checkingOptions)})…`)\r\n  const repoCode = 'TQ';\r\n  const generalLocation = `in ${username} ${repoName} (${branch})`;\r\n\r\n  const ctqResult = { successList: [], noticeList: [] };\r\n\r\n  function addSuccessMessage(successString) {\r\n    // console.log(`checkBookPackage success: ${successString}`);\r\n    ctqResult.successList.push(successString);\r\n  }\r\n\r\n  function addNotice10(noticeObject) {\r\n    // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n    // console.log(`checkTQbook addNotice10: ${noticeObject.priority}:${noticeObject.message} ${noticeObject.bookID} ${noticeObject.C}:${noticeObject.V} ${noticeObject.filename}:${noticeObject.lineNumber} ${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : \"\"}${noticeObject.extract ? ` ${noticeObject.extract}` : \"\"}${noticeObject.location}`);\r\n    console.assert(noticeObject.priority !== undefined, \"cTQ addNotice10: 'priority' parameter should be defined\");\r\n    console.assert(typeof noticeObject.priority === 'number', `cTQ addNotice10: 'priority' parameter should be a number not a '${typeof noticeObject.priority}'`);\r\n    console.assert(noticeObject.message !== undefined, \"cTQ addNotice10: 'message' parameter should be defined\");\r\n    console.assert(typeof noticeObject.message === 'string', `cTQ addNotice10: 'message' parameter should be a string not a '${typeof noticeObject.message}'`);\r\n    console.assert(noticeObject.bookID !== undefined, \"cTQ addNotice10: 'bookID' parameter should be defined\");\r\n    console.assert(typeof noticeObject.bookID === 'string', `cTQ addNotice10: 'bookID' parameter should be a string not a '${typeof noticeObject.bookID}'`);\r\n    console.assert(noticeObject.bookID.length === 3, `cTQ addNotice10: 'bookID' parameter should be three characters long not ${noticeObject.bookID.length}`);\r\n    console.assert(books.isValidBookID(noticeObject.bookID), `cTQ addNotice10: '${noticeObject.bookID}' is not a valid USFM book identifier`);\r\n    // console.assert(C !== undefined, \"cTQ addNotice10: 'C' parameter should be defined\");\r\n    if (noticeObject.C) console.assert(typeof noticeObject.C === 'string', `cTQ addNotice10: 'C' parameter should be a string not a '${typeof noticeObject.C}'`);\r\n    // console.assert(V !== undefined, \"cTQ addNotice10: 'V' parameter should be defined\");\r\n    if (noticeObject.V) console.assert(typeof noticeObject.V === 'string', `cTQ addNotice10: 'V' parameter should be a string not a '${typeof noticeObject.V}'`);\r\n    // console.assert(characterIndex !== undefined, \"cTQ addNotice10: 'characterIndex' parameter should be defined\");\r\n    if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cTQ addNotice10: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}'`);\r\n    // console.assert(extract !== undefined, \"cTQ addNotice10: 'extract' parameter should be defined\");\r\n    if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cTQ addNotice10: 'extract' parameter should be a string not a '${typeof noticeObject.extract}'`);\r\n    console.assert(noticeObject.location !== undefined, \"cTQ addNotice10: 'location' parameter should be defined\");\r\n    console.assert(typeof noticeObject.location === 'string', `cTQ addNotice10: 'location' parameter should be a string not a '${typeof noticeObject.location}'`);\r\n    console.assert(noticeObject.extra !== undefined, \"cTQ addNotice10: 'extra' parameter should be defined\");\r\n    console.assert(typeof noticeObject.extra === 'string', `cTQ addNotice10: 'extra' parameter should be a string not a '${typeof noticeObject.extra}'`);\r\n    ctqResult.noticeList.push({ ...noticeObject, bookID });\r\n  }\r\n\r\n\r\n  async function ourCheckFileContents(repoCode, bookID, C, V, cfFilename, file_content, fileLocation, optionalCheckingOptions) {\r\n    // console.log(`checkBookPackage ourCheckFileContents(${cfFilename})`);\r\n\r\n    // Updates the global list of notices\r\n    console.assert(repoCode !== undefined, \"cTQ ourCheckFileContents: 'repoCode' parameter should be defined\");\r\n    console.assert(typeof repoCode === 'string', `cTQ ourCheckFileContents: 'repoCode' parameter should be a string not a '${typeof repoCode}'`);\r\n    console.assert(cfFilename !== undefined, \"cTQ ourCheckFileContents: 'cfFilename' parameter should be defined\");\r\n    console.assert(typeof cfFilename === 'string', `cTQ ourCheckFileContents: 'cfFilename' parameter should be a string not a '${typeof cfFilename}'`);\r\n    console.assert(file_content !== undefined, \"cTQ ourCheckFileContents: 'file_content' parameter should be defined\");\r\n    console.assert(typeof file_content === 'string', `cTQ ourCheckFileContents: 'file_content' parameter should be a string not a '${typeof file_content}'`);\r\n    console.assert(fileLocation !== undefined, \"cTQ ourCheckFileContents: 'fileLocation' parameter should be defined\");\r\n    console.assert(typeof fileLocation === 'string', `cTQ ourCheckFileContents: 'fileLocation' parameter should be a string not a '${typeof fileLocation}'`);\r\n\r\n    const cfResultObject = await checkFileContents(languageCode, cfFilename, file_content, fileLocation, optionalCheckingOptions);\r\n    // console.log(\"checkFileContents() returned\", cfResultObject.successList.length, \"success message(s) and\", cfResultObject.noticeList.length, \"notice(s)\");\r\n    // for (const successEntry of cfResultObject.successList) console.log(\"  ourCheckFileContents:\", successEntry);\r\n\r\n    // Process results line by line,  appending the repoCode as an extra field as we go\r\n    for (const noticeEntry of cfResultObject.noticeList) {\r\n      // noticeEntry is an array of eight fields: 1=priority, 2=bookID, 3=C, 4=V, 5=msg, 6=characterIndex, 7=extract, 8=location\r\n      // console.assert(Object.keys(noticeEntry).length === 5, `cTQ ourCheckFileContents notice length=${Object.keys(noticeEntry).length}`);\r\n      // We add the repoCode as an extra value\r\n      addNotice10({ ...noticeEntry, bookID, C, V, extra: repoCode });\r\n    }\r\n  }\r\n  // end of ourCheckFileContents function\r\n\r\n\r\n  // Main code for checkTQbook\r\n  // We need to find an check all the markdown folders/files for this book\r\n  let checkedFileCount = 0, checkedFilenames = [], checkedFilenameExtensions = new Set(['md']), totalCheckedSize = 0;\r\n  const pathList = await getFilelistFromZip({ username, repository: repoName, branch, optionalPrefix: `${bookID.toLowerCase()}/` });\r\n  // console.log(`  Got ${pathList.length} pathList entries`)\r\n  for (const thisPath of pathList) {\r\n    // console.log(\"checkTQbook: Try to load\", username, repoName, thisPath, branch);\r\n\r\n    console.assert(thisPath.endsWith('.md'), `Expected ${thisPath} to end with .md`);\r\n    const filename = thisPath.split('/').pop();\r\n    const pathParts = thisPath.slice(0, -3).split('/');\r\n    const C = pathParts[pathParts.length - 2].replace(/^0+(?=\\d)/, ''); // Remove leading zeroes\r\n    const V = pathParts[pathParts.length - 1].replace(/^0+(?=\\d)/, ''); // Remove leading zeroes\r\n\r\n    const getFile_ = (checkingOptions && checkingOptions.getFile) ? checkingOptions.getFile : getFileCached;\r\n    let tqFileContent;\r\n    try {\r\n      tqFileContent = await getFile_({ username, repository: repoName, path: thisPath, branch });\r\n      // console.log(\"Fetched file_content for\", repoName, thisPath, typeof tqFileContent, tqFileContent.length);\r\n      checkedFilenames.push(thisPath);\r\n      totalCheckedSize += tqFileContent.length;\r\n    } catch (tQerror) {\r\n      console.log(\"checkTQbook failed to load\", username, repoName, thisPath, branch, tQerror + '');\r\n      addNotice10({ priority: 996, message: \"Failed to load\", bookID, C, V, location: `${generalLocation} ${thisPath}: ${tQerror}`, extra: repoCode });\r\n      continue;\r\n    }\r\n\r\n    // We use the generalLocation here (does not include repo name)\r\n    //  so that we can adjust the returned strings ourselves\r\n    await ourCheckFileContents(repoCode, bookID, C, V, filename, tqFileContent, generalLocation, checkingOptions); // Adds the notices to checkBookPackageResult\r\n    checkedFileCount += 1;\r\n    // addSuccessMessage(`Checked ${repoCode.toUpperCase()} file: ${thisPath}`);\r\n  }\r\n  addSuccessMessage(`Checked ${checkedFileCount.toLocaleString()} ${repoCode.toUpperCase()} file${checkedFileCount === 1 ? '' : 's'}`);\r\n\r\n  ctqResult.checkedFileCount = checkedFileCount;\r\n  ctqResult.checkedFilenames = checkedFilenames;\r\n  ctqResult.checkedFilenameExtensions = [...checkedFilenameExtensions]; // convert Set to Array\r\n  ctqResult.checkedFilesizes = totalCheckedSize;\r\n  // console.log(`  checkTQbook returning ${JSON.stringify(ctqResult)}`);\r\n  return ctqResult;\r\n}\r\n// end of checkTQbook function\r\n\r\n\r\n/*\r\n    checkBookPackage\r\n*/\r\nexport async function checkBookPackage(username, languageCode, bookID, setResultValue, checkingOptions) {\r\n  /*\r\n  Note: You may want to run clearCaches() before running this function???\r\n\r\n  Note that bookID here can also be the 'OBS' pseudo bookID.\r\n  */\r\n  // console.log(`checkBookPackage(${username}, ${languageCode}, ${bookID}, …)…`)\r\n  const startTime = new Date();\r\n\r\n  let checkBookPackageResult = { successList: [], noticeList: [] };\r\n\r\n  const newCheckingOptions = checkingOptions ? { ...checkingOptions } : {}; // clone before modify\r\n  const getFile_ = newCheckingOptions.getFile ? newCheckingOptions.getFile : getFileCached; // default to using caching of files\r\n  newCheckingOptions.getFile = getFile_; // use same getFile_ when we call core functions\r\n\r\n  function addSuccessMessage(successString) {\r\n    // console.log(`checkBookPackage success: ${successString}`);\r\n    checkBookPackageResult.successList.push(successString);\r\n  }\r\n\r\n  function addNotice10(noticeObject) {\r\n    // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n    // console.log(`checkBookPackage addNotice10: (priority=${noticeObject.priority}) ${noticeObject.bookID} ${noticeObject.C}:${noticeObject.V} ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n    console.assert(noticeObject.priority !== undefined, \"cBP addNotice10: 'priority' parameter should be defined\");\r\n    console.assert(typeof noticeObject.priority === 'number', `cBP addNotice10: 'priority' parameter should be a number not a '${typeof noticeObject.priority}'`);\r\n    console.assert(noticeObject.message !== undefined, \"cBP addNotice10: 'message' parameter should be defined\");\r\n    console.assert(typeof noticeObject.message === 'string', `cBP addNotice10: 'message' parameter should be a string not a '${typeof noticeObject.message}'`);\r\n    // console.assert(bookID !== undefined, \"cBP addNotice10: 'bookID' parameter should be defined\");\r\n    if (noticeObject.bookID) {\r\n      console.assert(typeof noticeObject.bookID === 'string', `cBP addNotice10: 'bookID' parameter should be a string not a '${typeof noticeObject.bookID}'`);\r\n      console.assert(noticeObject.bookID.length === 3, `cBP addNotice10: 'bookID' parameter should be three characters long not ${noticeObject.bookID.length}`);\r\n      console.assert(books.isValidBookID(noticeObject.bookID), `cBP addNotice10: '${noticeObject.bookID}' is not a valid USFM book identifier`);\r\n    }\r\n    // console.assert(C !== undefined, \"cBP addNotice10: 'C' parameter should be defined\");\r\n    if (noticeObject.C) console.assert(typeof noticeObject.C === 'string', `cBP addNotice10: 'C' parameter should be a string not a '${typeof noticeObject.C}'`);\r\n    // console.assert(V !== undefined, \"cBP addNotice10: 'V' parameter should be defined\");\r\n    if (noticeObject.V) console.assert(typeof noticeObject.V === 'string', `cBP addNotice10: 'V' parameter should be a string not a '${typeof noticeObject.V}'`);\r\n    // console.assert(characterIndex !== undefined, \"cBP addNotice10: 'characterIndex' parameter should be defined\");\r\n    if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cBP addNotice10: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}'`);\r\n    // console.assert(extract !== undefined, \"cBP addNotice10: 'extract' parameter should be defined\");\r\n    if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cBP addNotice10: 'extract' parameter should be a string not a '${typeof noticeObject.extract}'`);\r\n    console.assert(noticeObject.location !== undefined, \"cBP addNotice10: 'location' parameter should be defined\");\r\n    console.assert(typeof noticeObject.location === 'string', `cBP addNotice10: 'location' parameter should be a string not a '${typeof noticeObject.location}'`);\r\n    console.assert(noticeObject.extra !== undefined, \"cBP addNotice10: 'extra' parameter should be defined\");\r\n    console.assert(typeof noticeObject.extra === 'string', `cBP addNotice10: 'extra' parameter should be a string not a '${typeof noticeObject.extra}'`);\r\n    checkBookPackageResult.noticeList.push({ ...noticeObject, bookID });\r\n  }\r\n\r\n\r\n  async function ourCheckFileContents(repoCode, cfFilename, file_content, fileLocation, optionalCheckingOptions) {\r\n    // console.log(`checkBookPackage ourCheckFileContents(${cfFilename})`);\r\n\r\n    // Updates the global list of notices\r\n    console.assert(repoCode !== undefined, \"cBP ourCheckFileContents: 'repoCode' parameter should be defined\");\r\n    console.assert(typeof repoCode === 'string', `cBP ourCheckFileContents: 'repoCode' parameter should be a string not a '${typeof repoCode}'`);\r\n    console.assert(cfFilename !== undefined, \"cBP ourCheckFileContents: 'cfFilename' parameter should be defined\");\r\n    console.assert(typeof cfFilename === 'string', `cBP ourCheckFileContents: 'cfFilename' parameter should be a string not a '${typeof cfFilename}'`);\r\n    console.assert(file_content !== undefined, \"cBP ourCheckFileContents: 'file_content' parameter should be defined\");\r\n    console.assert(typeof file_content === 'string', `cBP ourCheckFileContents: 'file_content' parameter should be a string not a '${typeof file_content}'`);\r\n    console.assert(fileLocation !== undefined, \"cBP ourCheckFileContents: 'fileLocation' parameter should be defined\");\r\n    console.assert(typeof fileLocation === 'string', `cBP ourCheckFileContents: 'fileLocation' parameter should be a string not a '${typeof fileLocation}'`);\r\n\r\n    const cfcResultObject = await checkFileContents(languageCode, cfFilename, file_content, fileLocation, optionalCheckingOptions);\r\n    // console.log(\"checkFileContents() returned\", cfResultObject.successList.length, \"success message(s) and\", cfResultObject.noticeList.length, \"notice(s)\");\r\n    // for (const successEntry of cfResultObject.successList) console.log(\"  ourCheckFileContents:\", successEntry);\r\n    // console.log(\"cfcResultObject\", JSON.stringify(cfcResultObject));\r\n\r\n    // Process results line by line,  appending the repoCode as an extra field as we go\r\n    for (const cfcNoticeEntry of cfcResultObject.noticeList)\r\n      // noticeEntry is an object\r\n      // We add the repoCode as an extra value\r\n      addNotice10({ ...cfcNoticeEntry, extra: repoCode });\r\n  }\r\n  // end of ourCheckFileContents function\r\n\r\n  // Main code for checkBookPackage()\r\n  // No point in passing the branch through as a parameter\r\n  //  coz if it's not 'master', it's unlikely to be common for all the repos\r\n  const branch = 'master';\r\n\r\n  const generalLocation = ` in ${languageCode} ${bookID} book package from ${username} ${branch} branch`;\r\n\r\n  if (bookID === 'OBS') {\r\n    // We use the generalLocation here (does not include repo name)\r\n    //  so that we can adjust the returned strings ourselves\r\n    // console.log(\"Calling OBS checkRepo()…\");\r\n    checkBookPackageResult = await checkRepo(username, `${languageCode}_obs`, branch, generalLocation, setResultValue, newCheckingOptions); // Adds the notices to checkBookPackageResult\r\n    // console.log(`checkRepo() returned ${checkBookPackageResult.successList.length} success message(s) and ${checkBookPackageResult.noticeList.length} notice(s)`);\r\n    // console.log(\"crResultObject keys\", JSON.stringify(Object.keys(checkBookPackageResult)));\r\n\r\n    // Concat is faster if we don't need to process each notice individually\r\n    // checkBookPackageResult.successList = checkBookPackageResult.successList.concat(crResultObject.successList);\r\n    // checkBookPackageResult.noticeList = checkBookPackageResult.noticeList.concat(crResultObject.noticeList);\r\n    // checkedFileCount += crResultObject.fileCount;\r\n    addSuccessMessage(`Checked ${languageCode} OBS repo from ${username}`);\r\n  } else { // not OBS\r\n    // We also need to know the number for USFM books\r\n    let bookNumberAndName, whichTestament;\r\n    try {\r\n      bookNumberAndName = books.usfmNumberName(bookID);\r\n      whichTestament = books.testament(bookID); // returns 'old' or 'new'\r\n    } catch (bNNerror) {\r\n      if (books.isValidBookID(bookID)) // must be in FRT, BAK, etc.\r\n        whichTestament = 'other'\r\n      else {\r\n        addNotice10({ priority: 902, message: \"Bad function call: should be given a valid book abbreviation\", bookID, extract: bookID, location: ` (not '${bookID}')${generalLocation}` }); return checkBookPackageResult;\r\n      }\r\n    }\r\n    // console.log(`bookNumberAndName='${bookNumberAndName}' (${whichTestament} testament)`);\r\n\r\n    // So now we want to work through checking this one specified Bible book in various repos:\r\n    //  UHB/UGNT, ULT/GLT, UST/GST, TN, TQ\r\n    const getFile_ = (checkingOptions && checkingOptions.getFile) ? checkingOptions.getFile : getFileCached;\r\n    let checkedFileCount = 0, checkedFilenames = [], checkedFilenameExtensions = new Set(), totalCheckedSize = 0, checkedRepoNames = [];\r\n    const origLang = whichTestament === 'old' ? 'UHB' : 'UGNT';\r\n    const ULT = languageCode === 'en' ? 'ULT' : 'GLT';\r\n    const UST = languageCode === 'en' ? 'UST' : 'GST';\r\n\r\n    // TEMP: Removed TQ\r\n    const repoCodeList = [origLang, ULT, UST, 'TN'];\r\n    for (const repoCode of repoCodeList) {\r\n      console.log(`Check ${bookID} in ${repoCode} (${languageCode} ${bookID} from ${username})`);\r\n      const repoLocation = ` in ${repoCode.toUpperCase()}${generalLocation}`;\r\n      const repoName = getRepoName(languageCode, repoCode);\r\n\r\n      // Update our \"waiting\" message\r\n      setResultValue(<p style={{ color: 'magenta' }}>Checking {username} {languageCode} <b>{bookID}</b> book package in <b>{repoCode}</b> (checked <b>{checkedRepoNames.length.toLocaleString()}</b>/{repoCodeList.length} repos)…</p>);\r\n\r\n      let filename;\r\n      if (repoCode === 'UHB' || repoCode === 'UGNT' || repoCode === ULT || repoCode === UST) {\r\n        filename = `${bookNumberAndName}.usfm`;\r\n        checkedFilenameExtensions.add('usfm');\r\n      }\r\n      else if (repoCode === 'TN') {\r\n        filename = `${languageCode}_tn_${bookNumberAndName}.tsv`;\r\n        checkedFilenameExtensions.add('tsv');\r\n      }\r\n\r\n      if (repoCode === 'TQ') {\r\n        // This resource might eventually be converted to TSV tables\r\n        const tqResultObject = await checkTQbook(username, repoName, branch, bookID, newCheckingOptions);\r\n        checkBookPackageResult.successList = checkBookPackageResult.successList.concat(tqResultObject.successList);\r\n        checkBookPackageResult.noticeList = checkBookPackageResult.noticeList.concat(tqResultObject.noticeList);\r\n        checkedFilenames = checkedFilenames.concat(tqResultObject.checkedFilenames);\r\n        checkedFilenameExtensions = new Set([...checkedFilenameExtensions, ...tqResultObject.checkedFilenameExtensions]);\r\n        checkedFileCount += tqResultObject.checkedFileCount;\r\n        totalCheckedSize += tqResultObject.totalCheckedSize;\r\n        checkedRepoNames.push(repoCode);\r\n      } else { // For repos other than TQ, we only have one file to check\r\n        // console.log(\"Try to load\", username, repoName, filename, branch);\r\n        let repoFileContent;\r\n        try {\r\n          repoFileContent = await getFile_({ username, repository: repoName, path: filename, branch });\r\n          // console.log(\"Fetched file_content for\", repoName, filename, typeof repoFileContent, repoFileContent.length);\r\n          checkedFilenames.push(filename);\r\n          totalCheckedSize += repoFileContent.length;\r\n          checkedRepoNames.push(repoCode);\r\n        } catch (cBPgfError) {\r\n          console.log(\"ERROR: Failed to load\", username, repoName, filename, branch, cBPgfError + '');\r\n          addNotice10({ priority: 996, message: \"Failed to load\", bookID, repoName, filename, location: `${repoLocation}: ${cBPgfError}`, extra: repoCode });\r\n          continue;\r\n        }\r\n\r\n        // We use the generalLocation here (does not include repo name)\r\n        //  so that we can adjust the returned strings ourselves\r\n        await ourCheckFileContents(repoCode, filename, repoFileContent, generalLocation, newCheckingOptions); // Adds the notices to checkBookPackageResult\r\n        checkedFileCount += 1;\r\n        addSuccessMessage(`Checked ${repoCode.toUpperCase()} file: ${filename}`);\r\n      }\r\n    }\r\n\r\n    // Add some extra fields to our checkFileResult object\r\n    //  in case we need this information again later\r\n    checkBookPackageResult.checkedFileCount = checkedFileCount;\r\n    checkBookPackageResult.checkedFilenames = checkedFilenames;\r\n    checkBookPackageResult.checkedFilenameExtensions = [...checkedFilenameExtensions]; // convert Set to Array\r\n    checkBookPackageResult.checkedFilesizes = totalCheckedSize;\r\n    checkBookPackageResult.checkedRepoNames = checkedRepoNames;\r\n    // checkBookPackageResult.checkedOptions = checkingOptions; // This is done at the caller level\r\n  }\r\n\r\n  checkBookPackageResult.elapsedSeconds = (new Date() - startTime) / 1000; // seconds\r\n  // console.log(\"checkBookPackageResult:\", JSON.stringify(checkBookPackageResult));\r\n  return checkBookPackageResult;\r\n};\r\n// end of checkBookPackage()\r\n","import checkYAMLText from './yaml-text-check';\r\nimport * as books from './books';\r\n\r\n\r\nconst MANIFEST_VALIDATOR_VERSION_STRING = '0.2.1';\r\n\r\nconst DEFAULT_EXTRACT_LENGTH = 10;\r\n\r\n\r\nfunction checkManifestText(textName, manifestText, givenLocation, optionalCheckingOptions) {\r\n    /* This function is optimised for checking the entire file, i.e., all lines.\r\n\r\n    See the specification at https://resource-container.readthedocs.io/en/latest/manifest.html.\r\n\r\n    Returns a result object containing a successList and a noticeList\r\n    */\r\n    // console.log(`checkManifestText(${textName}, ${manifestText.length}, ${givenLocation})…`);\r\n    let ourLocation = givenLocation;\r\n    if (ourLocation && ourLocation[0] !== ' ') ourLocation = ` ${ourLocation}`;\r\n    if (textName) ourLocation = ` in ${textName}${ourLocation}`;\r\n\r\n    let extractLength;\r\n    try {\r\n        extractLength = optionalCheckingOptions.extractLength;\r\n    } catch (mfcError) { }\r\n    if (typeof extractLength !== 'number' || isNaN(extractLength)) {\r\n        extractLength = DEFAULT_EXTRACT_LENGTH;\r\n        // console.log(`Using default extractLength=${extractLength}`);\r\n    }\r\n    // else\r\n        // console.log(`Using supplied extractLength=${extractLength}`, `cf. default=${DEFAULT_EXTRACT_LENGTH}`);\r\n    // const halfLength = Math.floor(extractLength / 2); // rounded down\r\n    // const halfLengthPlus = Math.floor((extractLength + 1) / 2); // rounded up\r\n    // console.log(`Using halfLength=${halfLength}`, `halfLengthPlus=${halfLengthPlus}`);\r\n\r\n    const cmtResult = { successList: [], noticeList: [] };\r\n\r\n    function addSuccessMessage(successString) {\r\n        // console.log(`checkManifestText success: ${successString}`);\r\n        cmtResult.successList.push(successString);\r\n    }\r\n    function addNotice9({priority,message, bookID,C,V, lineNumber, characterIndex, extract, location}) {\r\n        // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n        // console.log(`checkManifestText Notice: (priority=${priority}) ${message}${characterIndex > 0 ? ` (at character ${characterIndex})` : \"\"}${extract ? ` ${extract}` : \"\"}${location}`);\r\n        console.assert(priority !== undefined, \"cManT addNotice9: 'priority' parameter should be defined\");\r\n        console.assert(typeof priority === 'number', `cManT addNotice9: 'priority' parameter should be a number not a '${typeof priority}': ${priority}`);\r\n        console.assert(message !== undefined, \"cManT addNotice9: 'message' parameter should be defined\");\r\n        console.assert(typeof message === 'string', `cManT addNotice9: 'message' parameter should be a string not a '${typeof message}': ${message}`);\r\n        console.assert(bookID !== undefined, \"cManT addNotice9: 'bookID' parameter should be defined\");\r\n        console.assert(typeof bookID === 'string', `cManT addNotice9: 'bookID' parameter should be a string not a '${typeof bookID}'`);\r\n        console.assert(bookID.length === 3, `cManT addNotice9: 'bookID' parameter should be three characters long not ${bookID.length}`);\r\n        console.assert(books.isValidBookID(bookID), `cManT addNotice9: '${bookID}' is not a valid USFM book identifier`);\r\n        // console.assert(C !== undefined, \"cManT addNotice9: 'C' parameter should be defined\");\r\n        if (C) console.assert(typeof C === 'string', `cManT addNotice9: 'C' parameter should be a string not a '${typeof C}'`);\r\n        // console.assert(V !== undefined, \"cManT addNotice9: 'V' parameter should be defined\");\r\n        if (V) console.assert(typeof V === 'string', `cManT addNotice9: 'V' parameter should be a string not a '${typeof V}'`);\r\n        // console.assert(characterIndex !== undefined, \"cManT addNotice9: 'characterIndex' parameter should be defined\");\r\n        if (characterIndex) console.assert(typeof characterIndex === 'number', `cManT addNotice9: 'characterIndex' parameter should be a number not a '${typeof characterIndex}': ${characterIndex}`);\r\n        // console.assert(extract !== undefined, \"cManT addNotice9: 'extract' parameter should be defined\");\r\n        if (extract) console.assert(typeof extract === 'string', `cManT addNotice9: 'extract' parameter should be a string not a '${typeof extract}': ${extract}`);\r\n        console.assert(location !== undefined, \"cManT addNotice9: 'location' parameter should be defined\");\r\n        console.assert(typeof location === 'string', `cManT addNotice9: 'location' parameter should be a string not a '${typeof location}': ${location}`);\r\n        cmtResult.noticeList.push({priority,message, bookID,C,V, lineNumber, characterIndex,extract, location});\r\n    }\r\n\r\n\r\n    function ourYAMLTextChecks(textName, manifestText, givenLocation, optionalCheckingOptions) {\r\n        // Does basic checks for small errors like leading/trailing spaces, etc.\r\n\r\n        // We assume that checking for compulsory fields is done elsewhere\r\n\r\n        // Updates the global list of notices\r\n        // console.log(`cManT ourYAMLTextChecks(${textName}, (${fieldText.length}), ${allowedLinks}, ${fieldLocation}, …)`);\r\n        console.assert(textName !== undefined, \"cManT ourYAMLTextChecks: 'textName' parameter should be defined\");\r\n        console.assert(typeof textName === 'string', `cManT ourYAMLTextChecks: 'textName' parameter should be a string not a '${typeof textName}'`);\r\n        console.assert(manifestText !== undefined, \"cManT ourYAMLTextChecks: 'manifestText' parameter should be defined\");\r\n        console.assert(typeof manifestText === 'string', `cManT ourYAMLTextChecks: 'manifestText' parameter should be a string not a '${typeof manifestText}'`);\r\n        // console.assert( allowedLinks===true || allowedLinks===false, \"cManT ourYAMLTextChecks: allowedLinks parameter must be either true or false\");\r\n\r\n        const cYtResultObject = checkYAMLText(textName, manifestText, givenLocation, optionalCheckingOptions);\r\n\r\n        // Concat is faster if we don't need to process each notice individually\r\n        cmtResult.successList = cmtResult.successList.concat(cYtResultObject.successList);\r\n        cmtResult.noticeList = cmtResult.noticeList.concat(cYtResultObject.noticeList);\r\n        /* // Process results line by line\r\n        //  suppressing undesired errors\r\n        for (const noticeEntry of cYtResultObject.noticeList)\r\n            if (noticeEntry.priority !== 191 // \"Unexpected XXX character after space\"\r\n              && noticeEntry.message !== \"Unexpected ' character after space\"\r\n              && noticeEntry.message !== \"Unexpected space after ' character\"\r\n              && noticeEntry.message !== \"Unexpected space after [ character\"\r\n              )\r\n                addNotice9(noticeEntry.priority, noticeEntry.message, noticeEntry[2], noticeEntry[3], noticeEntry[4], noticeEntry[5], noticeEntry[6], noticeEntry[7]);\r\n        */\r\n        return cYtResultObject.formData;\r\n    }\r\n    // end of ourYAMLTextChecks function\r\n\r\n\r\n    // Main code for checkManifestText function\r\n    const formData = ourYAMLTextChecks(textName, manifestText, ourLocation, optionalCheckingOptions);\r\n    if (formData) {\r\n        // console.log(\"formData\", JSON.stringify(formData));\r\n        const formDataKeys = Object.keys(formData);\r\n        // console.log(\"formData keys\", JSON.stringify(formDataKeys));\r\n\r\n        if (formDataKeys.indexOf('dublin_core') < 0)\r\n            addNotice9({priority:928, message:\"'dublin_core' key is missing\", location:ourLocation});\r\n        if (formDataKeys.indexOf('projects') < 0)\r\n            addNotice9({priority:929, message:\"'projects' key is missing\", location:ourLocation});\r\n        if (formDataKeys.indexOf('checking') < 0)\r\n            addNotice9({priority:148, message:\"'checking' key is missing\", location:ourLocation});\r\n    }\r\n\r\n    // addSuccessMessage(`Checked all ${lines.length.toLocaleString()} line${lines.length==1?'':'s'}${ourLocation}.`);\r\n    if (cmtResult.noticeList)\r\n        addSuccessMessage(`checkManifestText v${MANIFEST_VALIDATOR_VERSION_STRING} finished with ${cmtResult.noticeList.length ? cmtResult.noticeList.length.toLocaleString() : \"zero\"} notice${cmtResult.noticeList.length === 1 ? '' : 's'}`);\r\n    else\r\n        addSuccessMessage(`No errors or warnings found by checkManifestText v${MANIFEST_VALIDATOR_VERSION_STRING}`)\r\n    // console.log(`  checkManifestText returning with ${cmtResult.successList.length.toLocaleString()} success(es), ${cmtResult.noticeList.length.toLocaleString()} notice(s).`);\r\n    // console.log(\"checkManifestText result is\", JSON.stringify(result));\r\n    return cmtResult;\r\n}\r\n// end of checkManifestText function\r\n\r\n\r\nexport default checkManifestText;\r\n","//export * from './checkBookPackage';\r\nexport {default} from './BookPackageCheck';\r\n","import React, { useState, useEffect } from 'react';\r\n// import { withStyles } from '@material-ui/core/styles';\r\nimport * as books from '../../core/books/books';\r\nimport { ourParseInt, checkBookPackage, clearCacheAndPreloadRepos } from '../../core';\r\nimport { processNoticesToErrorsWarnings, processNoticesToSevereMediumLow, processNoticesToSingleList } from '../notice-processing-functions';\r\nimport { RenderSuccessesErrorsWarnings, RenderSuccessesSevereMediumLow, RenderSuccessesWarningsGradient, RenderElapsedTime } from '../RenderProcessedResults';\r\n// import { consoleLogObject } from '../../core/utilities';\r\n\r\n\r\n// const BP_VALIDATOR_VERSION_STRING = '0.2.1';\r\n\r\n\r\nfunction BookPackageCheck(/*username, languageCode, bookID,*/ props) {\r\n    // Check a single Bible book across many repositories\r\n    const [result, setResultValue] = useState(\"Waiting-CheckBookPackage\");\r\n\r\n    // console.log(`I'm here in BookPackageCheck v${BP_VALIDATOR_VERSION_STRING}`);\r\n    // consoleLogObject(\"props\", props);\r\n    // consoleLogObject(\"props.classes\", props.classes);\r\n\r\n    let username = props.username;\r\n    // console.log(`username='${username}'`);\r\n    let languageCode = props.languageCode;\r\n    // console.log(`languageCode='${languageCode}'`);\r\n    let bookID = props.bookID;\r\n    // console.log(`bookID='${bookID}'`);\r\n    let branch = props.branch;\r\n    // console.log(`branch='${branch}'`);\r\n\r\n    // Clear cached files if we've changed repo\r\n    //  autoClearCache(bookID); // This technique avoids the complications of needing a button\r\n\r\n    let checkingOptions = { // Uncomment any of these to test them\r\n        // 'extractLength': 25,\r\n    };\r\n    // Or this allows the parameters to be specified as a BookPackageCheck property\r\n    if (props.extractLength) checkingOptions.extractLength = ourParseInt(props.extractLength);\r\n\r\n    useEffect(() => {\r\n        // const newProps = { bookID, branch, checkingOptions, languageCode, cutoffPriorityLevel: props.cutoffPriorityLevel, displayType: props.displayType, errorPriorityLevel: props.errorPriorityLevel, maximumSimilarMessages: props.maximumSimilarMessages, sortBy: props.sortBy, username};\r\n        // console.log(\"BookPackageCheck.useEffect() called with \", JSON.stringify(newProps));\r\n\r\n        // Use an IIFE (Immediately Invoked Function Expression)\r\n        //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174\r\n        (async () => {\r\n            // console.log(\"Started BookPackageCheck.unnamedFunction()\");\r\n\r\n            // NOTE from RJH: I can't find the correct React place for this / way to do this\r\n            //                  so it shows a warning for the user, and doesn't continue to try to process\r\n            if (bookID !== 'OBS' && !books.isValidBookID(bookID)) {\r\n                console.log(`Invalid '${bookID}' bookID given!`)\r\n                setResultValue(<p style={{ color: 'red' }}>Please enter a valid USFM book identifier or 'OBS'. ('<b>{bookID}</b>' is not valid.)</p>);\r\n                return;\r\n            }\r\n\r\n            if (bookID !== 'OBS') {\r\n                // Preload the reference repos\r\n                // RJH TODO: Doesn't the end user need control of this somehow???\r\n                // TEMP: Removed TQ\r\n                setResultValue(<p style={{ color: 'magenta' }}>Preloading repos for {username} {languageCode} ready for <b>{bookID}</b> book package check…</p>);\r\n                // This call is not needed, but makes sure you don't have stale data that has been cached\r\n                const successFlag = await clearCacheAndPreloadRepos(username, languageCode, [bookID], branch);\r\n                if (!successFlag)\r\n                    console.log(`BookPackageCheck error: Failed to pre-load all repos`)\r\n            }\r\n\r\n            // Display our \"waiting\" message\r\n            setResultValue(<p style={{ color: 'magenta' }}>Checking {username} {languageCode} <b>{bookID}</b> book package…</p>);\r\n\r\n            const rawCBPResults = await checkBookPackage(username, languageCode, bookID, setResultValue, checkingOptions);\r\n            // console.log(\"checkBookPackage() returned\", typeof rawCBPResults); //, JSON.stringify(rawCBPResults));\r\n\r\n            // Add some extra fields to our rawCBPResults object in case we need this information again later\r\n            rawCBPResults.checkType = 'BookPackage';\r\n            rawCBPResults.username = username;\r\n            rawCBPResults.languageCode = languageCode;\r\n            rawCBPResults.bookID = bookID;\r\n            rawCBPResults.checkedOptions = checkingOptions;\r\n\r\n            // console.log(\"Here with CBP rawCBPResults\", typeof rawCBPResults);\r\n            // Now do our final handling of the result -- we have some options available\r\n            let processOptions = { // Uncomment any of these to test them\r\n                // 'maximumSimilarMessages': 4, // default is 3 -- 0 means don't suppress\r\n                // 'errorPriorityLevel': 800, // default is 700\r\n                // 'cutoffPriorityLevel': 100, // default is 0\r\n                // 'sortBy': 'ByPriority', // default is 'AsFound'\r\n                // 'ignorePriorityNumberList': [123, 202], // default is []\r\n            };\r\n            // Or this allows the parameters to be specified as a BookPackageCheck property\r\n            if (props.maximumSimilarMessages) processOptions.maximumSimilarMessages = ourParseInt(props.maximumSimilarMessages);\r\n            if (props.errorPriorityLevel) processOptions.errorPriorityLevel = ourParseInt(props.errorPriorityLevel);\r\n            if (props.cutoffPriorityLevel) processOptions.cutoffPriorityLevel = ourParseInt(props.cutoffPriorityLevel);\r\n            if (props.sortBy) processOptions.sortBy = props.sortBy;\r\n            // if (props.ignorePriorityNumberList) processOptions.ignorePriorityNumberList = props.ignorePriorityNumberList;\r\n\r\n            let displayType = 'ErrorsWarnings'; // default\r\n            if (props.displayType) displayType = props.displayType;\r\n\r\n            function renderSummary(processedResults) {\r\n                return (<div>\r\n                    <p>Checked <b>{username} {languageCode} {bookID}</b> (from <i>{branch === undefined ? 'DEFAULT' : branch}</i> branches)</p>\r\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Successfully checked {processedResults.checkedFileCount.toLocaleString()} file{processedResults.checkedFileCount === 1 ? '' : 's'} from {processedResults.checkedRepoNames.length} repo{processedResults.checkedRepoNames.length === 1 ? '' : 's'}: <b>{processedResults.checkedRepoNames.join(', ')}</b>\r\n                        <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;including {processedResults.checkedFilenameExtensions.length} file type{processedResults.checkedFilenameExtensions.size === 1 ? '' : 's'}: {processedResults.checkedFilenameExtensions.join(', ')}.</p>\r\n                    <p>&nbsp;&nbsp;&nbsp;&nbsp;Finished in <RenderElapsedTime elapsedSeconds={processedResults.elapsedSeconds} /> with {rawCBPResults.noticeList.length===0?'no':rawCBPResults.noticeList.length} notice{rawCBPResults.noticeList.length===1?'':'s'}.</p>\r\n                    {/* <RenderRawResults results={rawCBPResults} /> */}\r\n                </div>);\r\n            }\r\n\r\n            if (displayType === 'ErrorsWarnings') {\r\n                const processedResults = processNoticesToErrorsWarnings(rawCBPResults, processOptions);\r\n                //             console.log(`BookPackageCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()} numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n                // console.log(\"Here now in rendering bit!\");\r\n\r\n                if (processedResults.errorList.length || processedResults.warningList.length)\r\n                    setResultValue(<>\r\n                        {renderSummary(processedResults)}\r\n                        {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}\r\n                        <RenderSuccessesErrorsWarnings results={processedResults} />\r\n                    </>);\r\n                else // no errors or warnings\r\n                    setResultValue(<>\r\n                        {renderSummary(processedResults)}\r\n                        {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}\r\n                        <RenderSuccessesErrorsWarnings results={processedResults} />\r\n                    </>);\r\n            } else if (displayType === 'SevereMediumLow') {\r\n                const processedResults = processNoticesToSevereMediumLow(rawCBPResults, processOptions);\r\n                //             console.log(`BookPackageCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()} numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n                if (processedResults.severeList.length || processedResults.mediumList.length || processedResults.lowList.length)\r\n                    setResultValue(<>\r\n                        {renderSummary(processedResults)}\r\n                        {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}\r\n                        <RenderSuccessesSevereMediumLow results={processedResults} />\r\n                    </>);\r\n                else // no severe, medium, or low notices\r\n                    setResultValue(<>\r\n                        {renderSummary(processedResults)}\r\n                        {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}\r\n                        <RenderSuccessesSevereMediumLow results={processedResults} />\r\n                    </>);\r\n            } else if (displayType === 'SingleList') {\r\n                const processedResults = processNoticesToSingleList(rawCBPResults, processOptions);\r\n                //             console.log(`BookPackageCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n                //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()} numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n                if (processedResults.warningList.length)\r\n                    setResultValue(<>\r\n                        {renderSummary(processedResults)}\r\n                        {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}\r\n                        <RenderSuccessesWarningsGradient results={processedResults} />\r\n                    </>);\r\n                else // no warnings\r\n                    setResultValue(<>\r\n                        {renderSummary(processedResults)}\r\n                        {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}\r\n                        <RenderSuccessesWarningsGradient results={processedResults} />\r\n                    </>);\r\n            } else setResultValue(<b style={{ color: 'red' }}>Invalid displayType='{displayType}'</b>)\r\n\r\n            // console.log(\"Finished rendering bit.\");\r\n        })(); // end of async part in unnamedFunction\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [bookID, branch, JSON.stringify(checkingOptions), languageCode, JSON.stringify(props), username]); // end of useEffect part\r\n\r\n    // {/* <div className={classes.root}> */}\r\n    return (\r\n        <div className=\"Fred\">\r\n            {result}\r\n        </div>\r\n    );\r\n}\r\n\r\n// BookPackageCheck.propTypes = {\r\n//   /** @ignore */\r\n//   username: PropTypes.object.isRequired,\r\n//   /** @ignore */\r\n//   languageCode: PropTypes.object.isRequired,\r\n//   bookID: PropTypes.object.isRequired,\r\n//   props: PropTypes.object,\r\n// };\r\n\r\n// const styles = theme => ({\r\n//   root: {\r\n//   },\r\n// });\r\n\r\n//export default withStyles(styles)(BookPackageCheck);\r\nexport default BookPackageCheck;\r\n","//export {checkBookPackages} from './checkBookPackages';\r\nexport {default} from './BookPackagesCheck';\r\n","import React, { useState, useEffect } from 'react';\r\n// import { withStyles } from '@material-ui/core/styles';\r\nimport * as books from '../../core/books/books';\r\nimport { ourParseInt, clearCacheAndPreloadRepos } from '../../core';\r\nimport checkBookPackages from './checkBookPackages';\r\nimport { processNoticesToErrorsWarnings, processNoticesToSevereMediumLow, processNoticesToSingleList } from '../notice-processing-functions';\r\nimport { RenderSuccessesErrorsWarnings, RenderSuccessesSevereMediumLow, RenderSuccessesWarningsGradient, RenderElapsedTime } from '../RenderProcessedResults';\r\n// import { consoleLogObject } from '../../core/utilities';\r\n\r\n\r\n// const BPS_VALIDATOR_VERSION_STRING = '0.1.2';\r\n\r\n\r\nfunction BookPackagesCheck(/*username, languageCode, bookIDs,*/ props) {\r\n    // Check a single Bible book across many repositories\r\n    const [result, setResultValue] = useState(\"Waiting-CheckBookPackages\");\r\n\r\n    // console.log(`I'm here in BookPackagesCheck v${BPS_VALIDATOR_VERSION_STRING}`);\r\n    // consoleLogObject(\"props\", props);\r\n    // consoleLogObject(\"props.classes\", props.classes);\r\n\r\n    let username = props.username;\r\n    // console.log(`username='${username}'`);\r\n    let languageCode = props.languageCode;\r\n    // console.log(`languageCode='${languageCode}'`);\r\n    let bookIDs = props.bookIDs;\r\n    // console.log(`bookIDs='${bookIDs}'`);\r\n    let branch = props.branch;\r\n    // console.log(`branch='${branch}'`);\r\n\r\n    // Clear cached files if we've changed repo\r\n    //  autoClearCache(bookIDs); // This technique avoids the complications of needing a button\r\n\r\n    let bookIDList = [];\r\n    let bookIDInvalid;\r\n    for (let bookID of bookIDs.split(',')) {\r\n        bookID = bookID.trim();\r\n        if (!books.isValidBookID(bookID) && bookID!=='OBS') {\r\n            bookIDInvalid = bookID;\r\n        }\r\n        bookIDList.push(bookID);\r\n    }\r\n    // console.log(`bookIDList (${bookIDList.length}) = ${bookIDList.join(', ')}`);\r\n\r\n    let checkingOptions = { // Uncomment any of these to test them\r\n        // 'extractLength': 25,\r\n    };\r\n    // Or this allows the parameters to be specified as a BookPackagesCheck property\r\n    if (props.extractLength) checkingOptions.extractLength = ourParseInt(props.extractLength);\r\n\r\n    useEffect(() => {\r\n        // console.log(\"BookPackagesCheck.useEffect() called with \", JSON.stringify(props));\r\n\r\n        // Use an IIFE (Immediately Invoked Function Expression)\r\n        //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174\r\n        (async () => {\r\n        // console.log(\"Started BookPackagesCheck.unnamedFunction()\");\r\n\r\n        // // TODO: We need to implement BM's new function here\r\n        // // Preload the reference repos\r\n        // let preloadCount = 1;\r\n        // // TEMP: Removed TQ\r\n        // const repoCodeList = ['UHB','UGNT', 'TA','TW'];\r\n        // for (const repoCode of repoCodeList) {\r\n        // setResultValue(<p style={{ color: 'magenta' }}>Preloading <b>{repoCode}</b> repo ({preloadCount}/{repoCodeList.length}) ready for {username} {languageCode} book packages check…</p>);\r\n        //     const repoName = getRepoName(languageCode, repoCode);\r\n        //     console.log(`BookPackagesCheck: preloading zip file for ${repoName}…`);\r\n        //     const zipFetchSucceeded = await fetchRepositoryZipFile({ username, repository: repoName, branch });\r\n        //     if (!zipFetchSucceeded)\r\n        //         console.log(`BookPackagesCheck: misfetched ${repoCode} zip file for repo with ${zipFetchSucceeded}`);\r\n        //     preloadCount += 1;\r\n        //     }\r\n\r\n        // This call is not needed, but makes sure you don't have stale data that has been cached\r\n        setResultValue(<p style={{ color: 'magenta' }}>Preloading repos for {username} {languageCode} ready for book packages check…</p>);\r\n        const successFlag = await clearCacheAndPreloadRepos(username, languageCode, bookIDList, branch);\r\n        if (!successFlag)\r\n            console.log(`BookPackagesCheck error: Failed to pre-load all repos`)\r\n\r\n      // Display our \"waiting\" message\r\n      setResultValue(<p style={{ color: 'magenta' }}>Checking {username} {languageCode} <b>{bookIDList.join(', ')}</b> book packages…</p>);\r\n\r\n      const rawCBPsResults = await checkBookPackages(username, languageCode, bookIDList, setResultValue, checkingOptions);\r\n      // console.log(\"checkBookPackage() returned\", typeof rawCBPsResults); //, JSON.stringify(rawCBPsResults));\r\n\r\n      // Add some extra fields to our rawCBPsResults object in case we need this information again later\r\n      rawCBPsResults.checkType = 'BookPackages';\r\n      rawCBPsResults.username = username;\r\n      rawCBPsResults.languageCode = languageCode;\r\n      rawCBPsResults.bookIDs = bookIDs;\r\n      rawCBPsResults.bookIDList = bookIDList;\r\n      rawCBPsResults.checkedOptions = checkingOptions;\r\n\r\n      // console.log(\"Here with CBPs rawCBPsResults\", typeof rawCBPsResults);\r\n      // Now do our final handling of the result -- we have some options available\r\n      let processOptions = { // Uncomment any of these to test them\r\n        // 'maximumSimilarMessages': 4, // default is 3 -- 0 means don't suppress\r\n        // 'errorPriorityLevel': 800, // default is 700\r\n        // 'cutoffPriorityLevel': 100, // default is 0\r\n        // 'sortBy': 'ByPriority', // default is 'AsFound'\r\n        // 'ignorePriorityNumberList': [123, 202], // default is []\r\n      };\r\n      // Or this allows the parameters to be specified as a BookPackagesCheck property\r\n      if (props.maximumSimilarMessages) processOptions.maximumSimilarMessages = ourParseInt(props.maximumSimilarMessages);\r\n      if (props.errorPriorityLevel) processOptions.errorPriorityLevel = ourParseInt(props.errorPriorityLevel);\r\n      if (props.cutoffPriorityLevel) processOptions.cutoffPriorityLevel = ourParseInt(props.cutoffPriorityLevel);\r\n      if (props.sortBy) processOptions.sortBy = props.sortBy;\r\n      // if (props.ignorePriorityNumberList) processOptions.ignorePriorityNumberList = props.ignorePriorityNumberList;\r\n\r\n      let displayType = 'ErrorsWarnings'; // default\r\n      if (props.displayType) displayType = props.displayType;\r\n\r\n      function renderSummary(processedResults) {\r\n        return (<div>\r\n          <p>Checked <b>{username} {languageCode} {bookIDList.join(', ')}</b> (from <i>{branch === undefined ? 'DEFAULT' : branch}</i> branches)</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;Successfully checked {processedResults.checkedFileCount.toLocaleString()} file{processedResults.checkedFileCount===1?'':'s'} from {username} {processedResults.checkedRepoNames.join(', ')}\r\n            <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;including {processedResults.checkedFilenameExtensions.length} file type{processedResults.checkedFilenameExtensions.size === 1 ? '' : 's'}: {processedResults.checkedFilenameExtensions.join(', ')}.</p>\r\n          <p>&nbsp;&nbsp;&nbsp;&nbsp;Finished in <RenderElapsedTime elapsedSeconds={processedResults.elapsedSeconds} /> with {rawCBPsResults.noticeList.length===0?'no':rawCBPsResults.noticeList.length} notice{rawCBPsResults.noticeList.length===1?'':'s'}.</p>\r\n          {/* <RenderRawResults results={rawCBPsResults} /> */}\r\n        </div>);\r\n      }\r\n\r\n    if (displayType === 'ErrorsWarnings') {\r\n        const processedResults = processNoticesToErrorsWarnings(rawCBPsResults, processOptions);\r\n        console.log(`BookPackagesCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n  numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()} numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()} numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n        // console.log(\"Here now in rendering bit!\");\r\n\r\n        if (processedResults.errorList.length || processedResults.warningList.length)\r\n          setResultValue(<>\r\n            <div>{renderSummary(processedResults)}\r\n              {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n            <RenderSuccessesErrorsWarnings results={processedResults} />\r\n          </>);\r\n        else // no errors or warnings\r\n          setResultValue(<>\r\n            <div>{renderSummary(processedResults)}\r\n              {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n            <RenderSuccessesErrorsWarnings results={processedResults} />\r\n          </>);\r\n\r\n      } else if (displayType === 'SevereMediumLow') {\r\n        const processedResults = processNoticesToSevereMediumLow(rawCBPsResults, processOptions);\r\n//                 console.log(`FileCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n//   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()}`, `numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()}`, `numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n        if (processedResults.severeList.length || processedResults.mediumList.length || processedResults.lowList.length)\r\n          setResultValue(<>\r\n            <div>{renderSummary(processedResults)}\r\n              {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n            <RenderSuccessesSevereMediumLow results={processedResults} />\r\n          </>);\r\n        else // no severe, medium, or low notices\r\n          setResultValue(<>\r\n            <div>{renderSummary(processedResults)}\r\n              {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n            <RenderSuccessesSevereMediumLow results={processedResults} />\r\n          </>);\r\n\r\n      } else if (displayType === 'SingleList') {\r\n        const processedResults = processNoticesToSingleList(rawCBPsResults, processOptions);\r\n        console.log(`FileCheck got processed results with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n  numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()}`, `numSuppressedErrors=${processedResults.numSuppressedErrors.toLocaleString()}`, `numSuppressedWarnings=${processedResults.numSuppressedWarnings.toLocaleString()}`);\r\n\r\n        if (processedResults.warningList.length)\r\n          setResultValue(<>\r\n            <div>{renderSummary(processedResults)}\r\n              {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n            <RenderSuccessesWarningsGradient results={processedResults} />\r\n          </>);\r\n        else // no warnings\r\n          setResultValue(<>\r\n            <div>{renderSummary(processedResults)}\r\n              {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n            <RenderSuccessesWarningsGradient results={processedResults} />\r\n          </>);\r\n      } else setResultValue(<b style={{ color: 'red' }}>Invalid displayType='{displayType}'</b>)\r\n\r\n      // console.log(\"Finished rendering bit.\");\r\n    })(); // end of async part in unnamedFunction\r\n    // Doesn't work if we add this to next line: bookIDList,bookIDs,username,branch,checkingOptions,languageCode,props\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [JSON.stringify(bookIDList), bookIDs, branch, JSON.stringify(checkingOptions), languageCode, JSON.stringify(props), username]); // end of useEffect part\r\n\r\n  if (bookIDInvalid) {\r\n    return (<p>Please enter only valid USFM book identifiers separated by commas. ('{bookIDInvalid}' is not valid.)</p>);\r\n  }\r\n\r\n  // {/* <div className={classes.root}> */}\r\n  return (\r\n    <div className=\"Fred\">\r\n      {result}\r\n    </div>\r\n  );\r\n}\r\n\r\n// BookPackagesCheck.propTypes = {\r\n//   /** @ignore */\r\n//   username: PropTypes.object.isRequired,\r\n//   /** @ignore */\r\n//   languageCode: PropTypes.object.isRequired,\r\n//   bookIDs: PropTypes.object.isRequired,\r\n//   props: PropTypes.object,\r\n// };\r\n\r\n// const styles = theme => ({\r\n//   root: {\r\n//   },\r\n// });\r\n\r\n//export default withStyles(styles)(BookPackagesCheck);\r\nexport default BookPackagesCheck;\r\n","import * as books  from '../../core/books/books';\r\nimport { checkBookPackage } from '../../core';\r\n// import { consoleLogObject } from '../../core/utilities';\r\n\r\n//const VALIDATOR_VERSION_STRING = '0.2.1';\r\n\r\n\r\nasync function checkBookPackages(username, languageCode, bookIDList, setResultValue, checkingOptions) {\r\n    //     console.log(`I'm here in checkBookPackages v${VALIDATOR_VERSION_STRING}\r\n    //   with ${username}, ${languageCode}, ${bookIDList}, ${JSON.stringify(checkingOptions)}`);\r\n    const startTime = new Date();\r\n\r\n    const checkBookPackagesResult = { successList: [], noticeList: [] };\r\n\r\n    // function addSuccessMessage(successString) {\r\n    //     // console.log(`checkBookPackages success: ${successString}`);\r\n    //     checkBookPackagesResult.successList.push(successString);\r\n    // }\r\n\r\n    function addNotice10(noticeObject) {\r\n        // bookID is a three-character UPPERCASE USFM book identifier or 'OBS'.\r\n        console.log(`cBPs addNotice10: (priority=${noticeObject.priority}) ${noticeObject.extra} ${noticeObject.message}${noticeObject.characterIndex > 0 ? ` (at character ${noticeObject.characterIndex})` : \"\"}${noticeObject.extract ? ` ${noticeObject.extract}` : \"\"}${noticeObject.location}`);\r\n        console.assert(noticeObject.priority !== undefined, \"cBPs addNotice10: 'priority' parameter should be defined\");\r\n        console.assert(typeof noticeObject.priority === 'number', `cBPs addNotice10: 'priority' parameter should be a number not a '${typeof noticeObject.priority}'`);\r\n        console.assert(noticeObject.message !== undefined, \"cBPs addNotice10: 'message' parameter should be defined\");\r\n        console.assert(typeof noticeObject.message === 'string', `cBPs addNotice10: 'message' parameter should be a string not a '${typeof noticeObject.message}'`);\r\n        // console.assert(bookID !== undefined, \"cBPs addNotice10: 'bookID' parameter should be defined\");\r\n        if (noticeObject.bookID) {\r\n            console.assert(typeof noticeObject.bookID === 'string', `cBPs addNotice10: 'bookID' parameter should be a string not a '${typeof noticeObject.bookID}'`);\r\n            console.assert(noticeObject.bookID.length === 3, `cBPs addNotice10: 'bookID' parameter should be three characters long not ${noticeObject.bookID.length}`);\r\n            console.assert(books.isValidBookID(noticeObject.bookID), `cBPs addNotice10: '${noticeObject.bookID}' is not a valid USFM book identifier`);\r\n        }\r\n        // console.assert(C !== undefined, \"cBPs addNotice10: 'C' parameter should be defined\");\r\n        if (noticeObject.C) console.assert(typeof noticeObject.C === 'string', `cBPs addNotice10: 'C' parameter should be a string not a '${typeof noticeObject.C}'`);\r\n        // console.assert(V !== undefined, \"cBPs addNotice10: 'V' parameter should be defined\");\r\n        if (noticeObject.V) console.assert(typeof noticeObject.V === 'string', `cBPs addNotice10: 'V' parameter should be a string not a '${typeof noticeObject.V}'`);\r\n        // console.assert(characterIndex !== undefined, \"cBPs addNotice10: 'characterIndex' parameter should be defined\");\r\n        if (noticeObject.characterIndex) console.assert(typeof noticeObject.characterIndex === 'number', `cBPs addNotice10: 'characterIndex' parameter should be a number not a '${typeof noticeObject.characterIndex}'`);\r\n        // console.assert(extract !== undefined, \"cBPs addNotice10: 'extract' parameter should be defined\");\r\n        if (noticeObject.extract) console.assert(typeof noticeObject.extract === 'string', `cBPs addNotice10: 'extract' parameter should be a string not a '${typeof noticeObject.extract}'`);\r\n        console.assert(noticeObject.location !== undefined, \"cBPs addNotice10: 'location' parameter should be defined\");\r\n        console.assert(typeof noticeObject.location === 'string', `cBPs addNotice10: 'location' parameter should be a string not a '${typeof noticeObject.location}'`);\r\n        console.assert(noticeObject.extra !== undefined, \"cBPs addNotice10: 'extra' parameter should be defined\");\r\n        console.assert(typeof noticeObject.extra === 'string', `cBPs addNotice10: 'extra' parameter should be a string not a '${typeof extra}'`);\r\n        checkBookPackagesResult.noticeList.push(noticeObject);\r\n    }\r\n\r\n\r\n    // Main code for checkBookPackages()\r\n    let checkedFileCount = 0, checkedFilenames = [], checkedFilenameExtensions = new Set(), totalCheckedSize = 0, checkedRepoNames = new Set();\r\n    for (const bookID of bookIDList) {\r\n        // console.log(`checkBookPackages bookID: ${bookID}`);\r\n\r\n        // const generalLocation = ` ${languageCode} ${bookID} book packages from ${username}`;\r\n        if (bookID !== 'OBS') {\r\n          // eslint-disable-next-line no-unused-vars\r\n            let bookNumberAndName; //, whichTestament;\r\n            try {\r\n                bookNumberAndName = books.usfmNumberName(bookID);\r\n                // whichTestament = books.testament(bookID); // returns 'old' or 'new'\r\n            } catch (CBPsError) {\r\n                addNotice10({priority:900, message:\"Bad parameter: should be given a valid book abbreviation\",\r\n                                extract:bookIDList, location:` (not '${bookIDList}')`});\r\n                return checkBookPackagesResult;\r\n            }\r\n            // console.log(`bookNumberAndName='${bookNumberAndName}' (${whichTestament} testament)`);\r\n        }\r\n\r\n        // We use the generalLocation here (does not include repo name)\r\n        //  so that we can adjust the returned strings ourselves\r\n        const cbpResultObject = await checkBookPackage(username, languageCode, bookID, setResultValue, checkingOptions);\r\n        // console.log(`checkBookPackage() returned ${cbpResultObject.successList.length} success message(s) and ${cbpResultObject.noticeList.length} notice(s)`);\r\n\r\n        // Concat is faster if we don't need to process each success message individually\r\n        checkBookPackagesResult.successList = checkBookPackagesResult.successList.concat(cbpResultObject.successList);\r\n        // Process results line by line,  appending the repoCode/bookID as an extra field as we go\r\n        // for (const successEntry of cbpResultObject.successList) {\r\n        //     // console.log(\"  ourCheckBookPackage:\", successEntry);\r\n        //     addSuccessMessage(successEntry);\r\n        // }\r\n\r\n        // Concat is faster if we don't need to process each notice individually\r\n        checkBookPackagesResult.noticeList = checkBookPackagesResult.noticeList.concat(cbpResultObject.noticeList);\r\n        // for (const noticeEntry of cbpResultObject.noticeList)\r\n        //     // noticeEntry is an array of eight fields: 1=priority, 2=bookID, 3=C, 4=V, 5=msg, 6=characterIndex, 7=extract, 8=location\r\n        //     // The extra value from checkBookPackage is the repo name\r\n        //     addNotice10({noticeEntry.priority, noticeEntry[1], noticeEntry[2], noticeEntry[3], noticeEntry[4], noticeEntry[5], noticeEntry[6], noticeEntry[7], noticeEntry[5]);\r\n\r\n        checkedFileCount += cbpResultObject.checkedFileCount;\r\n        checkedFilenames = [...checkedFilenames, ...cbpResultObject.checkedFilenames];\r\n        checkedFilenameExtensions = new Set([...checkedFilenameExtensions, ...cbpResultObject.checkedFilenameExtensions]);\r\n        totalCheckedSize += cbpResultObject.checkedFilesizes;\r\n        checkedRepoNames = new Set([...checkedRepoNames, ...cbpResultObject.checkedRepoNames]);\r\n\r\n        // addSuccessMessage(`${checkedFileCount.toLocaleString()}/ Checked ${bookID} book package`);\r\n    }\r\n\r\n    // Add some extra fields to our checkFileResult object\r\n    //  in case we need this information again later\r\n    checkBookPackagesResult.checkedFileCount = checkedFileCount;\r\n    checkBookPackagesResult.checkedFilenames = checkedFilenames;\r\n    checkBookPackagesResult.checkedFilenameExtensions = [...checkedFilenameExtensions]; // convert Set to Array\r\n    checkBookPackagesResult.checkedFilesizes = totalCheckedSize;\r\n    checkedRepoNames = [...checkedRepoNames]; // Convert set to Array\r\n    const index = checkedRepoNames.indexOf(`${username}/${languageCode}_obs`);\r\n    if (index !== -1) checkedRepoNames[index] = 'OBS'; // Looks tidier here\r\n    checkBookPackagesResult.checkedRepoNames = checkedRepoNames;\r\n    // checkBookPackagesResult.checkedOptions = checkingOptions; // This is done at the caller level\r\n\r\n    // console.log(\"checkBookPackages() is returning\", checkBookPackagesResult.successList.length.toLocaleString(), \"success message(s) and\", checkBookPackagesResult.noticeList.length.toLocaleString(), \"notice(s)\");\r\n    checkBookPackagesResult.elapsedSeconds = (new Date() - startTime) / 1000; // seconds\r\n    return checkBookPackagesResult;\r\n};\r\n// end of checkBookPackages()\r\n\r\nexport default checkBookPackages;\r\n","export * from './RepoCheck';\r\n","import React, { useState, useEffect } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { checkRepo } from '../../core';\r\nimport { processNoticesToErrorsWarnings, processNoticesToSevereMediumLow, processNoticesToSingleList } from '../notice-processing-functions';\r\nimport { RenderSuccessesErrorsWarnings, RenderSuccessesSevereMediumLow, RenderSuccessesWarningsGradient, RenderElapsedTime } from '../RenderProcessedResults';\r\nimport { ourParseInt } from '../../core/utilities';\r\n// import { consoleLogObject, displayPropertyNames } from '../../core/utilities';\r\n\r\n\r\n//const VALIDATOR_VERSION_STRING = '0.1.2';\r\n\r\n\r\nfunction RepoCheck(/*username, languageCode,*/ props) {\r\n    /*\r\n    Check an entire repository\r\n\r\n    Loads the zip file and the repo tree\r\n        and then checks all the individual files\r\n    */\r\n\r\n    // console.log(`I'm here in RepoCheck v${VALIDATOR_VERSION_STRING}`);\r\n    // consoleLogObject(\"props\", props);\r\n    // consoleLogObject(\"props.classes\", props.classes);\r\n\r\n    const username = props.username;\r\n    // console.log(`username='${username}'`);\r\n    const repoName = props.repoName;\r\n    // console.log(`repoName='${repoName}'`);\r\n    let branch = props.branch;\r\n    // console.log(`branch='${branch}'`);\r\n    if (branch === undefined) branch = 'master';\r\n\r\n    const languageCode = repoName.split('_', 1)[0];\r\n    // console.log(`languageCode='${languageCode}'`);\r\n\r\n    const checkingOptions = { // Uncomment any of these to test them\r\n        // 'extractLength': 25,\r\n    };\r\n    // Or this allows the parameters to be specified as a RepoCheck property\r\n    if (props.extractLength) checkingOptions.extractLength = ourParseInt(props.extractLength);\r\n\r\n    const [result, setResultValue] = useState(\"Waiting-checkRepo\");\r\n    useEffect(() => {\r\n        // console.log(\"RepoCheck.useEffect() called with \", JSON.stringify(props));\r\n\r\n        // Use an IIFE (Immediately Invoked Function Expression)\r\n        //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174\r\n        (async () => {\r\n            // console.log(\"Started RepoCheck.unnamedFunction()\");\r\n\r\n            // Display our \"waiting\" message\r\n            setResultValue(<p style={{ color: 'magenta' }}>Checking <b>{repoName}</b> repo…</p>);\r\n\r\n            // Put all this in a try/catch block coz otherwise it's difficult to debug/view errors\r\n            try {\r\n                let rawCRResults = {};\r\n                try {\r\n                    rawCRResults = await checkRepo(username, repoName, branch, \"\", setResultValue, checkingOptions);\r\n                } catch (checkRepoError) {\r\n                    rawCRResults = { successList: [], noticeList: [] };\r\n                    rawCRResults.noticeList.push({priority:999, message:\"checkRepo function FAILED\", repoName, extract:checkRepoError, location:repoName});\r\n                }\r\n                // console.log(\"checkRepo() returned\", typeof rawCRResults); //, JSON.stringify(rawCRResults));\r\n\r\n                // Add some extra fields to our rawCRResults object in case we need this information again later\r\n                rawCRResults.checkType = 'Repo';\r\n                rawCRResults.username = username;\r\n                rawCRResults.languageCode = languageCode;\r\n                rawCRResults.checkedOptions = checkingOptions;\r\n\r\n                // console.log(\"Here with RC rawCRResults\", typeof rawCRResults);\r\n                // Now do our final handling of the result -- we have some options available\r\n                let processOptions = { // Uncomment any of these to test them\r\n                    // 'maximumSimilarMessages': 4, // default is 3 -- 0 means don't suppress\r\n                    // 'errorPriorityLevel': 800, // default is 700\r\n                    // 'cutoffPriorityLevel': 100, // default is 0\r\n                    // 'sortBy': 'ByPriority', // default is 'AsFound'\r\n                    // 'ignorePriorityNumberList': [123, 202], // default is []\r\n                };\r\n                // Or this allows the parameters to be specified as a RepoCheck property\r\n                if (props.maximumSimilarMessages) processOptions.maximumSimilarMessages = ourParseInt(props.maximumSimilarMessages);\r\n                if (props.errorPriorityLevel) processOptions.errorPriorityLevel = ourParseInt(props.errorPriorityLevel);\r\n                if (props.cutoffPriorityLevel) processOptions.cutoffPriorityLevel = ourParseInt(props.cutoffPriorityLevel);\r\n                if (props.sortBy) processOptions.sortBy = props.sortBy;\r\n                // if (props.ignorePriorityNumberList) processOptions.ignorePriorityNumberList = props.ignorePriorityNumberList;\r\n\r\n                let displayType = 'ErrorsWarnings'; // default\r\n                if (props.displayType) displayType = props.displayType;\r\n\r\n                function renderSummary(processedResults) {\r\n                    return (<div>\r\n                        <p>Checked <b>{username} {repoName}</b> (from <i>{branch === undefined ? 'DEFAULT' : branch}</i> branch)</p>\r\n                        <p>&nbsp;&nbsp;&nbsp;&nbsp;Successfully checked {processedResults.checkedFileCount.toLocaleString()} file{processedResults.checkedFileCount === 1 ? '' : 's'} from {repoName}: {processedResults.checkedFilenames.join(', ')}\r\n                            <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;including {processedResults.checkedFilenameExtensions.length} file type{processedResults.checkedFilenameExtensions.size === 1 ? '' : 's'}: {processedResults.checkedFilenameExtensions.join(', ')}.</p>\r\n                        <p>&nbsp;&nbsp;&nbsp;&nbsp;Finished in <RenderElapsedTime elapsedSeconds={processedResults.elapsedSeconds} /> with {rawCRResults.noticeList.length===0?'no':rawCRResults.noticeList.length} notice{rawCRResults.noticeList.length===1?'':'s'}.</p>\r\n                        {/* <RenderRawResults results={rawCRResults} /> */}\r\n                    </div>);\r\n                }\r\n\r\n                if (displayType === 'ErrorsWarnings') {\r\n                    const processedResults = processNoticesToErrorsWarnings(rawCRResults, processOptions);\r\n                    // displayPropertyNames(\"RC processedResults\", processedResults);\r\n                    //             console.log(`RepoCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n                    //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()}`, \"numSuppressedErrors=\" + processedResults.numSuppressedErrors.toLocaleString(), \"numSuppressedWarnings=\" + processedResults.numSuppressedWarnings.toLocaleString());\r\n\r\n                    // console.log(\"Here now in rendering bit!\");\r\n\r\n                    if (processedResults.errorList.length || processedResults.warningList.length)\r\n                        setResultValue(<>\r\n                            <div>{renderSummary(processedResults)}\r\n                                {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n                            <RenderSuccessesErrorsWarnings results={processedResults} />\r\n                        </>);\r\n                    else // no errors or warnings\r\n                        setResultValue(<>\r\n                            <div>{renderSummary(processedResults)}\r\n                                {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n                            <RenderSuccessesErrorsWarnings results={processedResults} />\r\n                        </>);\r\n                } else if (displayType === 'SevereMediumLow') {\r\n                    const processedResults = processNoticesToSevereMediumLow(rawCRResults, processOptions);\r\n                    //             console.log(`RepoCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n                    //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()}`, \"numSuppressedErrors=\" + processedResults.numSuppressedErrors.toLocaleString(), \"numSuppressedWarnings=\" + processedResults.numSuppressedWarnings.toLocaleString());\r\n\r\n                    if (processedResults.severeList.length || processedResults.mediumList.length || processedResults.lowList.length)\r\n                        setResultValue(<>\r\n                            <div>{renderSummary(processedResults)}\r\n                                {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n                            <RenderSuccessesSevereMediumLow results={processedResults} />\r\n                        </>);\r\n                    else // no severe, medium, or low notices\r\n                        setResultValue(<>\r\n                            <div>{renderSummary(processedResults)}\r\n                                {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n                            <RenderSuccessesSevereMediumLow results={processedResults} />\r\n                        </>);\r\n                } else if (displayType === 'SingleList') {\r\n                    const processedResults = processNoticesToSingleList(rawCRResults, processOptions);\r\n                    //             console.log(`RepoCheck got back processedResults with ${processedResults.successList.length.toLocaleString()} success message(s), ${processedResults.errorList.length.toLocaleString()} error(s) and ${processedResults.warningList.length.toLocaleString()} warning(s)\r\n                    //   numIgnoredNotices=${processedResults.numIgnoredNotices.toLocaleString()}`, \"numSuppressedErrors=\" + processedResults.numSuppressedErrors.toLocaleString(), \"numSuppressedWarnings=\" + processedResults.numSuppressedWarnings.toLocaleString());\r\n\r\n                    if (processedResults.warningList.length)\r\n                        setResultValue(<>\r\n                            <div>{renderSummary(processedResults)}\r\n                                {processedResults.numIgnoredNotices ? ` (but ${processedResults.numIgnoredNotices.toLocaleString()} ignored errors/warnings)` : \"\"}</div>\r\n                            <RenderSuccessesWarningsGradient results={processedResults} />\r\n                        </>);\r\n                    else // no warnings\r\n                        setResultValue(<>\r\n                            <div>{renderSummary(processedResults)}\r\n                                {processedResults.numIgnoredNotices ? ` (with a total of ${processedResults.numIgnoredNotices.toLocaleString()} notices ignored)` : \"\"}</div>\r\n                            <RenderSuccessesWarningsGradient results={processedResults} />\r\n                        </>);\r\n                } else setResultValue(<b style={{ color: 'red' }}>Invalid displayType='{displayType}'</b>)\r\n\r\n                // console.log(\"Finished rendering bit.\");\r\n            } catch (rcError) {\r\n                console.log(`RepoCheck main code block got error: ${rcError.message}`);\r\n                setResultValue(<>\r\n                    <p style={{ color: 'Red' }}>RepoCheck main code block got error: <b>{rcError.message}</b></p>\r\n                </>);\r\n            }\r\n        })(); // end of async part in unnamedFunction\r\n    // Doesn't work if we add this to next line: languageCode,username,repoName,branch,checkingOptions,props\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []); // end of useEffect part\r\n\r\n    // {/* <div className={classes.root}> */}\r\n    return (\r\n        <div className=\"Fred\">\r\n            {result}\r\n        </div>\r\n    );\r\n}\r\n\r\n// RepoCheck.propTypes = {\r\n//   /** @ignore */\r\n//   username: PropTypes.object.isRequired,\r\n//   /** @ignore */\r\n//   languageCode: PropTypes.object.isRequired,\r\n//   props: PropTypes.object,\r\n// };\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n    },\r\n});\r\n\r\nexport default withStyles(styles)(RepoCheck);\r\n","module.exports = __webpack_public_path__ + \"static/media/SILEOTSR.a5284649.ttf\";","import data from './books.json';\r\n\r\nexport interface bookDataIF {\r\n  \"id\": string;\r\n  \"title\": string;\r\n  \"usfm\": string;\r\n  \"testament\": string;\r\n  \"verseCount\": number;\r\n  \"chapters\": number[];\r\n}\r\n\r\ninterface bpStateIF { [x: string]: boolean[]; };\r\n\r\nexport const chaptersInBook = (bookId: string) => {\r\n    let chapters: number[];\r\n    chapters = bookData(bookId).chapters;\r\n    if ( chapters === undefined ) {\r\n      throw new Error(\"Error: chaptersInBook(): Invalid bookId\");\r\n    }\r\n    return chapters;\r\n};\r\n\r\nexport const versesInChapter = (bookId: string, chapter: number) => {\r\n  const verses = chaptersInBook(bookId)[chapter - 1];\r\n  return verses;\r\n};\r\n\r\nexport const bookData = (bookId: string) => {\r\n  const _bookData: bookDataIF = data.filter(row => row.id === bookId)[0];\r\n  return _bookData;\r\n};\r\n\r\nexport const testament = (bookId: string) => {\r\n  const _testament = bookData(bookId).testament;\r\n  return _testament;\r\n};\r\n\r\nexport const newTestament = () => {\r\n  let list: string[] = [];\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].testament === \"new\" ) {\r\n      list.push( data[i].title )\r\n    }\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const oldTestament = () => {\r\n  let list: string[] = [];\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].testament === \"old\" ) {\r\n      list.push( data[i].title )\r\n    }\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const bookDataTitles = () => {\r\n  let list: string[] = [];\r\n  for (let i=0; i < data.length; i++) {\r\n      list.push( data[i].title )\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const titlesToBoolean = () => {\r\n  let ob: bpStateIF = {};\r\n  let list = bookDataTitles();\r\n  list.forEach((v,k) => {ob[v]= [false,false]});\r\n  return ob;\r\n}\r\n\r\nexport const bookIdByTitle = (title: string) => {\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].title === title ) {\r\n      return data[i].id;\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nexport const bookTitleById = (id: string) => {\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].id === id ) {\r\n      return data[i].title;\r\n    }\r\n  }\r\n  return \"\";\r\n}","// utilities\r\nimport * as books from 'uw-content-validation';\r\n\r\n// function to convert an array to an object\r\n// with keys being 0..n\r\nexport const array_to_obj = ( (ar: any) => {\r\n    const ob = {};\r\n    Object.assign(ob,ar);\r\n    return ob;\r\n});\r\n\r\n// function to convert map to object\r\nexport const map_to_obj = ( (mp: any[]) => {\r\n    const ob: any = {};\r\n    mp.forEach((v: any,k: any) => {ob[k]=v});\r\n    return ob;\r\n});\r\n\r\n// function to convert object to a map\r\nexport const obj_to_map = ( (ob: { [x: string]: any; }) => {\r\n    const mp = new Map();\r\n    Object.keys ( ob ).forEach (k => { mp.set(k, ob[k]) });\r\n    return mp;\r\n});\r\n\r\n\r\ninterface ObjectLiteral {\r\n    [key: string]: any;\r\n}\r\n\r\n/**\r\n * create link to repo\r\n * @param repo\r\n * @param username\r\n * @param languageCode\r\n * @param bookID\r\n * @param lineNum\r\n * @param branch\r\n */\r\nexport const getLink = (repo: string, username: string, languageCode: string, bookID: string, lineNum: string, branch = `master`) => {\r\n    let repoName = `${languageCode.toLowerCase()}_${repo.toLowerCase()}`;\r\n    let extension = 'usfm';\r\n    let view = 'src';\r\n    let namePrefix = '';\r\n    let repoUC = repo.toUpperCase();\r\n    if (repoUC === 'UHB') {\r\n        repoName = 'hbo_uhb';\r\n    }\r\n    if (repoUC === 'UGNT') {\r\n        repoName = 'el-x-koine_ugnt';\r\n    }\r\n    if (repoUC === 'TN') {\r\n        view = 'blame';\r\n        extension = 'tsv';\r\n        namePrefix = `${repoName}_`;\r\n    }\r\n    if (['TN', 'UHB', 'UGNT', 'ULT', 'UST'].includes(repoUC)) {\r\n        let bookNumberAndName;\r\n        try {\r\n            bookNumberAndName = books.usfmNumberName(bookID).toUpperCase();\r\n            let link = `https://git.door43.org/${username}/${repoName}/${view}/branch/${branch}/${namePrefix}${bookNumberAndName}.${extension}`;\r\n            if (lineNum) {\r\n                link += `#L${lineNum}`;\r\n            }\r\n            return link;\r\n            // const anchor = `<a href=\"${link}\" target=\"_blank\">${lineNum}</a>`;\r\n            // return anchor;\r\n        } catch (e) {}\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * remove columns that don't have any data\r\n * @param rows\r\n * @param columns\r\n */\r\nexport const trimColumns = (rows: any[], columns: any[]) => {\r\n    const newColumns = [];\r\n    for (let column of columns) {\r\n        const { field, title } = column;\r\n        let hasData = false;\r\n\r\n        for (let row of rows) {\r\n            const cellData = row[field]\r\n            if (cellData) {\r\n                hasData = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (hasData) {\r\n            newColumns.push(column);\r\n        } else {\r\n            console.log(`Removing column \"${title}\" because no data found`);\r\n        }\r\n    }\r\n    return newColumns;\r\n}\r\n\r\n/**\r\n * converts strings to numbers\r\n * @param value\r\n */\r\nexport const stringToNumber = (value: any) => {\r\n    if (typeof value === 'string') {\r\n        const num = parseInt(value, 10);\r\n        if (!isNaN(num)) {\r\n            return num;\r\n        }\r\n    }\r\n    return NaN;\r\n}\r\n\r\n/**\r\n * string compare that attempts to do numerical sorting fist and then will sort by string\r\n * @param a\r\n * @param b\r\n */\r\nexport const somewhatNumericalSort = (a: any, b: any) => {\r\n    const aNum = stringToNumber(a);\r\n    const bNum = stringToNumber(b);\r\n    const aStr = a || \"\";\r\n    const bStr = b || \"\";\r\n\r\n    if (!isNaN(aNum) && !isNaN(bNum)) { // if both are numbers then do numerical compare\r\n        return aNum - bNum;\r\n    }\r\n\r\n    if (isNaN(aNum) && isNaN(bNum)) { // if both are not numbers then do a string compare\r\n        return aStr > bStr ? 1 : ( aStr === bStr ? 0 : -1);\r\n    }\r\n\r\n    if (isNaN(aNum)) {\r\n        return -1;  // non-numeric strings less than numbers\r\n    }\r\n    return 1;\r\n}\r\n\r\n/**\r\n * sort by chapter first and then by verse if same chapter\r\n * @param a\r\n * @param b\r\n */\r\nexport const sortChapterVerse = (a: any, b: any) => {\r\n    let results = somewhatNumericalSort(a.C, b.C);\r\n    if (results === 0) { // if chapters are same, then sort on verse\r\n        results = somewhatNumericalSort(a.V, b.V);\r\n    }\r\n    return results;\r\n}\r\n\r\n/* Sample of Warnings List:\r\n    C: \"1\"\r\n    V: \"1\"\r\n    bookID: \"2PE\"\r\n    characterIndex: undefined\r\n    extract: undefined\r\n    lineNumber: 4\r\n    location: \" with ID 'n1di' en 2pe book package from unfoldingword\"\r\n    message: \"TN Missing OrigQuote field\"\r\n    priority: 276\r\n*/\r\n// function to convert word frequency map\r\n// to an object suitable for MaterialTable\r\nexport const notices_to_mt = ( ob: { [x: string]: any; }, username: string, languageCode: string, bookID: string, renderLink: any, renderWithUnicodeLink: any) => {\r\n    let mt: ObjectLiteral = {};\r\n    mt.title = \"Validation Notices\";\r\n    mt.columns = [\r\n        { title: 'Repo', field: 'extra' },\r\n        { title: 'Pri', field: 'priority' },\r\n        {\r\n            title: 'Ch',\r\n            field: 'C',\r\n            customSort: (a: any, b: any) => sortChapterVerse(a, b)\r\n        },\r\n        {\r\n            title: 'Vs',\r\n            field: 'V',\r\n            customSort: (a: any, b: any) => somewhatNumericalSort(a.V, b.V)\r\n        },\r\n        {\r\n            title: 'Line',\r\n            field: 'lineNumber',\r\n            render: (rowData: any) => (renderLink(rowData.link, rowData.lineNumber))\r\n        },\r\n        { title: 'Row ID', field: 'rowID' },\r\n        { title: 'Field Name', field: 'fieldName' },\r\n        { title: 'Details', field: 'details' },\r\n        { title: 'Char Pos', field: 'charPos' },\r\n        {\r\n            title: 'Excerpt',\r\n            field: 'excerpt',\r\n            cellStyle: {\r\n                fontFamily: \"Ezra, Roboto, Helvetica, Arial, sans-serif\"\r\n            },\r\n            render: (rowData: any) => (renderWithUnicodeLink(rowData.excerpt))\r\n        },\r\n        {\r\n            title: 'Message',\r\n            field: 'message',\r\n            cellStyle: {\r\n                fontFamily: \"Ezra, Roboto, Helvetica, Arial, sans-serif\",\r\n                width: `400px`\r\n            },\r\n        },\r\n        { title: 'Location', field: 'location' },\r\n    ];\r\n    mt.data = [];\r\n    Object.keys(ob).forEach ( key => {\r\n        const rowData = ob[key];\r\n        let _location = rowData.location;\r\n        _location = _location.replace(/en ... book package from unfoldingword/, '' );\r\n        let _link = getLink(rowData.extra, username, languageCode, bookID, rowData.lineNumber);\r\n        mt.data.push({\r\n            extra: rowData.extra,\r\n            priority: rowData.priority,\r\n            C: rowData.C,\r\n            V: rowData.V,\r\n            lineNumber: rowData.lineNumber,\r\n            rowID: rowData.rowID,\r\n            charPos: rowData.characterIndex,\r\n            excerpt: rowData.extract,\r\n            link: _link,\r\n            location: _location,\r\n            message: rowData.message,\r\n            fieldName: rowData.fieldName,\r\n            details: rowData.details,\r\n        })\r\n    })\r\n\r\n    // @ts-ignore\r\n    mt.data = mt.data.sort((a: object, b: object) => (a.priority > b.priority ? -1 : 1) ); // sort highest priority to the top of the table\r\n\r\n    mt.columns = trimColumns(mt.data, mt.columns);\r\n\r\n    mt.options = {\r\n        sorting: true,\r\n        // padding: 'dense',\r\n        exportButton: true,\r\n        exportAllData: true,\r\n        // tableLayout: 'auto',\r\n        columnsButton: true,\r\n        filtering: true,\r\n        pageSize: 10,\r\n    };\r\n\r\n    return mt;\r\n};\r\n\r\n/*\r\n// function to convert an array of words to\r\n// an object suitable for MaterialTable\r\nexport const aw_to_mt = ( ar => {\r\n    // first convert array to object\r\n    const ob = array_to_obj(ar);\r\n    const mt = {};\r\n    mt.title = \"All Words in Text Order\";\r\n    mt.columns = [\r\n        { title: 'Order', field: 'order' , type: 'numeric'},\r\n        { title: 'Word', field: 'word' },\r\n    ];\r\n    mt.data = [];\r\n    Object.keys(ob).forEach ( n => {\r\n        mt.data.push({ order: n, word: ob[n] })\r\n    });\r\n\r\n    mt.options = { sorting: true };\r\n\r\n    return mt;\r\n});\r\n*/","import React from 'react';\r\nimport { forwardRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nimport MaterialTable from 'material-table';\r\nimport * as util from './core/utilities.ts';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\n/**\r\n * creates a link to external URL\r\n * @param link\r\n * @param content\r\n * @return {JSX.Element|string}\r\n */\r\nexport const renderLink = (link, content) => {\r\n  if (link) {\r\n    return <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">{content}</a>\r\n  } else if (content) {\r\n    return `${content}`\r\n  }\r\n  return \"\";\r\n}\r\n\r\n/**\r\n * replaces unicode references with link to webpage describing the character\r\n * @param content\r\n * @return {JSX.Element|string}\r\n */\r\nexport const renderWithUnicodeLink = (content) => {\r\n  if ( !content ) {\r\n    return \"\";\r\n  }\r\n  // find unicode refs that look like '( =D8288/H2060)'\r\n  const getUnicodeRegEx = new RegExp(/=D(\\d+)\\/H(\\w+)\\)/, 'g');\r\n  let match;\r\n  let lastPos = 0;\r\n  const output = [];\r\n  // eslint-disable-next-line no-cond-assign\r\n  while (match = getUnicodeRegEx.exec(content)) {\r\n    if (match.index > 0) {\r\n      output.push(content.substring(lastPos, match.index));\r\n    }\r\n    let matchLen = match[0].length;\r\n    const unicode = match[2];\r\n    output.push (\r\n      <a href={`http://www.fileformat.info/info/unicode/char/${unicode}/index.htm`} target=\"_blank\" rel=\"noopener noreferrer\">U+{unicode}</a>\r\n    )\r\n    lastPos = match.index + matchLen - 1; // update start position\r\n  }\r\n  if (lastPos < content.length) {\r\n    output.push(content.substring(lastPos, content.length));\r\n  }\r\n\r\n  // assemble all the strings and anchors into one segment\r\n  return <> {output} </>\r\n};\r\n\r\nfunction ValidationWarnings({\r\n    results,\r\n    username,\r\n    languageCode,\r\n    bookID,\r\n  }) {\r\n\r\n    let mt = util.notices_to_mt(results, username, languageCode, bookID, renderLink, renderWithUnicodeLink);\r\n    return (\r\n      <Paper>\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          title={mt.title}\r\n          columns={mt.columns}\r\n          data={mt.data}\r\n          options={mt.options}\r\n        />\r\n      </Paper>\r\n    );\r\n  };\r\n\r\n  ValidationWarnings.propTypes = {\r\n    /** @ignore */\r\n    results: PropTypes.array.isRequired,\r\n  };\r\n\r\n  const styles = theme => ({\r\n    root: {\r\n    },\r\n  });\r\n\r\n  export default withStyles(styles)(ValidationWarnings);\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport {checkBookPackage} from 'uw-content-validation';\r\nimport ValidationNotices from './ValidationNotices';\r\n\r\nfunction BookPackageContentValidator({bookID, username, language_code}) {\r\n    //const username = 'unfoldingword';\r\n    //const language_code = 'en';\r\n    //const branch = 'master';\r\n    // Check a single Bible book across many repositories\r\n    const [result, setResultValue] = useState(\"Waiting-CheckBookPackage\");\r\n\r\n    let checkingOptions = { // Uncomment any of these to test them\r\n        // 'extractLength': 25,\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Use an IIFE (Immediately Invoked Function Expression)\r\n        //  e.g., see https://medium.com/javascript-in-plain-english/https-medium-com-javascript-in-plain-english-stop-feeling-iffy-about-using-an-iife-7b0292aba174\r\n        (async () => {\r\n\r\n            // Display our \"waiting\" message\r\n            setResultValue(<p style={{ color: 'red' }}>Waiting for check results for {username} {language_code} <b>{bookID}</b> book package…</p>);\r\n\r\n            const rawCBPResults = await checkBookPackage(username, language_code, bookID, setResultValue, checkingOptions);\r\n            //console.log(\"rawCBPResults=\", rawCBPResults);\r\n            // Add some extra fields to our rawCBPResults object in case we need this information again later\r\n            rawCBPResults.checkType = 'BookPackage';\r\n            rawCBPResults.username = username;\r\n            rawCBPResults.language_code = language_code;\r\n            rawCBPResults.bookID = bookID;\r\n            rawCBPResults.checkedOptions = checkingOptions;\r\n\r\n            function renderSummary(rawCBPResults) {\r\n                return (\r\n                    <>\r\n                    <Typography>\r\n                        Successfully checked&nbsp;\r\n                        {rawCBPResults.checkedFileCount.toLocaleString()}&nbsp;\r\n                        files in&nbsp;\r\n                        {rawCBPResults.elapsedSeconds}&nbsp;\r\n                        seconds\r\n                    </Typography>\r\n                    <Typography>\r\n                        There were {rawCBPResults.noticeList.length} notices.\r\n                    </Typography>\r\n                </>\r\n            );\r\n            }\r\n\r\n            setResultValue(<>\r\n                {renderSummary(rawCBPResults)}\r\n                {rawCBPResults.noticeList.length ?\r\n                  <ValidationNotices\r\n                    results={rawCBPResults.noticeList}\r\n                    username={username}\r\n                    languageCode={language_code}\r\n                    bookID={bookID}\r\n                  />\r\n                : <br/> }\r\n            </>);\r\n\r\n        })(); // end of async part in unnamedFunction\r\n        // eslint-disable-next-line\r\n    }, []); // end of useEffect part\r\n\r\n    // {/* <div className={classes.root}> */}\r\n    return (\r\n        <div>\r\n        {result}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BookPackageContentValidator;\r\n","import React from 'react';\nimport clsx from 'clsx';\n//import { withStyles, makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n//import CircularProgress from '@material-ui/core/CircularProgress';\n//import Popover from '@material-ui/core/Popover';\n\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n//import Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\n\n//import { green } from '@material-ui/core/colors';\nimport * as books from '../src/core/books';\nimport { Container, CssBaseline, Grid, RadioGroup, Radio } from '@material-ui/core';\n\nimport BookPackageContentValidator from './BookPackageContentValidator';\nimport {clearCacheAndPreloadRepos} from 'uw-content-validation';\n\nasync function doInitialization() {\n  const username = 'unfoldingword';\n  const language_code = 'en';\n  const branch = 'master'\n  const success = await clearCacheAndPreloadRepos(username, language_code, [], branch);\n  if (!success) {\n      console.log(`Failed to pre-load all repos`)\n  }      \n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      flexGrow: 1,\n      display: 'flex',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    appBar: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: theme.spacing(3),\n    },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n    alignItemsAndJustifyContent: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },  \n    offset: {...theme.mixins.toolbar},\n  }),\n);\n/*\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n*/\ninterface bpStateIF { [x: string]: boolean[]; };\n\nfunction joinBookIds(state: bpStateIF ): string[] {\n  const x = Object.keys(state);\n  let y: string[] = [];\n  for (let i=0; i<x.length; i++) {\n    if ( state[x[i]][0] ) {\n      y.push(books.bookIdByTitle(x[i]));\n    }\n  }\n  //return y.join();\n  return y;\n}\n\n    \nfunction getSteps() {\n  return ['Select Books', 'Select Organization and Language', 'Content Validation Details'];\n}\n\nfunction getStepContent(step: number) {\n  switch (step) {\n    case 0:\n      return 'Select books, then click Next to generate book package details';\n    case 1:\n      return 'Select Organization and Language';\n    case 2:\n      return 'Content Validation Results';\n    default:\n      return 'Unknown step';\n  }\n}\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nlet queryProcessedOnce = false;\nfunction useQuery() {\n  let search = window.location.search;\n  //console.log(\"url=\",window.location.origin,window.location.pathname)\n  return new URLSearchParams(search);\n}\n\nexport default function App() {\n  const [state, setState] = React.useState({ ...books.titlesToBoolean() }); \n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set<number>());\n  const [org, setOrg]   = React.useState('unfoldingword');\n  const [lang, setLang] = React.useState('en');\n\n  /* ----------------------------------------------------------\n      Stepper\n  */\n  const steps = getSteps();\n\n  const isStepOptional = (step: number) => {\n    return false;\n  };\n\n  const isStepSkipped = (step: number) => {\n    return skipped.has(step);\n  };\n\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(prevSkipped => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  let query = useQuery();\n  if ( activeStep === 0 && queryProcessedOnce === false ) {\n    doInitialization();\n    queryProcessedOnce = true;\n    let bks   = query.get(\"books\");\n    if ( bks !== null ) {\n      // user has launched the app with URL query parameters\n      let barrayIds = bks.split(',');\n      let barrayTitles: string[] = [];\n      for ( let i=0; i < barrayIds.length; i++ ) {\n        let x = books.bookTitleById(barrayIds[i]);\n        if ( x === \"\" ) {\n          alert(\"Invalid Book Id:\"+barrayIds[i]);\n          break;\n        }\n        barrayTitles.push(x);\n      }\n      for( let i=0; i < barrayTitles.length; i++) {\n        let name = barrayTitles[i];\n        console.log(\"name:\",name)\n        // set the state variables\n        state[name][0] = true;\n        state[name][1] = false;\n        let b: boolean[] = [];\n        b[0] = true;\n        b[1] = false;  \n      }\n      handleNext();\n    }\n  }\n\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  /* ----------------------------------------------------------\n      Menu drawer\n  */\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleSelectNoneOt = () => {\n    let states = books.oldTestament();\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = false;\n      state[states[i]][1] = false;\n      let name = states[i];\n      let b: boolean[] = [];\n      b[0] = false;\n      b[1] = false;  \n      setState({ ...state, [name]: b });\n    }\n  };\n\n  const handleSelectAllOt = () => {\n    let states = books.oldTestament();\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = true;\n      state[states[i]][1] = false;\n      let name = states[i];\n      let b: boolean[] = [];\n      b[0] = true;\n      b[1] = false;  \n      setState({ ...state, [name]: b });\n    }\n  };\n\n  const handleSelectNoneNt = () => {\n    let states = books.newTestament();\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = false;\n      state[states[i]][1] = false;\n      let name = states[i];\n      let b: boolean[] = [];\n      b[0] = false;\n      b[1] = false;  \n      setState({ ...state, [name]: b });\n    }\n  };\n\n  const handleSelectAllNt = () => {\n    let states = books.newTestament();\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = true;\n      state[states[i]][1] = false;\n      let name = states[i];\n      let b: boolean[] = [];\n      b[0] = true;\n      b[1] = false;  \n      setState({ ...state, [name]: b });\n    }\n  };\n\n  \n  /* ----------------------------------------------------------\n      Form/checkbox stuff \n  */\n  // these are for the initial book seletion\n  const handleChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    let b: boolean[] = [];\n    b[0] = event.target.checked;\n    b[1] = false;\n    setState({ ...state, [name]: b });\n  };\n\n  /* as of 2020-09-21:\n  The languages/orgs are:\n    Russian (RU)/ru_gl\n    Hindi (HI)/translationCore-Create-BCS\n    Kannada (KN)/translationCore-Create-BCS\n    Latin-American Spanish (ES-419)/Es-419_gl\n*/\n  const handleOrgLangChange = () => (event: React.ChangeEvent<HTMLInputElement>) => {\n    let val = (event.target as HTMLInputElement).value;\n    let org  = 'unfoldingword';\n    let lang = 'en';\n    if ( val === 'ru' ) {\n      org  = 'ru_gl';\n      lang = 'ru';\n    } else if ( val === 'hi' ) {\n      org  = 'translationCore-Create-BCS';\n      lang = 'hi';\n    } else if ( val === 'kn' ) {\n      org  = 'translationCore-Create-BCS';\n      lang = 'kn';\n    } else if ( val === 'es-419' ) {\n      org = 'Es-419_gl';\n      lang = 'es-419';\n    }\n    setOrg(org);\n    setLang(lang);\n  };\n  \n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" \n          className={clsx(classes.appBar, {[classes.appBarShift]: open })}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Book Package Content Validation\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n          <Typography>Nothing here to see!</Typography>\n        <Divider />\n      </Drawer> \n      <Paper>\n        <Typography> <br/> <br/> </Typography>\n        <Stepper activeStep={activeStep}>\n          {steps.map((label, index) => {\n            const stepProps: { completed?: boolean } = {};\n            const labelProps: { optional?: React.ReactNode } = {};\n            if (isStepOptional(index)) {\n              labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n            }\n            if (isStepSkipped(index)) {\n              stepProps.completed = false;\n            }\n            return (\n              <Step key={label} {...stepProps}>\n                <StepLabel {...labelProps}>{label}</StepLabel>\n              </Step>\n            );\n          })}\n        </Stepper>\n        <Container>\n          <div className={classes.alignItemsAndJustifyContent}>\n          <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n          </div>\n\n          <div className={classes.alignItemsAndJustifyContent}>\n            <Button disabled={activeStep === 0} onClick={handleBack} color=\"primary\" variant=\"contained\" className={classes.button}>\n              Back\n            </Button>\n\n            {isStepOptional(activeStep) && (\n              <Button variant=\"contained\" color=\"primary\" onClick={handleSkip} className={classes.button}>\n                Skip\n              </Button>\n            )}\n\n            <Button disabled={activeStep === 2} variant=\"contained\" color=\"primary\" onClick={handleNext} className={classes.button}>\n              Next\n            </Button>\n\n          </div>\n\n          <div className={classes.alignItemsAndJustifyContent}>\n            {(activeStep === 0) && (\n              <Grid container spacing={3}>\n                <Grid item xs={6}>\n                  <Paper>\n                    <Typography> <br/> </Typography>\n                    <div>\n                    <Button onClick={handleSelectAllOt} color=\"primary\" variant=\"contained\" className={classes.button}>\n                      Select All\n                    </Button>\n                    <Button onClick={handleSelectNoneOt} color=\"primary\" variant=\"contained\" className={classes.button}>\n                      Select None\n                    </Button>\n                    </div>\n                    <FormControl required component=\"fieldset\" className={classes.formControl}>\n                    <FormLabel component=\"legend\">Old Testament</FormLabel>\n                    <FormGroup>\n                      {books.oldTestament().map(t => \n                        <FormControlLabel\n                          control={<Checkbox checked={state[t][0]} onChange={handleChange(t)} value={t} />}\n                          label={t} key={t}\n                        />\n                      )}                \n                    </FormGroup>\n                    <FormHelperText />\n                    </FormControl>\n                  </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                  <Paper>\n                    <Typography> <br/> </Typography>\n                    <div>\n                    <Button onClick={handleSelectAllNt} color=\"primary\" variant=\"contained\" className={classes.button}>\n                      Select All\n                    </Button>\n                    <Button onClick={handleSelectNoneNt} color=\"primary\" variant=\"contained\" className={classes.button}>\n                      Select None\n                    </Button>\n                    </div>\n\n                    <FormControl required component=\"fieldset\" className={classes.formControl}>\n                    <FormLabel component=\"legend\">New Testament</FormLabel>\n                    <FormGroup>\n                      {books.newTestament().map(t => \n                        <FormControlLabel\n                          control={<Checkbox checked={state[t][0]} onChange={handleChange(t)} value={t} />}\n                          label={t} key={t}\n                        />\n                      )}                \n                    </FormGroup>\n                    <FormHelperText />\n                    </FormControl>\n                  </Paper>\n                </Grid>\n              </Grid>\n            )}\n\n\n            {(activeStep === 1) && (\n              <>\n              <div>\n                <Paper>\n                  <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">Languages</FormLabel>\n                    <RadioGroup aria-label=\"orgLang\" name=\"orgLang\" value={lang} onChange={handleOrgLangChange()}>\n                      <FormControlLabel value=\"en\" control={<Radio />} label=\"English (unfoldingWord)\" />\n                      <FormControlLabel value=\"ru\" control={<Radio />} label=\"Russian (ru_gl)\" />\n                      <FormControlLabel value=\"hi\" control={<Radio />} label=\"Hindi (translationCore-Create-BCS)\" />\n                      <FormControlLabel value=\"kn\" control={<Radio />} label=\"Kannada (translationCore-Create-BCS)\" />\n                      <FormControlLabel value=\"es-419\" control={<Radio />} label=\"Latin-American Spanish (Es-419_gl)\" />\n                    </RadioGroup>\n                  </FormControl>\n                </Paper>\n              </div>\n              </>\n            )}\n\n            {(activeStep === 2) && (\n              <>\n              <div>\n                <Paper>\n                {\n                  joinBookIds(state).map(id => \n                    <div>\n                    <Typography variant=\"h6\" >Book Package for {books.bookTitleById(id)} </Typography>\n                    <BookPackageContentValidator bookID={id} key={id} username={org} language_code={lang} />\n                    </div>\n                  )\n                }\n                </Paper>\n              </div>\n              </>\n            )}\n\n\n          </div>\n        </Container>\n      </Paper>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/SILEOTSR.ttf';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const data = { \"gen\": {\"id\": \"gen\", \"title\": \"Genesis\", \"usfm\": \"01-GEN\", \"testament\": \"old\", \"verseCount\": 1533, \"chapters\": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 55, 32, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 33, 26]},\r\n\"exo\": {\"id\": \"exo\", \"title\": \"Exodus\", \"usfm\": \"02-EXO\", \"testament\": \"old\", \"verseCount\": 1213, \"chapters\": [22, 25, 22, 31, 23, 30, 25, 32, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 36, 31, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 38]},\r\n\"lev\": {\"id\": \"lev\", \"title\": \"Leviticus\", \"usfm\": \"03-LEV\", \"testament\": \"old\", \"verseCount\": 859, \"chapters\": [17, 16, 17, 35, 19, 30, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 46, 34]},\r\n\"num\": {\"id\": \"num\", \"title\": \"Numbers\", \"usfm\": \"04-NUM\", \"testament\": \"old\", \"verseCount\": 1288, \"chapters\": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 35, 16, 33, 45, 41, 50, 13, 32, 22, 29, 35, 41, 30, 25, 18, 65, 23, 31, 40, 16, 54, 42, 56, 29, 34, 13]},\r\n\"deu\": {\"id\": \"deu\", \"title\": \"Deuteronomy\", \"usfm\": \"05-DEU\", \"testament\": \"old\", \"verseCount\": 959, \"chapters\": [46, 37, 29, 49, 33, 25, 26, 20, 29, 22, 32, 32, 18, 29, 23, 22, 20, 22, 21, 20, 23, 30, 25, 22, 19, 19, 26, 68, 29, 20, 30, 52, 29, 12]},\r\n\"jos\": {\"id\": \"jos\", \"title\": \"Joshua\", \"usfm\": \"06-JOS\", \"testament\": \"old\", \"verseCount\": 658, \"chapters\": [18, 24, 17, 24, 15, 27, 26, 35, 27, 43, 23, 24, 33, 15, 63, 10, 18, 28, 51, 9, 45, 34, 16, 33]},\r\n\"jdg\": {\"id\": \"jdg\", \"title\": \"Judges\", \"usfm\": \"07-JDG\", \"testament\": \"old\", \"verseCount\": 618, \"chapters\": [36, 23, 31, 24, 31, 40, 25, 35, 57, 18, 40, 15, 25, 20, 20, 31, 13, 31, 30, 48, 25]},\r\n\"rut\": {\"id\": \"rut\", \"title\": \"Ruth\", \"usfm\": \"08-RUT\", \"testament\": \"old\", \"verseCount\": 85, \"chapters\": [22, 23, 18, 22]},\r\n\"1sa\": {\"id\": \"1sa\", \"title\": \"1 Samuel\", \"usfm\": \"09-1SA\", \"testament\": \"old\", \"verseCount\": 810, \"chapters\": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 42, 15, 23, 29, 22, 44, 25, 12, 25, 11, 31, 13]},\r\n\"2sa\": {\"id\": \"2sa\", \"title\": \"2 Samuel\", \"usfm\": \"10-2SA\", \"testament\": \"old\", \"verseCount\": 695, \"chapters\": [27, 32, 39, 12, 25, 23, 29, 18, 13, 19, 27, 31, 39, 33, 37, 23, 29, 33, 43, 26, 22, 51, 39, 25]},\r\n\"1ki\": {\"id\": \"1ki\", \"title\": \"1 Kings\", \"usfm\": \"11-1KI\", \"testament\": \"old\", \"verseCount\": 816, \"chapters\": [53, 46, 28, 34, 18, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 53]},\r\n\"2ki\": {\"id\": \"2ki\", \"title\": \"2 Kings\", \"usfm\": \"12-2KI\", \"testament\": \"old\", \"verseCount\": 719, \"chapters\": [18, 25, 27, 44, 27, 33, 20, 29, 37, 36, 21, 21, 25, 29, 38, 20, 41, 37, 37, 21, 26, 20, 37, 20, 30]},\r\n\"1ch\": {\"id\": \"1ch\", \"title\": \"1 Chronicles\", \"usfm\": \"13-1CH\", \"testament\": \"old\", \"verseCount\": 942, \"chapters\": [54, 55, 24, 43, 26, 81, 40, 40, 44, 14, 47, 40, 14, 17, 29, 43, 27, 17, 19, 8, 30, 19, 32, 31, 31, 32, 34, 21, 30]},\r\n\"2ch\": {\"id\": \"2ch\", \"title\": \"2 Chronicles\", \"usfm\": \"14-2CH\", \"testament\": \"old\", \"verseCount\": 822, \"chapters\": [17, 18, 17, 22, 14, 42, 22, 18, 31, 19, 23, 16, 22, 15, 19, 14, 19, 34, 11, 37, 20, 12, 21, 27, 28, 23, 9, 27, 36, 27, 21, 33, 25, 33, 27, 23]},\r\n\"ezr\": {\"id\": \"ezr\", \"title\": \"Ezra\", \"usfm\": \"15-EZR\", \"testament\": \"old\", \"verseCount\": 280, \"chapters\": [11, 70, 13, 24, 17, 22, 28, 36, 15, 44]},\r\n\"neh\": {\"id\": \"neh\", \"title\": \"Nehemiah\", \"usfm\": \"16-NEH\", \"testament\": \"old\", \"verseCount\": 406, \"chapters\": [11, 20, 32, 23, 19, 19, 73, 18, 38, 39, 36, 47, 31]},\r\n\"est\": {\"id\": \"est\", \"title\": \"Esther\", \"usfm\": \"17-EST\", \"testament\": \"old\", \"verseCount\": 167, \"chapters\": [22, 23, 15, 17, 14, 14, 10, 17, 32, 3]},\r\n\"job\": {\"id\": \"job\", \"title\": \"Job\", \"usfm\": \"18-JOB\", \"testament\": \"old\", \"verseCount\": 1070, \"chapters\": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 22, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 30, 24, 34, 17]},\r\n\"psa\": {\"id\": \"psa\", \"title\": \"Psalms\", \"usfm\": \"19-PSA\", \"testament\": \"old\", \"verseCount\": 2461, \"chapters\": [6, 12, 8, 8, 12, 10, 17, 9, 20, 18, 7, 8, 6, 7, 5, 11, 15, 50, 14, 9, 13, 31, 6, 10, 22, 12, 14, 9, 11, 12, 24, 11, 22, 22, 28, 12, 40, 22, 13, 17, 13, 11, 5, 26, 17, 11, 9, 14, 20, 23, 19, 9, 6, 7, 23, 13, 11, 11, 17, 12, 8, 12, 11, 10, 13, 20, 7, 35, 36, 5, 24, 20, 28, 23, 10, 12, 20, 72, 13, 19, 16, 8, 18, 12, 13, 17, 7, 18, 52, 17, 16, 15, 5, 23, 11, 13, 12, 9, 9, 5, 8, 28, 22, 35, 45, 48, 43, 13, 31, 7, 10, 10, 9, 8, 18, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 13, 10, 7, 12, 15, 21, 10, 20, 14, 9, 6]},\r\n\"pro\": {\"id\": \"pro\", \"title\": \"Proverbs\", \"usfm\": \"20-PRO\", \"testament\": \"old\", \"verseCount\": 915, \"chapters\": [33, 22, 35, 27, 23, 35, 27, 36, 18, 32, 31, 28, 25, 35, 33, 33, 28, 24, 29, 30, 31, 29, 35, 34, 28, 28, 27, 28, 27, 33, 31]},\r\n\"ecc\": {\"id\": \"ecc\", \"title\": \"Ecclesiastes\", \"usfm\": \"21-ECC\", \"testament\": \"old\", \"verseCount\": 222, \"chapters\": [18, 26, 22, 16, 20, 12, 29, 17, 18, 20, 10, 14]},\r\n\"sng\": {\"id\": \"sng\", \"title\": \"Song of Songs\", \"usfm\": \"22-SNG\", \"testament\": \"old\", \"verseCount\": 117, \"chapters\": [17, 17, 11, 16, 16, 13, 13, 14]},\r\n\"isa\": {\"id\": \"isa\", \"title\": \"Isaiah\", \"usfm\": \"23-ISA\", \"testament\": \"old\", \"verseCount\": 1292, \"chapters\": [31, 22, 26, 6, 30, 13, 25, 22, 21, 34, 16, 6, 22, 32, 9, 14, 14, 7, 25, 6, 17, 25, 18, 23, 12, 21, 13, 29, 24, 33, 9, 20, 24, 17, 10, 22, 38, 22, 8, 31, 29, 25, 28, 28, 25, 13, 15, 22, 26, 11, 23, 15, 12, 17, 13, 12, 21, 14, 21, 22, 11, 12, 19, 12, 25, 24]},\r\n\"jer\": {\"id\": \"jer\", \"title\": \"Jermiah\", \"usfm\": \"24-JER\", \"testament\": \"old\", \"verseCount\": 1364, \"chapters\": [19, 37, 25, 31, 31, 30, 34, 22, 26, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 21, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34]},\r\n\"lam\": {\"id\": \"lam\", \"title\": \"Lamentations\", \"usfm\": \"25-LAM\", \"testament\": \"old\", \"verseCount\": 154, \"chapters\": [22, 22, 66, 22, 22]},\r\n\"ezk\": {\"id\": \"ezk\", \"title\": \"Ezekiel\", \"usfm\": \"26-EZK\", \"testament\": \"old\", \"verseCount\": 1273, \"chapters\": [28, 10, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 49, 32, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35]},\r\n\"dan\": {\"id\": \"dan\", \"title\": \"Daniel\", \"usfm\": \"27-DAN\", \"testament\": \"old\", \"verseCount\": 357, \"chapters\": [21, 49, 30, 37, 31, 28, 28, 27, 27, 21, 45, 13]},\r\n\"hos\": {\"id\": \"hos\", \"title\": \"Hosea\", \"usfm\": \"28-HOS\", \"testament\": \"old\", \"verseCount\": 197, \"chapters\": [11, 23, 5, 19, 15, 11, 16, 14, 17, 15, 12, 14, 16, 9]},\r\n\"jol\": {\"id\": \"jol\", \"title\": \"Joel\", \"usfm\": \"29-JOL\", \"testament\": \"old\", \"verseCount\": 73, \"chapters\": [20, 32, 21]},\r\n\"amo\": {\"id\": \"amo\", \"title\": \"Amos\", \"usfm\": \"30-AMO\", \"testament\": \"old\", \"verseCount\": 146, \"chapters\": [15, 16, 15, 13, 27, 14, 17, 14, 15]},\r\n\"oba\": {\"id\": \"oba\", \"title\": \"Obadiah\", \"usfm\": \"31-OBA\", \"testament\": \"old\", \"verseCount\": 21, \"chapters\": [21]},\r\n\"jon\": {\"id\": \"jon\", \"title\": \"Jonah\", \"usfm\": \"32-JON\", \"testament\": \"old\", \"verseCount\": 48, \"chapters\": [17, 10, 10, 11]},\r\n\"mic\": {\"id\": \"mic\", \"title\": \"Micah\", \"usfm\": \"33-MIC\", \"testament\": \"old\", \"verseCount\": 105, \"chapters\": [16, 13, 12, 13, 15, 16, 20]},\r\n\"nam\": {\"id\": \"nam\", \"title\": \"Nahum\", \"usfm\": \"34-NAM\", \"testament\": \"old\", \"verseCount\": 47, \"chapters\": [15, 13, 19]},\r\n\"hab\": {\"id\": \"hab\", \"title\": \"Habakkuk\", \"usfm\": \"35-HAB\", \"testament\": \"old\", \"verseCount\": 56, \"chapters\": [17, 20, 19]},\r\n\"zep\": {\"id\": \"zep\", \"title\": \"Zephaniah\", \"usfm\": \"36-ZEP\", \"testament\": \"old\", \"verseCount\": 53, \"chapters\": [18, 15, 20]},\r\n\"hag\": {\"id\": \"hag\", \"title\": \"Haggai\", \"usfm\": \"37-HAG\", \"testament\": \"old\", \"verseCount\": 38, \"chapters\": [15, 23]},\r\n\"zec\": {\"id\": \"zec\", \"title\": \"Zechariah\", \"usfm\": \"38-ZEC\", \"testament\": \"old\", \"verseCount\": 211, \"chapters\": [21, 13, 10, 14, 11, 15, 14, 23, 17, 12, 17, 14, 9, 21]},\r\n\"mal\": {\"id\": \"mal\", \"title\": \"Malachi\", \"usfm\": \"39-MAL\", \"testament\": \"old\", \"verseCount\": 55, \"chapters\": [14, 17, 18, 6]},\r\n\"mat\": {\"id\": \"mat\", \"title\": \"Matthew\", \"usfm\": \"41-MAT\", \"testament\": \"new\", \"verseCount\": 1071, \"chapters\": [25, 23, 17, 25, 48, 34, 29, 34, 38, 42, 30, 50, 58, 36, 39, 28, 27, 35, 30, 34, 46, 46, 39, 51, 46, 75, 66, 20]},\r\n\"mrk\": {\"id\": \"mrk\", \"title\": \"Mark\", \"usfm\": \"42-MRK\", \"testament\": \"new\", \"verseCount\": 678, \"chapters\": [45, 28, 35, 41, 43, 56, 37, 38, 50, 52, 33, 44, 37, 72, 47, 20]},\r\n\"luk\": {\"id\": \"luk\", \"title\": \"Luke\", \"usfm\": \"43-LUK\", \"testament\": \"new\", \"verseCount\": 1151, \"chapters\": [80, 52, 38, 44, 39, 49, 50, 56, 62, 42, 54, 59, 35, 35, 32, 31, 37, 43, 48, 47, 38, 71, 56, 53]},\r\n\"jhn\": {\"id\": \"jhn\", \"title\": \"John\", \"usfm\": \"44-JHN\", \"testament\": \"new\", \"verseCount\": 879, \"chapters\": [51, 25, 36, 54, 47, 71, 53, 59, 41, 42, 57, 50, 38, 31, 27, 33, 26, 40, 42, 31, 25]},\r\n\"act\": {\"id\": \"act\", \"title\": \"Acts\", \"usfm\": \"45-ACT\", \"testament\": \"new\", \"verseCount\": 1007, \"chapters\": [26, 47, 26, 37, 42, 15, 60, 40, 43, 48, 30, 25, 52, 28, 41, 40, 34, 28, 41, 38, 40, 30, 35, 27, 27, 32, 44, 31]},\r\n\"rom\": {\"id\": \"rom\", \"title\": \"Romans\", \"usfm\": \"46-ROM\", \"testament\": \"new\", \"verseCount\": 433, \"chapters\": [32, 29, 31, 25, 21, 23, 25, 39, 33, 21, 36, 21, 14, 23, 33, 27]},\r\n\"1co\": {\"id\": \"1co\", \"title\": \"1 Corinthians\", \"usfm\": \"47-1CO\", \"testament\": \"new\", \"verseCount\": 437, \"chapters\": [31, 16, 23, 21, 13, 20, 40, 13, 27, 33, 34, 31, 13, 40, 58, 24]},\r\n\"2co\": {\"id\": \"2co\", \"title\": \"2 Corinthians\", \"usfm\": \"48-2CO\", \"testament\": \"new\", \"verseCount\": 257, \"chapters\": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 14]},\r\n\"gal\": {\"id\": \"gal\", \"title\": \"Galations\", \"usfm\": \"49-GAL\", \"testament\": \"new\", \"verseCount\": 149, \"chapters\": [24, 21, 29, 31, 26, 18]},\r\n\"eph\": {\"id\": \"eph\", \"title\": \"Ephesians\", \"usfm\": \"50-EPH\", \"testament\": \"new\", \"verseCount\": 155, \"chapters\": [23, 22, 21, 32, 33, 24]},\r\n\"php\": {\"id\": \"php\", \"title\": \"Phillipians\", \"usfm\": \"51-PHP\", \"testament\": \"new\", \"verseCount\": 104, \"chapters\": [30, 30, 21, 23]},\r\n\"col\": {\"id\": \"col\", \"title\": \"Colossians\", \"usfm\": \"52-COL\", \"testament\": \"new\", \"verseCount\": 95, \"chapters\": [29, 23, 25, 18]},\r\n\"1th\": {\"id\": \"1th\", \"title\": \"1 Thessalonians\", \"usfm\": \"53-1TH\", \"testament\": \"new\", \"verseCount\": 89, \"chapters\": [10, 20, 13, 18, 28]},\r\n\"2th\": {\"id\": \"2th\", \"title\": \"2 Thessalonians\", \"usfm\": \"54-2TH\", \"testament\": \"new\", \"verseCount\": 47, \"chapters\": [12, 17, 18]},\r\n\"1ti\": {\"id\": \"1ti\", \"title\": \"1 Timothy\", \"usfm\": \"55-1TI\", \"testament\": \"new\", \"verseCount\": 113, \"chapters\": [20, 15, 16, 16, 25, 21]},\r\n\"2ti\": {\"id\": \"2ti\", \"title\": \"2 Timothy\", \"usfm\": \"56-2TI\", \"testament\": \"new\", \"verseCount\": 83, \"chapters\": [18, 26, 17, 22]},\r\n\"tit\": {\"id\": \"tit\", \"title\": \"Titus\", \"usfm\": \"57-TIT\", \"testament\": \"new\", \"verseCount\": 46, \"chapters\": [16, 15, 15]},\r\n\"phm\": {\"id\": \"phm\", \"title\": \"Philemon\", \"usfm\": \"58-PHM\", \"testament\": \"new\", \"verseCount\": 25, \"chapters\": [25]},\r\n\"heb\": {\"id\": \"heb\", \"title\": \"Hebrews\", \"usfm\": \"59-HEB\", \"testament\": \"new\", \"verseCount\": 303, \"chapters\": [14, 18, 19, 16, 14, 20, 28, 13, 28, 39, 40, 29, 25]},\r\n\"jas\": {\"id\": \"jas\", \"title\": \"James\", \"usfm\": \"60-JAS\", \"testament\": \"new\", \"verseCount\": 108, \"chapters\": [27, 26, 18, 17, 20]},\r\n\"1pe\": {\"id\": \"1pe\", \"title\": \"1 Peter\", \"usfm\": \"61-1PE\", \"testament\": \"new\", \"verseCount\": 105, \"chapters\": [25, 25, 22, 19, 14]},\r\n\"2pe\": {\"id\": \"2pe\", \"title\": \"2 Peter\", \"usfm\": \"62-2PE\", \"testament\": \"new\", \"verseCount\": 61, \"chapters\": [21, 22, 18]},\r\n\"1jn\": {\"id\": \"1jn\", \"title\": \"1 John\", \"usfm\": \"63-1JN\", \"testament\": \"new\", \"verseCount\": 105, \"chapters\": [10, 29, 24, 21, 21]},\r\n\"2jn\": {\"id\": \"2jn\", \"title\": \"2 John\", \"usfm\": \"64-2JN\", \"testament\": \"new\", \"verseCount\": 13, \"chapters\": [13]},\r\n\"3jn\": {\"id\": \"3jn\", \"title\": \"3 John\", \"usfm\": \"65-3JN\", \"testament\": \"new\", \"verseCount\": 15, \"chapters\": [15]},\r\n\"jud\": {\"id\": \"jud\", \"title\": \"Jude\", \"usfm\": \"66-JUD\", \"testament\": \"new\", \"verseCount\": 25, \"chapters\": [25]},\r\n\"rev\": {\"id\": \"rev\", \"title\": \"Revelation\", \"usfm\": \"67-REV\", \"testament\": \"new\", \"verseCount\": 404, \"chapters\": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 17, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21]}\r\n}\r\n\r\n//import data from './books.json';\r\n// import * as opt from './optimize'\r\n\r\n// export interface bookDataIF {\r\n//   \"id\";\r\n//   \"title\";\r\n//   \"usfm\";\r\n//   \"testament\";\r\n//   \"verseCount\": number;\r\n//   \"chapters\": number[];\r\n// }\r\n\r\nconst extraBookList = ['FRT','BAK'];\r\nexport const isValidBookID = (bookId) => {\r\n  return bookId.toLowerCase() in data || extraBookList.indexOf(bookId) >= 0;\r\n}\r\nexport const isOptionalValidBookID = (bookId) => {\r\n  return !bookId || bookId.toLowerCase() in data || extraBookList.indexOf(bookId) >= 0;\r\n}\r\nexport const isExtraBookID = (bookId) => {\r\n  return extraBookList.indexOf(bookId) >= 0;\r\n}\r\n\r\n\r\nexport const usfmNumberName = (bookId) => {\r\n  try {return data[bookId.toLowerCase()].usfm;}\r\n  catch(err) {throw new Error(`usfmNumberName() given invalid bookId: '${bookId}'`);}\r\n}\r\n\r\nexport const chaptersInBook = (bookId) => {\r\n  let chapters;\r\n  try {\r\n    chapters = data[bookId.toLowerCase()].chapters;\r\n  } catch (err) {\r\n    throw new Error(`chaptersInBook() given invalid bookId: '${bookId}'`);\r\n  }\r\n  if (chapters === undefined) {\r\n    throw new Error(`chaptersInBook(): Invalid bookId: '${bookId}'`);\r\n  }\r\n  return chapters;\r\n};\r\n\r\nexport const versesInChapter = (bookId, chapter) => {\r\n  const verses = chaptersInBook(bookId)[chapter - 1];\r\n  if (verses === undefined) {\r\n    throw new Error(`versesInChapter(${bookId}) given invalid chapter: ${chapter}`);\r\n  }\r\n  return verses;\r\n};\r\n\r\n// export const bookData = (bookId) => {\r\n//   const _bookData: bookDataIF = data.filter(row => row.id === bookId)[0];\r\n//   return _bookData;\r\n// };\r\n\r\nexport const testament = (bookId) => {\r\n  const _testament = data[bookId.toLowerCase()].testament;\r\n  return _testament;\r\n};\r\n\r\n// export const newTestament = () => {\r\n//   let list[] = [];\r\n//   for (const i=0; i < data.length; i++) {\r\n//     if ( data[i].testament === \"new\" ) {\r\n//       list.push( data[i].title )\r\n//     }\r\n//   }\r\n//   return list;\r\n// }\r\n\r\n// export const oldTestament = () => {\r\n//   let list[] = [];\r\n//   for (const i=0; i < data.length; i++) {\r\n//     if ( data[i].testament === \"old\" ) {\r\n//       list.push( data[i].title )\r\n//     }\r\n//   }\r\n//   return list;\r\n// }\r\n\r\n// export const bookDataTitles = () => {\r\n//   let list[] = [];\r\n//   for (const i=0; i < data.length; i++) {\r\n//       list.push( data[i].title )\r\n//   }\r\n//   return list;\r\n// }\r\n\r\n// export const titlesToBoolean = () => {\r\n//   let ob: opt.bpStateIF = {};\r\n//   let list = bookDataTitles();\r\n//   list.forEach((v,k) => {ob[v]= [false,false]});\r\n//   return ob;\r\n// }\r\n\r\n// export const bookIdByTitle = (title) => {\r\n//   for (const i=0; i < data.length; i++) {\r\n//     if ( data[i].title === title ) {\r\n//       return data[i].id;\r\n//     }\r\n//   }\r\n//   return \"\";\r\n// }\r\n\r\nexport const bookTitleById = (id) => {\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].id === id ) {\r\n      return data[i].title;\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nconst oftenMissingList = [\r\n  // See https://en.wikipedia.org/wiki/List_of_New_Testament_verses_not_included_in_modern_English_translations\r\n  ['NEH', 7, 68], // ?\r\n  ['MAT', 16, 3],\r\n  ['MAT', 17, 21],\r\n  ['MAT', 18, 11],\r\n  // ['MAT', 20, 16b],\r\n  ['MAT', 23, 14],\r\n  // ['MRK', 6, 11b],\r\n  ['MRK', 7, 16],\r\n  ['MRK', 9, 44], ['MRK', 9, 46],\r\n  ['MRK', 11, 26],\r\n  ['MRK', 15, 28],\r\n  ['MRK', 16, 9], ['MRK', 16, 10], ['MRK', 16, 11], ['MRK', 16, 12], ['MRK', 16, 13], ['MRK', 16, 14],\r\n    ['MRK', 16, 15], ['MRK', 16, 16], ['MRK', 16, 17], ['MRK', 16, 18], ['MRK', 16, 19], ['MRK', 16, 20],\r\n  // ['LUK', 4, 8b],\r\n  // ['LUK', 9, 55], ['LUK', 9, 56],\r\n  ['LUK', 17, 36],\r\n  ['LUK', 22, 43], // ?\r\n  ['LUK', 22, 44], // ?\r\n  ['LUK', 23, 17],\r\n  ['JHN', 5, 3], ['JHN', 5, 4],\r\n  ['JHN', 7, 53], // ?\r\n  ['JHN', 8, 1], // ?\r\n  ['ACT', 8, 37],\r\n  // ['ACT', 9, 5], ['ACT', 9, 6],\r\n  // ['ACT', 13, 42],\r\n  ['ACT', 15, 34],\r\n  // ['ACT', 23, 9b],\r\n  ['ACT', 24, 6], ['ACT', 24, 7], ['ACT', 24, 8],\r\n  ['ACT', 28, 29],\r\n  ['ROM', 16, 24],\r\n  ['2CO', 13, 14], // ?\r\n  ['1JN', 5, 7], ['1JN', 5, 8],\r\n];\r\n\r\n\r\nexport function isOftenMissing(bookID,C,V) {\r\n  function matchBCV(entry) { return entry[0]===bookID && entry[1]===C && entry[2]===V; }\r\n\r\n  return oftenMissingList.find(matchBCV) !== undefined;\r\n}\r\n"],"sourceRoot":""}